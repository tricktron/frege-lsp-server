module ch.fhnw.thga.TypeSignature where

import Interpreter.FregeInterpreter
import Control.monad.trans.MonadIO
import Control.monad.trans.MonadTrans
import Repl.FregeRepl

evalFregeFile :: String -> IO (ReplResult, ReplEnv)
evalFregeFile file = do
  env <- ReplEnv.initialState
  (res, newEnv) <- Repl.run (eval $ Eval file) env
  return (res, newEnv)

getFunctionTypeSignature :: String -> String -> IO (ReplResult)
getFunctionTypeSignature file fname = do
  (_, env) <- evalFregeFile file
  (res, newEnv) <- Repl.run (eval $ Type fname) env
  return res
  
