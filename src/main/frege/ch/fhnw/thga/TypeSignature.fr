module ch.fhnw.thga.TypeSignature where

import Interpreter.FregeInterpreter(Interpreter, typeof)
import Control.monad.trans.MonadIO(liftIO)
import Repl.FregeRepl(ReplResult, ReplEnv, Repl, Eval, Type, eval)

evalFregeFile :: String -> IO (ReplResult, ReplEnv)
evalFregeFile file = do
  env <- ReplEnv.initialState
  (res, newEnv) <- Repl.run (eval $ Eval file) env
  return (res, newEnv)

getFunctionTypeSignature :: String -> ReplEnv -> IO (Maybe String, ReplEnv)
getFunctionTypeSignature fname env = Repl.run (evalType fname) env

evalType :: String -> Repl (Maybe String)
evalType expr = do
  env <- Repl.get
  res <- liftIO $ fst <$> Interpreter.run (typeof expr) env.config env.state
  case res of
    Left _     -> return Nothing
    Right typ -> return $ Just typ
