module ch.fhnw.thga.fregelanguageserver.hover.HoverLSP where

import ch.fhnw.thga.fregelanguageserver.diagnostic.LSPDiagnostic (PositionLSP, RangeLSP)
import ch.fhnw.thga.fregelanguageserver.hover.Hover (Hover, compileAndGetTypeSignatureOnHover)

data MarkupContentLSP = pure native org.eclipse.lsp4j.MarkupContent where
    pure native new :: String -> String -> MarkupContentLSP

data MarkupKindLSP = pure native org.eclipse.lsp4j.MarkupKind where
    native plaintext "org.eclipse.lsp4j.MarkupKind.PLAINTEXT" :: String
    native markdown "org.eclipse.lsp4j.MarkupKind.MARKDOWN"   :: String

data HoverLSP = pure native org.eclipse.lsp4j.Hover where
    pure native new :: MarkupContentLSP -> RangeLSP -> HoverLSP

    hoverToHoverLSP :: Hover -> HoverLSP
    hoverToHoverLSP Hover { range, content } =
        HoverLSP.new 
            (MarkupContentLSP.new MarkupKindLSP.markdown (show content))
            (RangeLSP.fromRange range)

compileAndGetTypeSignatureOnHoverLSP :: String -> PositionLSP -> IO (Maybe HoverLSP)
compileAndGetTypeSignatureOnHoverLSP fregeCode posLSP = do
    hover <- compileAndGetTypeSignatureOnHover fregeCode (PositionLSP.toPosition posLSP)
    pure $ fmap HoverLSP.hoverToHoverLSP hover