module ch.fhnw.thga.fregelanguageserver.hover.Hover where

import ch.fhnw.thga.fregelanguageserver.compile.CompileGlobal(standardCompileGlobal)
import ch.fhnw.thga.fregelanguageserver.compile.CompileNormalMode(compile)
import ch.fhnw.thga.fregelanguageserver.types.Position(Position)
import ch.fhnw.thga.fregelanguageserver.types.Range(Range, tokenToRange)

import Compiler.types.Global(Global, Symbol)
import Compiler.types.Tokens(Token)
import Test.QuickCheck(Property, once, morallyDubiousIOProperty)
import Control.monad.Reader(ReaderT)
import Control.monad.trans.MonadTrans (lift)
import Control.monad.trans.MaybeT (MaybeT)
import frege.ide.Utilities(label)
import Data.List(find)
import Compiler.types.QNames(QName)
import Control.arrow.Kleisli(Kleisli)
import frege.data.wrapper.Identity(Identity)

newtype FregeCodeBlock = FregeCodeBlock {
    code :: String
}

type RGlobal = Kleisli Identity Global

derive Eq FregeCodeBlock
instance Show FregeCodeBlock where
    show FregeCodeBlock { code } = 
        "```frege\n" ++ code ++ "\n```"

data Hover = Hover {
    range   :: Range,
    content :: FregeCodeBlock
}

derive Eq Hover
derive Show Hover

liftMaybe :: MonadPlus m => Maybe a -> m a
liftMaybe = maybe mzero return

getSymbolType:: Symbol -> RGlobal String
getSymbolType sym = do
    global <- Reader.ask
    pure    $ label global sym

findToken :: Position -> MaybeT RGlobal Token
findToken pos = MaybeT $ do
    global <- Reader.ask
    tokens  = listFromArray global.sub.toks
    pure    $ find isHoverOverToken tokens where
        isHoverOverToken :: Token -> Bool
        isHoverOverToken t = 
            pos.line      == t.line && 
            pos.character  < (t.col + (length t.value)) &&
            pos.character >= t.col

findSymbol :: QName -> MaybeT RGlobal Symbol
findSymbol qname = MaybeT $ do
    global  <- Reader.ask
    pure     $ Global.find global qname

tokenToQName :: Token -> MaybeT RGlobal QName
tokenToQName t = do
    global              <- lift $ Reader.ask
    namespaceOrVariable <- liftMaybe $ Global.resolved global t
    liftMaybe            $ either (const Nothing) Just namespaceOrVariable

getTypeSignatureOnHover :: Position -> Global -> Maybe Hover
getTypeSignatureOnHover pos global = res where
    readerAction = MaybeT.run $ getTypeOnHover pos
    res          = Identity.run $ ReaderT.run readerAction global

getTypeOnHover :: Position -> MaybeT RGlobal Hover
getTypeOnHover pos = do
    token      <- findToken pos
    qname      <- tokenToQName token
    symbol     <- findSymbol qname
    symbolType <- lift $ getSymbolType symbol
    pure $ Hover 
        { 
            range   = tokenToRange token, 
            content = FregeCodeBlock symbolType
        }

shouldShowLocalVaridTypeSignature :: Property
shouldShowLocalVaridTypeSignature = once $ morallyDubiousIOProperty do
    fregeHoverCode  = "module HoverTest where\n\n" ++ "simplyString = \"Hello\""
    global         <- standardCompileGlobal
    compiledGlobal <- compile fregeHoverCode global
    expected        = Just Hover 
        { 
            range   = Range { start = Position 3 1, end = Position 3 13 },
            content = FregeCodeBlock "simplyString :: String"
        }
    actual          = getTypeSignatureOnHover (Position 3 3) compiledGlobal
    pure            $ expected == actual

shouldShowImportedVaridTypeSignature :: Property
shouldShowImportedVaridTypeSignature = once $ morallyDubiousIOProperty do
    fregeHoverCode =  "module HoverTest where\n\n" ++ "main = println \"Hello\""
    global         <- standardCompileGlobal
    compiledGlobal <- compile fregeHoverCode global
    expected        = Just Hover 
        { 
            range   = Range { start = Position 3 8, end = Position 3 15 },
            content = FregeCodeBlock "println :: Show 𝖆 => 𝖆 -> IO ()"
        }
    actual          = getTypeSignatureOnHover (Position 3 9) compiledGlobal
    pure            $ expected == actual

shouldShowLocalConidTypeSignature :: Property
shouldShowLocalConidTypeSignature = once $ morallyDubiousIOProperty do
    fregeHoverCode  = "module HoverTest where\n\n"
                   ++ "data MyMaybe a = MyNothing | MyJust a\n"
    global         <- standardCompileGlobal
    compiledGlobal <- compile fregeHoverCode global
    expected        = Just Hover 
        { 
            range   = Range { start = Position 3 6, end = Position 3 13 },
            content = FregeCodeBlock "MyMaybe :: *->*"
        }
    actual          = getTypeSignatureOnHover (Position 3 7) compiledGlobal
    pure            $ expected == actual

shouldShowImportedConidTypeSignature :: Property
shouldShowImportedConidTypeSignature = once $ morallyDubiousIOProperty do
    fregeHoverCode  = "module HoverTest where\n\n"
                   ++ "import frege.data.Maybe(Maybe)"
    global         <- standardCompileGlobal
    compiledGlobal <- compile fregeHoverCode global
    expected        = Just Hover 
        { 
            range   = Range { start = Position 3 25, end = Position 3 30 },
            content = FregeCodeBlock "Maybe :: *->*"
        }
    actual          = getTypeSignatureOnHover (Position 3 27) compiledGlobal
    pure           $  expected == actual

shouldShowLocalConidDataConstructor :: Property
shouldShowLocalConidDataConstructor = once $ morallyDubiousIOProperty do
    fregeHoverCode  = "module HoverTest where\n\n"
                   ++ "data MyMaybe a = MyNothing | MyJust a\n"
                   ++ "res = MyJust 42"
    global         <- standardCompileGlobal
    compiledGlobal <- compile fregeHoverCode global
    expected        = Just Hover 
        { 
            range   = Range { start = Position 4 7, end = Position 4 13 },
            content = FregeCodeBlock "MyJust :: a -> MyMaybe a"
        }
    actual          = getTypeSignatureOnHover (Position 4 8) compiledGlobal
    pure            $ expected == actual

shouldShowImportedConidDataConstructor :: Property
shouldShowImportedConidDataConstructor = once $ morallyDubiousIOProperty do
    fregeHoverCode  = "module HoverTest where\n\n"
                   ++ "import frege.data.Maybe(Maybe, Just)\n"
                   ++ "res = Just 42"
    global         <- standardCompileGlobal
    compiledGlobal <- compile fregeHoverCode global
    expected        = Just Hover 
        { 
            range   = Range { start = Position 4 7, end = Position 4 11 },
            content = FregeCodeBlock "Just :: a -> Maybe a"
        }
    actual          = getTypeSignatureOnHover (Position 4 10) compiledGlobal
    pure            $ expected == actual

main :: IO ()
main = do
    let fregeCode       = "module HoverTest where\n\n" 
                       ++ "import frege.compiler.Main(runpass)\n\n"
                       ++ "pass = runpass\n" ++ "me = 42\n\n"
                       ++ "main = do\n  a = \"Hello\"\n  println a"
    
    let simpleFregeCode = "module HoverTest where\n\n" 
                       ++ "data MyMaybe a = MyNothing | MyJust a\n"
                       ++ "res = MyJust 42"
    global             <- standardCompileGlobal
    compiledGlobal     <- compile simpleFregeCode global
    println             $ CharSequence.toString compiledGlobal.sub.code
    tokens              = listFromArray compiledGlobal.sub.toks
    for tokens println
    hover               = getTypeSignatureOnHover (Position 5 9) compiledGlobal
    println hover
    println "end"
