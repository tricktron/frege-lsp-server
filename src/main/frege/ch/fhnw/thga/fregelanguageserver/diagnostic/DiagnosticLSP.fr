module ch.fhnw.thga.fregelanguageserver.diagnostic.DiagnosticLSP where

import ch.fhnw.thga.fregelanguageserver.types.Generics(ArrayList)
import ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic(
        DiagnosticSeverity, Diagnostic, getDiagnostics
    )
import ch.fhnw.thga.fregelanguageserver.types.lsp.RangeLSP(RangeLSP)
import Compiler.types.Global(Global)

data DiagnosticSeverityLSP = pure native org.eclipse.lsp4j.DiagnosticSeverity where
    pure native error       "org.eclipse.lsp4j.DiagnosticSeverity.Error"       :: DiagnosticSeverityLSP
    pure native warning     "org.eclipse.lsp4j.DiagnosticSeverity.Warning"     :: DiagnosticSeverityLSP
    pure native information "org.eclipse.lsp4j.DiagnosticSeverity.Information" :: DiagnosticSeverityLSP
    pure native hint        "org.eclipse.lsp4j.DiagnosticSeverity.Hint"        :: DiagnosticSeverityLSP

    fromCompilerSeverity :: DiagnosticSeverity -> DiagnosticSeverityLSP
    fromCompilerSeverity HINT           = information
    fromCompilerSeverity WARNING        = warning
    fromCompilerSeverity ERROR          = error
    fromCompilerSeverity INFORMATION    = information

data DiagnosticLSP = pure native org.eclipse.lsp4j.Diagnostic where
    pure native new :: RangeLSP -> String -> DiagnosticSeverityLSP -> String -> DiagnosticLSP

    fromDiagnostic :: Diagnostic -> DiagnosticLSP
    fromDiagnostic Diagnostic { range,severity, source, message } = 
        new 
            (RangeLSP.fromRange range) 
            message 
            (DiagnosticSeverityLSP.fromCompilerSeverity severity) 
            source

getDiagnosticsLSP :: Global -> STMutable s (ArrayList DiagnosticLSP)
getDiagnosticsLSP global = do
    diagnostics    = getDiagnostics global
    diagnosticsLSP = DiagnosticLSP.fromDiagnostic <$> diagnostics
    ArrayList.fromFregeList diagnosticsLSP

main = println "hello DiagnosticLSP"