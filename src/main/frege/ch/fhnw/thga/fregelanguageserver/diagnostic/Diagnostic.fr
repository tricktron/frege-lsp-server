module ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic where

import ch.fhnw.thga.fregelanguageserver.compiler.CompilerHelper (compileFregeFile, lspGlobal)
import ch.fhnw.thga.fregelanguageserver.types.Position (Position)
import ch.fhnw.thga.fregelanguageserver.types.Range (Range)
import Compiler.types.Global (StG, StIO, Message, Global, Severity(), tokens, getST, liftStG, liftIO)
import Compiler.types.Tokens (Token)
import frege.compiler.types.Positions (Position TokenPosition)
import Test.QuickCheck (Property, once, morallyDubiousIOProperty)
import Control.monad.State (evalStateT, execStateT, evalState)

data DiagnosticSeverity = ERROR | WARNING | INFORMATION | HINT

derive Eq DiagnosticSeverity
derive Show DiagnosticSeverity

fromCompilerSeverity :: Severity -> DiagnosticSeverity
fromCompilerSeverity Severity.ERROR   = ERROR
fromCompilerSeverity Severity.WARNING = WARNING
fromCompilerSeverity Severity.HINT    = HINT

data Diagnostic = Diagnostic {
    range    :: Range,
    severity :: DiagnosticSeverity,
    source   :: String,
    message  :: String
}

derive Eq Diagnostic
derive Show Diagnostic

tokensToRange :: [ Token ] -> Range
tokensToRange []     = Range { start = Position 0 0, end = Position 1 0 }
tokensToRange [ tk ] = Range
    {
        start = Position tk.line tk.col,
        end   = Position tk.line (tk.col + (length tk.value))
    }
tokensToRange tks    = 
    let
        startToken = head tks
        endToken   = last tks
    in
    Range 
    { 
        start = Position startToken.line startToken.col,
        end   = Position endToken.line (endToken.col + (length endToken.value))  
    }

createRangeFromPos :: TokenPosition -> StG Range
createRangeFromPos pos = do
    gl <- getST
    toks = tokens pos gl
    pure $ tokensToRange toks

createDiagnosticFromMessage :: Message -> StG Diagnostic
createDiagnosticFromMessage message = do
    range <- createRangeFromPos message.pos
    pure $ Diagnostic 
        {
            range = range,
            severity = fromCompilerSeverity message.level, 
            source = "frege compiler", 
            message = message.text
        }

extractDiagnostics :: StG [ Diagnostic ]
extractDiagnostics = do
    gl <- getST
    diagnostics = fmap createDiagnosticFromMessage gl.sub.messages
    sequence diagnostics

compileAndGetDiagnostics :: String -> IO [ Diagnostic ]
compileAndGetDiagnostics fregeCode = do
    startGlobal <- lspGlobal
    gl <- execStateT (compileFregeFile fregeCode) startGlobal
    pure $ evalState (extractDiagnostics) gl

fregeLSPServerShouldMapNoCompilerMessagesToEmptyArray :: Property
fregeLSPServerShouldMapNoCompilerMessagesToEmptyArray = once $ morallyDubiousIOProperty do
    fregeCodeWithoutError = "module CorrectFregeTest where\n\n" ++ "ok = 42 + 42"
    expected = []
    actual <- compileAndGetDiagnostics fregeCodeWithoutError
    pure $ expected == actual

fregeLSPServerShouldMapSingleCompilerMessageToDiagnostics :: Property
fregeLSPServerShouldMapSingleCompilerMessageToDiagnostics = once $ morallyDubiousIOProperty do
    fregeCodeWithError = "module ch.fhnw.thga.FaultyFregeTest where\n\nimport Does.not.Exist"
    expected = 
        [ 
            Diagnostic 
            { 
                range = Range { start = Position 2 7, end = Position 2 21 }, 
                severity = ERROR, 
                source = "frege compiler", 
                message = "Could not import module frege.does.not.Exist\n(java.lang.ClassNotFoundException: frege.does.not.Exist)" 
            } 
        ]
    gl     <- lspGlobal
    actual <- compileAndGetDiagnostics fregeCodeWithError
    pure $ expected == actual

fregeLSPServerShouldMapMultipleCompilerMessageToDiagnostics :: Property
fregeLSPServerShouldMapMultipleCompilerMessageToDiagnostics = once $ morallyDubiousIOProperty do
    fregeCodeWithErrors = "module ch.fhnw.thga.FaultyFregeTest where\n\nerr1 = do\n  x = 42\n\nerr2 = [ 22.0 ] ++ \"42\"\n\nerr3 = 42 + \"42\""
    expected = 
        [ 
            Diagnostic 
            { 
                range = Range { start = Position 5 19, end = Position 5 23 }, 
                severity = ERROR, 
                source = "frege compiler", 
                message = "type error in expression\n\"42\"\ntype is : String\nexpected: [t1]"
            },
            Diagnostic 
            { 
                range = Range { start = Position 7 10, end = Position 7 11 }, 
                severity = ERROR, 
                source = "frege compiler", 
                message = "String is not an instance of Num" 
            },
            Diagnostic 
            { 
                range = Range { start = Position 2 7, end = Position 2 9 }, 
                severity = ERROR, 
                source = "frege compiler", 
                message = "last statement in a monadic do block must not\nbe let decls" 
            }
        ]
    gl     <- lspGlobal
    actual <- compileAndGetDiagnostics fregeCodeWithErrors
    pure $ expected == actual

posToTokens :: [ TokenPosition ] -> Global -> [ Token ]
posToTokens [] _ = []
posToTokens (p:ps) gl = tokens p gl ++ posToTokens ps gl

main :: IO ()
main = do
    lspGlobal     <- lspGlobal
    let fregeCode = "module ch.fhnw.thga.FaultyFregeTest where\n\nerr1 = do\n  x = 42\n\nerr2 = [ 22.0 ] ++ \"42\"\n\nerr3 = 42 + \"42\"\n\n"
    let trickyFregeCode = "module FaultyFregeTest where\n\nsimplyString s = s\n\nerr1 = (simplyString 42) ++ \"test\""
    gl            <- execStateT (compileFregeFile trickyFregeCode) lspGlobal
    println $ CharSequence.toString gl.sub.code
    for gl.sub.messages println
    let positions = map (Message.pos) gl.sub.messages
    let toks = posToTokens positions gl
    for toks println
