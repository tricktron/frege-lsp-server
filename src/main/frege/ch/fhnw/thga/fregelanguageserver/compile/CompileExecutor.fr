module ch.fhnw.thga.fregelanguageserver.compile.CompileExecutor where

import ch.fhnw.thga.fregelanguageserver.compile.CompileGlobal
import ch.fhnw.thga.fregelanguageserver.compile.CompileOptions(standardCompileOptions)
import Compiler.types.Global (
    Global, StIO, Message, StG, SubSt,
    liftIO, liftStG,getSTT, getST, forsome, stio, changeST
    )
import Compiler.common.CompilerOptions (standardGlobal, theClassLoader)
import Control.monad.State (StateT, execStateT)
import Compiler.passes.Fix()
import Compiler.passes.Imp()
import Compiler.passes.Enter()
import Compiler.passes.Fields()
import Compiler.passes.TypeAlias()
import Compiler.passes.Instances()
import Compiler.passes.Transdef()
import Compiler.passes.LetUnroll as LU()
import Compiler.passes.GlobalLam as GL()
import Compiler.passes.Easy as EA()
import Compiler.passes.Strict as SC()
import Compiler.passes.Final as FI()
import Compiler.Classes()
import Compiler.Typecheck as TC()
import Compiler.grammar.Lexer as L()
import Compiler.grammar.Frege as F()
import Compiler.enums.Flags
import Compiler.common.Desugar
import Compiler.types.Tokens
import Compiler.enums.TokenID
import Compiler.types.Packs
import Test.QuickCheck (Property, once, morallyDubiousIOProperty)

instance Show Message where
  show msg = substr (show msg.level) 0 1 ++ " " ++ show msg.pos.first.tokid ++ show msg.pos.end ++ ": " ++ msg.text

passes = 
    [
        (liftStG Fix.pass,              "join definitions"),
        (Imp.pass,                      "import packages"),
        (liftStG (Classes.passI true),  "verify imported instances"),
        (liftStG Enter.pass,            "enter definitions"),
        (liftStG Fields.pass,           "field definitions"),
        (liftStG TypeAlias.pass,        "process type aliases"), 
        (liftStG (Instances.pass ()),   "derive and enter instances"),
        (Transdef.pass,                 "resolve names"),
        (liftStG Classes.passC,         "verify class definitions"),        -- TRACE6
        (liftStG $ Classes.passI false, "verify own instances"),            -- TRACE6
        (liftStG LU.pass,               "simplify lets"),                   -- TRACE7
        (TC.pass,                       "type check"),                      -- TRACET, TRACEO
        (liftStG EA.pass,               "simplify expressions"),            -- TRACE9
        (liftStG GL.pass,               "globalize anonymous lambdas"),     -- TRACE8
        (liftStG SC.pass,               "strictness analysis"),             -- TRACES
        (liftStG FI.cleanSymtab,        "clean up")
    ]

switchState :: Global -> StG Global
switchState new = do
    old <- getST
    StG.put new
    return old

lexParseSourceCode :: String -> StG Global
lexParseSourceCode fregeCode = do
    g  <- getST
    lexPassSourceCode fregeCode
    parsePass
    gc <- switchState g
    changeST _.{ sub <- _.{ numErrors <- (gc.errors +) } }
    return gc

lexPassSourceCode :: String -> StG (String, Int)
lexPassSourceCode fregeCode = do
    tokens <- L.passCS $ CharSequence.fromString fregeCode
    return ("tokens", length tokens)

parsePass :: StG (String, Int)
parsePass = do
    g      <- getST
    result <- F.pass (filter Token.noComment g.sub.toks.toList)
    case result of
        Just (Program.Module (packname, defs, doc)) -> do
            changeST Global.{
                sub <-  SubSt.{
                    thisPack   = Pack.new packname,
                    sourcedefs = defs,
                    packageDoc = doc
                }
            }
            when (isOn g.options.flags Flags.IDETOKENS) do
                changeST Global.{sub <- SubSt.{toks <- arrayFromList . ideClean . toList}}
            stio ("tokens",  g.sub.toks.length)
        nothing -> stio ("tokens", g.sub.toks.length)
    where
        -- prepare token list for IDE: no inserted semicolons and braces, operator qualifiers
        ideClean :: [Token] -> [Token]
        ideClean (t:ts)
            | t.tokid == COMMENT, t.value=="}" = ideClean ts
            | t.col   == 0                     = ideClean ts      -- inserted semicolon or brace
            | otherwise                        = t : ideClean ts
        ideClean []                            = []

private compileSourceCode :: String -> StIO Global
private compileSourceCode fregeCode = do
    lexParseState <- liftStG $ lexParseSourceCode fregeCode
    StateT.put lexParseState
    forsome passes runpass
    g <- getSTT
    return g

compile :: String -> IO Global -> IO Global
compile fregeCode global = do
    startGlobal <- global
    execStateT (compileSourceCode fregeCode) startGlobal

runpass :: (StIO (String, Int), String) -> StIO ()
runpass (pass, description) = do
    state <- getSTT
    when (state.errors == 0) do
        (itemnm, items) <- pass
        return ()

shouldCorrectlyConfigureExtraClasspath :: Property
shouldCorrectlyConfigureExtraClasspath = once $ morallyDubiousIOProperty do
    fregeCodeWithDependency = 
        "module FregeFxDep where\n\n"++ 
        "import fregefx.JavaFxType\n\n" ++ 
        "main = println \"Hello FregeFX\""
    fregefxGlobal = CompileGlobal.fromOptions standardCompileOptions.
        {
            path = [ "./src/main/resources/fregefx-0.8.2-SNAPSHOT.jar" ]
        }
    actual <- compile fregeCodeWithDependency fregefxGlobal
    pure    $ actual.errors == 0
