/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.25.84
  from
  /Users/tricktron/github/master/frege-lsp-server/src/main/frege/ch/fhnw/thga/fregelanguageserver/compile/CompileOptions.fr
  Do not edit this file! Instead, edit the source file and recompile.
*/

package ch.fhnw.thga.fregelanguageserver.compile;

import frege.run8.Func;
import frege.run8.Lazy;
import frege.run8.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import frege.Prelude;
import frege.compiler.common.Roman;
import frege.compiler.enums.CaseKind;
import frege.compiler.enums.Flags;
import frege.compiler.enums.Literals;
import frege.compiler.enums.RFlag;
import frege.compiler.enums.SymState;
import frege.compiler.enums.TokenID;
import frege.compiler.enums.Visibility;
import frege.compiler.instances.PositionedSName;
import frege.compiler.types.AbstractJava;
import frege.compiler.types.ConstructorField;
import frege.compiler.types.Expression;
import frege.compiler.types.External;
import frege.compiler.types.Global;
import frege.compiler.types.ImportDetails;
import frege.compiler.types.JNames;
import frege.compiler.types.NSNames;
import frege.compiler.types.Packs;
import frege.compiler.types.Patterns;
import frege.compiler.types.Positions;
import frege.compiler.types.QNames;
import frege.compiler.types.SNames;
import frege.compiler.types.SourceDefinitions;
import frege.compiler.types.Strictness;
import frege.compiler.types.Symbols;
import frege.compiler.types.Targets;
import frege.compiler.types.Tokens;
import frege.compiler.types.Types;
import frege.control.Category;
import frege.control.Semigroupoid;
import frege.control.monad.State;
import frege.control.monad.trans.MonadIO;
import frege.control.monad.trans.MonadTrans;
import frege.data.Bits;
import frege.data.Foldable;
import frege.data.Monoid;
import frege.data.Traversable;
import frege.data.TreeMap;
import frege.data.Tuples;
import frege.data.wrapper.Const;
import frege.data.wrapper.Dual;
import frege.data.wrapper.Endo;
import frege.data.wrapper.Identity;
import frege.data.wrapper.Num;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Net;
import frege.java.Util;
import frege.java.util.Regex;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeDecimal;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="/Users/tricktron/github/master/frege-lsp-server/src/main/frege/ch/fhnw/thga/fregelanguageserver/compile/CompileOptions.fr",
  time=1658516063778L, jmajor=11, jminor=-1,
  imps={
    "frege.compiler.enums.Flags", "frege.compiler.types.Global", "frege.Prelude", "frege.prelude.PreludeArrays",
    "frege.prelude.PreludeBase", "frege.prelude.PreludeDecimal", "frege.prelude.PreludeIO", "frege.prelude.PreludeList",
    "frege.prelude.PreludeMonad", "frege.prelude.PreludeText", "frege.java.util.Regex", "frege.compiler.types.Targets"
  },
  nmss={
    "Flags", "Global", "Prelude", "PreludeArrays", "PreludeBase", "PreludeDecimal", "PreludeIO",
    "PreludeList", "PreludeMonad", "PreludeText", "Regexp", "Targets"
  },
  symas={}, symcs={}, symis={}, symts={},
  symvs={
    @Meta.SymV(
      offset=320,
      name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.compile.CompileOptions", base="standardCompileOptions"),
      stri="u", sig=0, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=192,
      name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.compile.CompileOptions", base="getEnvDefault"),
      stri="s(us)", sig=2, depth=2, rkind=12
    )
  },
  symls={
    @Meta.SymL(
      offset=151, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.compile.CompileOptions", base="thisTarget"),
      alias=@Meta.QName(pack="frege.compiler.types.Targets", base="thisTarget")
    )
  },
  taus={
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.compiler.types.Global", base="Options")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}),
    @Meta.Tau(kind=0, suba=1, subb=2)
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=0), @Meta.Rho(rhofun=false, rhotau=3), @Meta.Rho(sigma=1, rhotau=1),
    @Meta.Rho(sigma=1, rhotau=2)
  },
  sigmas={@Meta.Sigma(rho=0), @Meta.Sigma(rho=1), @Meta.Sigma(rho=3)}, exprs={@Meta.Expr()}
)
final public class CompileOptions  {
  




final public static Lazy<String/*<Character>*/> getEnvDefault(
  final Lazy<String/*<Character>*/> arg$1, final String/*<Character>*/ arg$2
) {
  return PreludeBase.<String/*<Character>*/, String/*<Character>*/>maybe(
            arg$1,
            (Func.U<String/*<Character>*/, String/*<Character>*/>)((final Lazy<String/*<Character>*/> arg$12943) -> {
                  return arg$12943;
                }),
            PreludeBase._toMaybe(System.getenv(arg$2))
          );
}
final public static Lazy<Global.TOptions> standardCompileOptions = Thunk.<Global.TOptions>shared(
      (Lazy<Global.TOptions>)(() -> {
            return Global.TOptions.mk(
                      "-",
                      PreludeBase.TList.DCons.<String/*<Character>*/>mk(
                            Thunk.<String/*<Character>*/>nested(
                                  (Lazy<Lazy<String/*<Character>*/>>)(() -> CompileOptions.getEnvDefault(
                                            Thunk.<String/*<Character>*/>lazy("."), "FREGE_LS_SOURCE_DIR"
                                          ))
                                ),
                            PreludeBase.TList.DList.<String/*<Character>*/>mk()
                          ),
                      (long)Bits.TBitSet.<Short>fromList(
                            Flags.IEnum_Flag.it,
                            PreludeBase.TList.DCons.<Short>mk(
                                  Thunk.<Short>lazy(Flags.TFlag.WARNINGS),
                                  PreludeBase.TList.DCons.<Short>mk(
                                        Thunk.<Short>lazy(Flags.TFlag.HINTS),
                                        PreludeBase.TList.DCons.<Short>mk(
                                              Thunk.<Short>lazy(Flags.TFlag.VERBOSE),
                                              PreludeBase.TList.DCons.<Short>mk(
                                                    Thunk.<Short>lazy(Flags.TFlag.IDEMODE),
                                                    PreludeBase.TList.DCons.<Short>mk(
                                                          Thunk.<Short>lazy(Flags.TFlag.IDETOKENS),
                                                          PreludeBase.TList.DList.<Short>mk()
                                                        )
                                                  )
                                            )
                                      )
                                )
                          ),
                      ".",
                      PreludeBase.TList.DCons.<String/*<Character>*/>mk(
                            Thunk.<String/*<Character>*/>nested(
                                  (Lazy<Lazy<String/*<Character>*/>>)(() -> CompileOptions.getEnvDefault(
                                            Thunk.<String/*<Character>*/>lazy(""), "FREGE_LS_EXTRA_CLASSPATH"
                                          ))
                                ),
                            PreludeBase.TList.DList.<String/*<Character>*/>mk()
                          ),
                      "", PreludeBase.TMaybe.DJust.<String/*<Character>*/>mk(Thunk.<String/*<Character>*/>lazy("UTF-8")),
                      PreludeBase.TList.DList.<PreludeBase.TTuple2<Integer, Integer>>mk(), Targets.thisTarget.call(),
                      PreludeBase.TMaybe.DNothing.<Types.TSigmaT<QNames.TQName>>mk(),
                      PreludeBase.TList.DList.<Types.TSigmaT<QNames.TQName>>mk(), PreludeBase.TList.DList.<Tokens.TToken>mk()
                    );
          })
    );

}
