/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.25.84
  from
  /Users/tricktron/github/master/frege-lsp-server/src/main/frege/ch/fhnw/thga/fregelanguageserver/compile/CompileExecutorLSP.fr
  Do not edit this file! Instead, edit the source file and recompile.
*/

package ch.fhnw.thga.fregelanguageserver.compile;

import frege.run8.Func;
import frege.run8.Lazy;
import frege.run8.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import ch.fhnw.thga.fregelanguageserver.compile.CompileGlobal;
import ch.fhnw.thga.fregelanguageserver.compile.CompileMakeMode;
import ch.fhnw.thga.fregelanguageserver.compile.CompileNormalMode;
import ch.fhnw.thga.fregelanguageserver.compile.CompileOptions;
import ch.fhnw.thga.fregelanguageserver.types.Generics;
import frege.Prelude;
import frege.Version;
import frege.compiler.Classes;
import frege.compiler.Classtools;
import frege.compiler.GenMeta;
import frege.compiler.Javatypes;
import frege.compiler.Kinds;
import frege.compiler.Main;
import frege.compiler.Typecheck;
import frege.compiler.Utilities;
import frege.compiler.classes.Nice;
import frege.compiler.classes.QNameMatcher;
import frege.compiler.common.Annotate;
import frege.compiler.common.AnnotateG;
import frege.compiler.common.Binders;
import frege.compiler.common.CompilerOptions;
import frege.compiler.common.Desugar;
import frege.compiler.common.Errors;
import frege.compiler.common.ImpExp;
import frege.compiler.common.JavaName;
import frege.compiler.common.Mangle;
import frege.compiler.common.PatternCompiler;
import frege.compiler.common.Resolve;
import frege.compiler.common.Roman;
import frege.compiler.common.SymbolTable;
import frege.compiler.common.Trans;
import frege.compiler.common.Tuples;
import frege.compiler.common.Types;
import frege.compiler.common.UnAlias;
import frege.compiler.enums.CaseKind;
import frege.compiler.enums.Flags;
import frege.compiler.enums.Literals;
import frege.compiler.enums.RFlag;
import frege.compiler.enums.SymState;
import frege.compiler.enums.TokenID;
import frege.compiler.enums.Visibility;
import frege.compiler.gen.java.Bindings;
import frege.compiler.gen.java.Common;
import frege.compiler.gen.java.Constants;
import frege.compiler.gen.java.DataCode;
import frege.compiler.gen.java.InstanceCode;
import frege.compiler.gen.java.Instantiation;
import frege.compiler.gen.java.Match;
import frege.compiler.gen.java.MethodCall;
import frege.compiler.gen.java.PrettyJava;
import frege.compiler.gen.java.VarCode;
import frege.compiler.grammar.Frege;
import frege.compiler.grammar.Lexer;
import frege.compiler.instances.NiceExprS;
import frege.compiler.instances.Nicer;
import frege.compiler.instances.PositionedSName;
import frege.compiler.passes.Easy;
import frege.compiler.passes.Enter;
import frege.compiler.passes.Fields;
import frege.compiler.passes.Final;
import frege.compiler.passes.Fix;
import frege.compiler.passes.GenCode;
import frege.compiler.passes.GlobalLam;
import frege.compiler.passes.Imp;
import frege.compiler.passes.Instances;
import frege.compiler.passes.LetUnroll;
import frege.compiler.passes.Strict;
import frege.compiler.passes.Transdef;
import frege.compiler.passes.TypeAlias;
import frege.compiler.tc.Methods;
import frege.compiler.tc.Patterns;
import frege.compiler.tc.Util;
import frege.compiler.types.AbstractJava;
import frege.compiler.types.ConstructorField;
import frege.compiler.types.Expression;
import frege.compiler.types.External;
import frege.compiler.types.Global;
import frege.compiler.types.ImportDetails;
import frege.compiler.types.JNames;
import frege.compiler.types.NSNames;
import frege.compiler.types.Packs;
import frege.compiler.types.Positions;
import frege.compiler.types.QNames;
import frege.compiler.types.SNames;
import frege.compiler.types.SourceDefinitions;
import frege.compiler.types.Strictness;
import frege.compiler.types.Symbols;
import frege.compiler.types.Targets;
import frege.compiler.types.Tokens;
import frege.control.Category;
import frege.control.Concurrent;
import frege.control.Semigroupoid;
import frege.control.monad.State;
import frege.control.monad.trans.MonadIO;
import frege.control.monad.trans.MonadTrans;
import frege.data.Bits;
import frege.data.Char;
import frege.data.Foldable;
import frege.data.Graph;
import frege.data.List;
import frege.data.Monoid;
import frege.data.Traversable;
import frege.data.Tree;
import frege.data.TreeMap;
import frege.data.wrapper.Const;
import frege.data.wrapper.Dual;
import frege.data.wrapper.Endo;
import frege.data.wrapper.Identity;
import frege.data.wrapper.Num;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Net;
import frege.java.util.Regex;
import frege.lib.PP;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeDecimal;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;
import frege.system.Random;
import frege.test.QuickCheck;
import frege.test.QuickCheckArbitrary;
import frege.test.QuickCheckException;
import frege.test.QuickCheckGen;
import frege.test.QuickCheckModifiers;
import frege.test.QuickCheckProperty;
import frege.test.QuickCheckState;
import frege.test.QuickCheckTest;
import frege.test.QuickCheckText;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="/Users/tricktron/github/master/frege-lsp-server/src/main/frege/ch/fhnw/thga/fregelanguageserver/compile/CompileExecutorLSP.fr",
  time=1660993309753L, jmajor=11, jminor=-1,
  imps={
    "ch.fhnw.thga.fregelanguageserver.compile.CompileGlobal",
    "ch.fhnw.thga.fregelanguageserver.compile.CompileMakeMode",
    "ch.fhnw.thga.fregelanguageserver.compile.CompileOptions", "ch.fhnw.thga.fregelanguageserver.types.Generics",
    "frege.compiler.types.Global", "frege.Prelude", "frege.prelude.PreludeArrays", "frege.prelude.PreludeBase",
    "frege.prelude.PreludeDecimal", "frege.prelude.PreludeIO", "frege.prelude.PreludeList",
    "frege.prelude.PreludeMonad", "frege.prelude.PreludeText", "frege.java.util.Regex"
  },
  nmss={
    "CompileGlobal", "CompileMakeMode", "CompileOptions", "Generics", "Global", "Prelude",
    "PreludeArrays", "PreludeBase", "PreludeDecimal", "PreludeIO", "PreludeList", "PreludeMonad",
    "PreludeText", "Regexp"
  },
  symas={}, symcs={}, symis={}, symts={},
  symvs={
    @Meta.SymV(
      offset=764,
      name=@Meta.QName(
        pack="ch.fhnw.thga.fregelanguageserver.compile.CompileExecutorLSP", base="standardCompileOptionsLSP"
      ),
      stri="s", sig=0, depth=0, rkind=13
    ),
    @Meta.SymV(
      offset=675,
      name=@Meta.QName(
        pack="ch.fhnw.thga.fregelanguageserver.compile.CompileExecutorLSP", base="standardCompileGlobalLSP"
      ),
      stri="s", sig=1, depth=0, rkind=13
    ),
    @Meta.SymV(
      offset=1184,
      name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.compile.CompileExecutorLSP", base="rootOutputDirLSP"),
      stri="s", sig=2, depth=0, rkind=13
    ),
    @Meta.SymV(
      offset=853,
      name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.compile.CompileExecutorLSP", base="fromOptionsLSP"),
      stri="s(s)", sig=3, depth=1, rkind=13
    ),
    @Meta.SymV(
      offset=922,
      name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.compile.CompileExecutorLSP", base="fromGradle"),
      stri="s(uu)", sig=4, depth=2, rkind=13
    ),
    @Meta.SymV(
      offset=493,
      name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.compile.CompileExecutorLSP", base="compileMakeLSP"),
      stri="s(uu)", sig=6, depth=2, rkind=13
    )
  },
  symls={},
  taus={
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.compiler.types.Global", base="Options")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="ST")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="RealWorld")}),
    @Meta.Tau(kind=0, suba=1, subb=2),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.compiler.types.Global", base="Global")}),
    @Meta.Tau(kind=0, suba=3, subb=4),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}),
    @Meta.Tau(kind=0, suba=6, subb=7),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeIO", base="Mutable")}),
    @Meta.Tau(kind=0, suba=9, subb=2),
    @Meta.Tau(
      kind=2, suba=0,
      tcon={@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.types.Generics", base="ArrayList")}
    ),
    @Meta.Tau(kind=0, suba=11, subb=4), @Meta.Tau(kind=0, suba=10, subb=12), @Meta.Tau(kind=0, suba=3, subb=13)
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=0), @Meta.Rho(rhofun=false, rhotau=5), @Meta.Rho(rhofun=false, rhotau=8),
    @Meta.Rho(sigma=0, rhotau=1), @Meta.Rho(sigma=2, rhotau=0), @Meta.Rho(sigma=2, rhotau=4),
    @Meta.Rho(rhofun=false, rhotau=4), @Meta.Rho(rhofun=false, rhotau=14), @Meta.Rho(sigma=5, rhotau=7),
    @Meta.Rho(sigma=2, rhotau=8)
  },
  sigmas={
    @Meta.Sigma(rho=0), @Meta.Sigma(rho=1), @Meta.Sigma(rho=2), @Meta.Sigma(rho=3), @Meta.Sigma(rho=5),
    @Meta.Sigma(rho=6), @Meta.Sigma(rho=9)
  },
  exprs={@Meta.Expr()}
)
final public class CompileExecutorLSP  {
  




final public static Global.TOptions standardCompileOptionsLSP = CompileOptions.standardCompileOptions
.call();
final public static Func.U<RealWorld, Global.TGlobal> standardCompileGlobalLSP = CompileGlobal.standardCompileGlobal
.call();
final public static String/*<Character>*/ rootOutputDirLSP = CompileOptions.rootOutputDir;
final public static Func.U<RealWorld, Global.TGlobal> fromOptionsLSP(final Global.TOptions arg$1) {
  return CompileGlobal.fromOptions(arg$1);
}
final public static Global.TOptions fromGradle(
  final Lazy<String/*<Character>*/> arg$1, final Lazy<String/*<Character>*/> arg$2
) {
  return Global.TOptions.upd$path(
            Global.TOptions.upd$sourcePath(
                  CompileExecutorLSP.standardCompileOptionsLSP,
                  PreludeBase.TList.DCons.<String/*<Character>*/>mk(
                        Thunk.<String/*<Character>*/>nested(
                              (Lazy<Lazy<String/*<Character>*/>>)(() -> CompileOptions.getEnvDefault(
                                        arg$1, "FREGE_LS_SOURCE_DIR"
                                      ))
                            ),
                        PreludeBase.TList.DList.<String/*<Character>*/>mk()
                      )
                ),
            PreludeBase.TList.DCons.<String/*<Character>*/>mk(
                  Thunk.<String/*<Character>*/>nested(
                        (Lazy<Lazy<String/*<Character>*/>>)(() -> CompileOptions.getEnvDefault(
                                  arg$2, "FREGE_LS_EXTRA_CLASSPATH"
                                ))
                      ),
                  PreludeBase.TList.DList.<String/*<Character>*/>mk()
                )
          );
}
final public static Func.U<RealWorld, java.util.ArrayList<Global.TGlobal>> compileMakeLSP(
  final Lazy<String/*<Character>*/> arg$1, final Lazy<Global.TGlobal> arg$2
) {
  return (Func.U<RealWorld, java.util.ArrayList<Global.TGlobal>>)((final Lazy<RealWorld> arg$17766) -> {
            final PreludeBase.TList<Global.TGlobal> v2056$17752 = CompileMakeMode.compileMake(
                  arg$1, arg$2
                ).apply(arg$17766).call();
            final Func.U<RealWorld, java.util.ArrayList<Global.TGlobal>> v2057$17753 =
            Generics.TArrayList.<Global.TGlobal, RealWorld>fromFregeList(v2056$17752);
            return Thunk.<java.util.ArrayList<Global.TGlobal>>nested(
                      (Lazy<Lazy<java.util.ArrayList<Global.TGlobal>>>)(() -> v2057$17753
                          .apply(arg$17766))
                    );
          });
}

}
