/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.25.84
  from
  /Users/tricktron/github/master/frege-lsp-server/src/main/frege/ch/fhnw/thga/fregelanguageserver/diagnostic/Diagnostic.fr
  Do not edit this file! Instead, edit the source file and recompile.
*/

package ch.fhnw.thga.fregelanguageserver.diagnostic;

import frege.run8.Func;
import frege.run8.Lazy;
import frege.run8.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import ch.fhnw.thga.fregelanguageserver.compiler.CompilerHelper;
import ch.fhnw.thga.fregelanguageserver.types.Position;
import ch.fhnw.thga.fregelanguageserver.types.Range;
import frege.Prelude;
import frege.Version;
import frege.compiler.Classes;
import frege.compiler.Classtools;
import frege.compiler.Javatypes;
import frege.compiler.Kinds;
import frege.compiler.Typecheck;
import frege.compiler.Utilities;
import frege.compiler.classes.Nice;
import frege.compiler.classes.QNameMatcher;
import frege.compiler.common.Annotate;
import frege.compiler.common.AnnotateG;
import frege.compiler.common.Binders;
import frege.compiler.common.CompilerOptions;
import frege.compiler.common.Desugar;
import frege.compiler.common.Errors;
import frege.compiler.common.ImpExp;
import frege.compiler.common.JavaName;
import frege.compiler.common.Mangle;
import frege.compiler.common.PatternCompiler;
import frege.compiler.common.Resolve;
import frege.compiler.common.Roman;
import frege.compiler.common.SymbolTable;
import frege.compiler.common.Trans;
import frege.compiler.common.Tuples;
import frege.compiler.common.Types;
import frege.compiler.common.UnAlias;
import frege.compiler.enums.CaseKind;
import frege.compiler.enums.Flags;
import frege.compiler.enums.Literals;
import frege.compiler.enums.RFlag;
import frege.compiler.enums.SymState;
import frege.compiler.enums.TokenID;
import frege.compiler.enums.Visibility;
import frege.compiler.gen.java.Common;
import frege.compiler.gen.java.PrettyJava;
import frege.compiler.grammar.Frege;
import frege.compiler.grammar.Lexer;
import frege.compiler.instances.NiceExprS;
import frege.compiler.instances.Nicer;
import frege.compiler.instances.PositionedSName;
import frege.compiler.passes.Easy;
import frege.compiler.passes.Enter;
import frege.compiler.passes.Fields;
import frege.compiler.passes.Final;
import frege.compiler.passes.Fix;
import frege.compiler.passes.GlobalLam;
import frege.compiler.passes.Imp;
import frege.compiler.passes.Instances;
import frege.compiler.passes.LetUnroll;
import frege.compiler.passes.Strict;
import frege.compiler.passes.Transdef;
import frege.compiler.passes.TypeAlias;
import frege.compiler.tc.Methods;
import frege.compiler.tc.Patterns;
import frege.compiler.tc.Util;
import frege.compiler.types.AbstractJava;
import frege.compiler.types.ConstructorField;
import frege.compiler.types.Expression;
import frege.compiler.types.External;
import frege.compiler.types.Global;
import frege.compiler.types.ImportDetails;
import frege.compiler.types.JNames;
import frege.compiler.types.NSNames;
import frege.compiler.types.Packs;
import frege.compiler.types.Positions;
import frege.compiler.types.QNames;
import frege.compiler.types.SNames;
import frege.compiler.types.SourceDefinitions;
import frege.compiler.types.Strictness;
import frege.compiler.types.Symbols;
import frege.compiler.types.Targets;
import frege.compiler.types.Tokens;
import frege.control.Category;
import frege.control.Semigroupoid;
import frege.control.monad.State;
import frege.control.monad.trans.MonadIO;
import frege.control.monad.trans.MonadTrans;
import frege.data.Bits;
import frege.data.Char;
import frege.data.Foldable;
import frege.data.Graph;
import frege.data.List;
import frege.data.Monoid;
import frege.data.Traversable;
import frege.data.Tree;
import frege.data.TreeMap;
import frege.data.wrapper.Const;
import frege.data.wrapper.Dual;
import frege.data.wrapper.Endo;
import frege.data.wrapper.Identity;
import frege.data.wrapper.Num;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Net;
import frege.java.util.Regex;
import frege.lib.PP;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeDecimal;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;
import frege.system.Random;
import frege.test.QuickCheck;
import frege.test.QuickCheckArbitrary;
import frege.test.QuickCheckException;
import frege.test.QuickCheckGen;
import frege.test.QuickCheckModifiers;
import frege.test.QuickCheckProperty;
import frege.test.QuickCheckState;
import frege.test.QuickCheckTest;
import frege.test.QuickCheckText;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="/Users/tricktron/github/master/frege-lsp-server/src/main/frege/ch/fhnw/thga/fregelanguageserver/diagnostic/Diagnostic.fr",
  time=1657294192763L, jmajor=11, jminor=-1,
  imps={
    "ch.fhnw.thga.fregelanguageserver.compiler.CompilerHelper", "frege.compiler.types.Global",
    "ch.fhnw.thga.fregelanguageserver.types.Position", "frege.compiler.types.Positions", "frege.Prelude",
    "frege.prelude.PreludeArrays", "frege.prelude.PreludeBase", "frege.prelude.PreludeDecimal",
    "frege.prelude.PreludeIO", "frege.prelude.PreludeList", "frege.prelude.PreludeMonad", "frege.prelude.PreludeText",
    "frege.test.QuickCheck", "ch.fhnw.thga.fregelanguageserver.types.Range", "frege.java.util.Regex",
    "frege.control.monad.State", "frege.compiler.types.Tokens"
  },
  nmss={
    "CompilerHelper", "Global", "Position", "Positions", "Prelude", "PreludeArrays", "PreludeBase",
    "PreludeDecimal", "PreludeIO", "PreludeList", "PreludeMonad", "PreludeText", "QuickCheck",
    "Range", "Regexp", "State", "Tokens"
  },
  symas={}, symcs={},
  symis={
    @Meta.SymI(
      offset=1116,
      name=@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic"),
      clas=@Meta.QName(kind=0, pack="frege.prelude.PreludeText", base="Show"), typ=0, lnks={},
      funs={
        @Meta.SymV(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="showsPrec"
          ),
          stri="s(uss)", sig=3, depth=3, rkind=13, doc="inherited from 'Show.showsPrec'"
        ),
        @Meta.SymV(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="showsub"
          ),
          stri="s(s)", sig=4, depth=1, rkind=13, doc="Function generated for derived instance."
        ),
        @Meta.SymV(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="showChars"
          ),
          stri="s(s)", sig=5, depth=1, rkind=13, doc="inherited from 'Show.showChars'"
        ),
        @Meta.SymV(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="display"
          ),
          stri="s(s)", sig=4, depth=1, rkind=13, doc="inherited from 'Show.display'"
        ),
        @Meta.SymV(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="show"
          ),
          stri="s(s)", sig=4, depth=1, rkind=13, doc="Function generated for derived instance."
        ),
        @Meta.SymV(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="showList"
          ),
          stri="s(ss)", sig=7, depth=2, rkind=13, doc="inherited from 'Show.showList'"
        )
      }
    ),
    @Meta.SymI(
      offset=728,
      name=@Meta.QName(
        kind=0, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity"
      ),
      clas=@Meta.QName(kind=0, pack="frege.prelude.PreludeText", base="Show"), typ=8, lnks={},
      funs={
        @Meta.SymV(
          offset=728,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="showsPrec"
          ),
          stri="s(uss)", sig=9, depth=3, rkind=13, doc="inherited from 'Show.showsPrec'"
        ),
        @Meta.SymV(
          offset=728,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="showsub"
          ),
          stri="s(s)", sig=10, depth=1, rkind=13, doc="Function generated for derived instance."
        ),
        @Meta.SymV(
          offset=728,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="showChars"
          ),
          stri="s(s)", sig=11, depth=1, rkind=13, doc="inherited from 'Show.showChars'"
        ),
        @Meta.SymV(
          offset=728,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="display"
          ),
          stri="s(s)", sig=10, depth=1, rkind=13, doc="inherited from 'Show.display'"
        ),
        @Meta.SymV(
          offset=728,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="show"
          ),
          stri="s(s)", sig=10, depth=1, rkind=13, doc="Function generated for derived instance."
        ),
        @Meta.SymV(
          offset=728,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="showList"
          ),
          stri="s(ss)", sig=13, depth=2, rkind=13, doc="inherited from 'Show.showList'"
        )
      }
    ),
    @Meta.SymI(
      offset=699,
      name=@Meta.QName(
        kind=0, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_DiagnosticSeverity"
      ),
      clas=@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Eq"), typ=8, lnks={},
      funs={
        @Meta.SymV(
          offset=699,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_DiagnosticSeverity",
            member="hashCode"
          ),
          stri="s(s)", sig=14, depth=1, rkind=13, doc="Function generated for derived instance."
        ),
        @Meta.SymV(
          offset=699,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_DiagnosticSeverity",
            member="!="
          ),
          stri="s(ss)", sig=15, depth=2, rkind=13, doc="inherited from 'Eq.!='", op=96
        ),
        @Meta.SymV(
          offset=699,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_DiagnosticSeverity",
            member="=="
          ),
          stri="s(ss)", sig=15, depth=2, rkind=13, doc="Function generated for derived instance.", op=96
        )
      }
    ),
    @Meta.SymI(
      offset=1095,
      name=@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_Diagnostic"),
      clas=@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Eq"), typ=0, lnks={},
      funs={
        @Meta.SymV(
          offset=1095,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_Diagnostic",
            member="hashCode"
          ),
          stri="s(s)", sig=16, depth=1, rkind=13, doc="Function generated for derived instance."
        ),
        @Meta.SymV(
          offset=1095,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_Diagnostic",
            member="!="
          ),
          stri="s(ss)", sig=17, depth=2, rkind=13, doc="inherited from 'Eq.!='", op=96
        ),
        @Meta.SymV(
          offset=1095,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_Diagnostic",
            member="=="
          ),
          stri="s(ss)", sig=17, depth=2, rkind=13, doc="Function generated for derived instance.", op=96
        )
      }
    )
  },
  symts={
    @Meta.SymT(
      offset=960,
      name=@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic"), typ=0,
      kind=12,
      cons={
        @Meta.SymD(
          offset=973,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="Diagnostic"
          ),
          cid=0, typ=19,
          fields={
            @Meta.Field(name="range", offset=990, sigma=18, strict=false),
            @Meta.Field(name="severity", offset=1013, sigma=8, strict=false),
            @Meta.Field(name="source", offset=1049, sigma=2, strict=false),
            @Meta.Field(name="message", offset=1073, sigma=2, strict=false)
          }
        )
      },
      lnks={
        @Meta.SymL(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="showsPrec"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="showsPrec"
          )
        ),
        @Meta.SymL(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="showChars"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="showChars"
          )
        ),
        @Meta.SymL(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="showList"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="showList"
          )
        ),
        @Meta.SymL(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="show"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="show"
          )
        ),
        @Meta.SymL(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="showsub"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="showsub"
          )
        ),
        @Meta.SymL(
          offset=1095,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="hashCode"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_Diagnostic",
            member="hashCode"
          )
        ),
        @Meta.SymL(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="display"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="display"
          )
        ),
        @Meta.SymL(
          offset=1095,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="!="
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_Diagnostic",
            member="!="
          )
        ),
        @Meta.SymL(
          offset=1095,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="=="
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_Diagnostic",
            member="=="
          )
        )
      },
      funs={
        @Meta.SymV(
          offset=1050,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="upd$source"
          ),
          stri="s(su)", sig=20, depth=2, rkind=13, doc="update field @source@"
        ),
        @Meta.SymV(
          offset=991,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="upd$range"
          ),
          stri="s(su)", sig=21, depth=2, rkind=13, doc="update field @range@"
        ),
        @Meta.SymV(
          offset=1014,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="upd$severity"
          ),
          stri="s(su)", sig=22, depth=2, rkind=13, doc="update field @severity@"
        ),
        @Meta.SymV(
          offset=1050,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="source"
          ),
          stri="s(s)", sig=4, depth=1, rkind=13, doc="access field @source@"
        ),
        @Meta.SymV(
          offset=1074,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="upd$message"
          ),
          stri="s(su)", sig=20, depth=2, rkind=13, doc="update field @message@"
        ),
        @Meta.SymV(
          offset=991,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="range"
          ),
          stri="s(s)", sig=23, depth=1, rkind=13, doc="access field @range@"
        ),
        @Meta.SymV(
          offset=1014,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="severity"
          ),
          stri="s(s)", sig=24, depth=1, rkind=13, doc="access field @severity@"
        ),
        @Meta.SymV(
          offset=1050,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="has$source"
          ),
          stri="s(u)", sig=26, depth=1, rkind=13, doc="check if constructor has field @source@"
        ),
        @Meta.SymV(
          offset=991,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="has$range"
          ),
          stri="s(u)", sig=26, depth=1, rkind=13, doc="check if constructor has field @range@"
        ),
        @Meta.SymV(
          offset=1014,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="has$severity"
          ),
          stri="s(u)", sig=26, depth=1, rkind=13, doc="check if constructor has field @severity@"
        ),
        @Meta.SymV(
          offset=1014,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="chg$severity"
          ),
          stri="s(su)", sig=28, depth=2, rkind=13, doc="change field @severity@"
        ),
        @Meta.SymV(
          offset=1050,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="chg$source"
          ),
          stri="s(su)", sig=30, depth=2, rkind=13, doc="change field @source@"
        ),
        @Meta.SymV(
          offset=1074,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="chg$message"
          ),
          stri="s(su)", sig=30, depth=2, rkind=13, doc="change field @message@"
        ),
        @Meta.SymV(
          offset=991,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="chg$range"
          ),
          stri="s(su)", sig=32, depth=2, rkind=13, doc="change field @range@"
        ),
        @Meta.SymV(
          offset=1074,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="has$message"
          ),
          stri="s(u)", sig=26, depth=1, rkind=13, doc="check if constructor has field @message@"
        ),
        @Meta.SymV(
          offset=1074,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="message"
          ),
          stri="s(s)", sig=4, depth=1, rkind=13, doc="access field @message@"
        )
      },
      prod=true
    ),
    @Meta.SymT(
      offset=640,
      name=@Meta.QName(
        kind=0, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity"
      ),
      typ=8, kind=12,
      cons={
        @Meta.SymD(
          offset=669,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="WARNING"
          ),
          cid=1, typ=8, fields={}
        ),
        @Meta.SymD(
          offset=693,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="HINT"
          ),
          cid=3, typ=8, fields={}
        ),
        @Meta.SymD(
          offset=661,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="ERROR"
          ),
          cid=0, typ=8, fields={}
        ),
        @Meta.SymD(
          offset=679,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="INFORMATION"
          ),
          cid=2, typ=8, fields={}
        )
      },
      lnks={
        @Meta.SymL(
          offset=728,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="showsPrec"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="showsPrec"
          )
        ),
        @Meta.SymL(
          offset=728,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="showsub"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="showsub"
          )
        ),
        @Meta.SymL(
          offset=728,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="showChars"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="showChars"
          )
        ),
        @Meta.SymL(
          offset=728,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="show"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="show"
          )
        ),
        @Meta.SymL(
          offset=728,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="showList"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="showList"
          )
        ),
        @Meta.SymL(
          offset=728,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="display"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="display"
          )
        ),
        @Meta.SymL(
          offset=699,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="!="
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_DiagnosticSeverity",
            member="!="
          )
        ),
        @Meta.SymL(
          offset=699,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="=="
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_DiagnosticSeverity",
            member="=="
          )
        ),
        @Meta.SymL(
          offset=699,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="hashCode"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_DiagnosticSeverity",
            member="hashCode"
          )
        )
      },
      funs={}, isEnum=true
    )
  },
  symvs={
    @Meta.SymV(
      offset=1140,
      name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="tokensToRange"),
      stri="s(s)", sig=34, depth=1, rkind=13
    ),
    @Meta.SymV(
      offset=5024, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="posToTokens"),
      stri="s(su)", sig=37, depth=2, rkind=45
    ),
    @Meta.SymV(
      offset=5165, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="main"),
      stri="u", sig=38, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=760,
      name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="fromCompilerSeverity"),
      stri="s(s)", sig=40, depth=1, rkind=13
    ),
    @Meta.SymV(
      offset=2877,
      name=@Meta.QName(
        pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic",
        base="fregeLSPServerShouldMapSingleCompilerMessageToDiagnostics"
      ),
      stri="u", sig=41, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=3648,
      name=@Meta.QName(
        pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic",
        base="fregeLSPServerShouldMapMultipleCompilerMessageToDiagnostics"
      ),
      stri="u", sig=41, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=2484,
      name=@Meta.QName(
        pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic",
        base="fregeLSPServerShouldMapNoCompilerMessagesToEmptyArray"
      ),
      stri="u", sig=41, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=2052,
      name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="extractDiagnostics"),
      stri="s", sig=42, depth=0, rkind=13
    ),
    @Meta.SymV(
      offset=1702,
      name=@Meta.QName(
        pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="createDiagnosticFromMessage"
      ),
      stri="s(s)", sig=44, depth=1, rkind=13
    ),
    @Meta.SymV(
      offset=1552,
      name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="createRangeFromPos"),
      stri="s(s)", sig=46, depth=1, rkind=13
    ),
    @Meta.SymV(
      offset=2234,
      name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="compileAndGetDiagnostics"),
      stri="s(u)", sig=47, depth=1, rkind=13
    )
  },
  symls={
    @Meta.SymL(
      offset=669, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="WARNING"),
      alias=@Meta.QName(
        kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
        member="WARNING"
      )
    ),
    @Meta.SymL(
      offset=693, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="HINT"),
      alias=@Meta.QName(
        kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity", member="HINT"
      )
    ),
    @Meta.SymL(
      offset=679, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="INFORMATION"),
      alias=@Meta.QName(
        kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
        member="INFORMATION"
      )
    ),
    @Meta.SymL(
      offset=661, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="ERROR"),
      alias=@Meta.QName(
        kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity", member="ERROR"
      )
    ),
    @Meta.SymL(
      offset=973, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic"),
      alias=@Meta.QName(
        kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic", member="Diagnostic"
      )
    )
  },
  taus={
    @Meta.Tau(
      kind=2, suba=0,
      tcon={@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic")}
    ),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Int")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}),
    @Meta.Tau(kind=0, suba=2, subb=3),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}),
    @Meta.Tau(kind=0, suba=5, subb=3), @Meta.Tau(kind=0, suba=5, subb=0),
    @Meta.Tau(
      kind=2, suba=0,
      tcon={
        @Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity")
      }
    ),
    @Meta.Tau(kind=0, suba=5, subb=8),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Bool")}),
    @Meta.Tau(
      kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.types.Range", base="Range")}
    ),
    @Meta.Tau(kind=9), @Meta.Tau(suba=12, tvar="α"),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="->")}),
    @Meta.Tau(kind=0, suba=14, subb=8), @Meta.Tau(kind=0, suba=15, subb=8), @Meta.Tau(kind=0, suba=14, subb=4),
    @Meta.Tau(kind=0, suba=17, subb=4), @Meta.Tau(kind=0, suba=14, subb=11), @Meta.Tau(kind=0, suba=19, subb=11),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.compiler.types.Tokens", base="Token")}),
    @Meta.Tau(kind=0, suba=5, subb=21),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.compiler.types.Positions", base="Position")}),
    @Meta.Tau(kind=0, suba=5, subb=23),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.compiler.types.Global", base="Global")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="ST")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="RealWorld")}),
    @Meta.Tau(kind=0, suba=26, subb=27),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="()")}),
    @Meta.Tau(kind=0, suba=28, subb=29),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.compiler.types.Global", base="Severity")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.test.QuickCheckGen", base="Gen")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.test.QuickCheckProperty", base="Prop")}),
    @Meta.Tau(kind=0, suba=32, subb=33),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.control.monad.State", base="State")}),
    @Meta.Tau(kind=0, suba=35, subb=25), @Meta.Tau(kind=0, suba=36, subb=7),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.compiler.types.Global", base="Message")}),
    @Meta.Tau(kind=0, suba=36, subb=0), @Meta.Tau(kind=0, suba=36, subb=11), @Meta.Tau(kind=0, suba=28, subb=7)
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=0), @Meta.Rho(rhofun=false, rhotau=1), @Meta.Rho(rhofun=false, rhotau=4),
    @Meta.Rho(sigma=2, rhotau=2), @Meta.Rho(sigma=0, rhotau=3), @Meta.Rho(sigma=1, rhotau=4),
    @Meta.Rho(sigma=0, rhotau=2), @Meta.Rho(rhofun=false, rhotau=6), @Meta.Rho(sigma=0, rhotau=7),
    @Meta.Rho(rhofun=false, rhotau=7), @Meta.Rho(sigma=6, rhotau=3), @Meta.Rho(rhofun=false, rhotau=8),
    @Meta.Rho(sigma=8, rhotau=3), @Meta.Rho(sigma=1, rhotau=12), @Meta.Rho(sigma=8, rhotau=2),
    @Meta.Rho(sigma=8, rhotau=7), @Meta.Rho(rhofun=false, rhotau=9), @Meta.Rho(sigma=12, rhotau=3),
    @Meta.Rho(sigma=8, rhotau=1), @Meta.Rho(rhofun=false, rhotau=10), @Meta.Rho(sigma=8, rhotau=19),
    @Meta.Rho(sigma=8, rhotau=20), @Meta.Rho(sigma=0, rhotau=1), @Meta.Rho(sigma=0, rhotau=19),
    @Meta.Rho(sigma=0, rhotau=23), @Meta.Rho(rhofun=false, rhotau=11), @Meta.Rho(sigma=2, rhotau=0),
    @Meta.Rho(sigma=2, rhotau=26), @Meta.Rho(sigma=8, rhotau=27), @Meta.Rho(sigma=18, rhotau=28),
    @Meta.Rho(sigma=0, rhotau=26), @Meta.Rho(sigma=18, rhotau=0), @Meta.Rho(sigma=0, rhotau=31),
    @Meta.Rho(sigma=8, rhotau=0), @Meta.Rho(sigma=0, rhotau=33), @Meta.Rho(sigma=0, rhotau=25),
    @Meta.Rho(sigma=0, rhotau=11), @Meta.Rho(rhofun=false, rhotau=13), @Meta.Rho(sigma=25, rhotau=19),
    @Meta.Rho(rhofun=false, rhotau=16), @Meta.Rho(sigma=27, rhotau=0), @Meta.Rho(sigma=0, rhotau=40),
    @Meta.Rho(rhofun=false, rhotau=18), @Meta.Rho(sigma=29, rhotau=0), @Meta.Rho(sigma=0, rhotau=43),
    @Meta.Rho(rhofun=false, rhotau=20), @Meta.Rho(sigma=31, rhotau=0), @Meta.Rho(sigma=0, rhotau=46),
    @Meta.Rho(rhofun=false, rhotau=22), @Meta.Rho(sigma=33, rhotau=25), @Meta.Rho(rhofun=false, rhotau=24),
    @Meta.Rho(rhofun=false, rhotau=25), @Meta.Rho(sigma=36, rhotau=48), @Meta.Rho(sigma=35, rhotau=52),
    @Meta.Rho(rhofun=false, rhotau=30), @Meta.Rho(rhofun=false, rhotau=31), @Meta.Rho(sigma=39, rhotau=11),
    @Meta.Rho(rhofun=false, rhotau=34), @Meta.Rho(rhofun=false, rhotau=37), @Meta.Rho(rhofun=false, rhotau=38),
    @Meta.Rho(rhofun=false, rhotau=39), @Meta.Rho(sigma=43, rhotau=60), @Meta.Rho(rhofun=false, rhotau=23),
    @Meta.Rho(rhofun=false, rhotau=40), @Meta.Rho(sigma=45, rhotau=63), @Meta.Rho(rhofun=false, rhotau=41),
    @Meta.Rho(sigma=2, rhotau=65)
  },
  sigmas={
    @Meta.Sigma(rho=0), @Meta.Sigma(rho=1), @Meta.Sigma(rho=2), @Meta.Sigma(rho=5), @Meta.Sigma(rho=6),
    @Meta.Sigma(rho=8), @Meta.Sigma(rho=9), @Meta.Sigma(rho=10), @Meta.Sigma(rho=11), @Meta.Sigma(rho=13),
    @Meta.Sigma(rho=14), @Meta.Sigma(rho=15), @Meta.Sigma(rho=16), @Meta.Sigma(rho=17), @Meta.Sigma(rho=18),
    @Meta.Sigma(rho=21), @Meta.Sigma(rho=22), @Meta.Sigma(rho=24), @Meta.Sigma(rho=25), @Meta.Sigma(rho=29),
    @Meta.Sigma(rho=30), @Meta.Sigma(rho=32), @Meta.Sigma(rho=34), @Meta.Sigma(rho=35), @Meta.Sigma(rho=36),
    @Meta.Sigma(rho=37), @Meta.Sigma(bound={"α"}, kinds={12}, rho=38), @Meta.Sigma(rho=39), @Meta.Sigma(rho=41),
    @Meta.Sigma(rho=42), @Meta.Sigma(rho=44), @Meta.Sigma(rho=45), @Meta.Sigma(rho=47), @Meta.Sigma(rho=48),
    @Meta.Sigma(rho=49), @Meta.Sigma(rho=50), @Meta.Sigma(rho=51), @Meta.Sigma(rho=53), @Meta.Sigma(rho=54),
    @Meta.Sigma(rho=55), @Meta.Sigma(rho=56), @Meta.Sigma(rho=57), @Meta.Sigma(rho=58), @Meta.Sigma(rho=59),
    @Meta.Sigma(rho=61), @Meta.Sigma(rho=62), @Meta.Sigma(rho=64), @Meta.Sigma(rho=66)
  },
  exprs={@Meta.Expr()}
)
final public class Diagnostic  {
  


final public static class IShow_Diagnostic implements PreludeText.CShow<TDiagnostic> {
  public IShow_Diagnostic() {}
  final public static IShow_Diagnostic it = new IShow_Diagnostic();
  @Override final public String/*<Character>*/ ƒshowsPrec(
    final Lazy<Integer> arg$1, final Lazy<TDiagnostic> arg$2, final Lazy<String/*<Character>*/> arg$3
  ) {
    return IShow_Diagnostic.showsPrec(arg$1, arg$2.call(), arg$3.call());
  }
  @Override final public String/*<Character>*/ ƒshowsub(final Lazy<TDiagnostic> arg$1) {
    return IShow_Diagnostic.showsub(arg$1.call());
  }
  @Override final public PreludeBase.TList<Character> ƒshowChars(final Lazy<TDiagnostic> arg$1) {
    return IShow_Diagnostic.showChars(arg$1.call());
  }
  @Override final public String/*<Character>*/ ƒdisplay(final Lazy<TDiagnostic> arg$1) {
    return IShow_Diagnostic.display(arg$1.call());
  }
  @Override final public String/*<Character>*/ ƒshow(final Lazy<TDiagnostic> arg$1) {
    return IShow_Diagnostic.show(arg$1.call());
  }
  @Override final public String/*<Character>*/ ƒshowList(
    final Lazy<PreludeBase.TList<TDiagnostic>> arg$1, final Lazy<String/*<Character>*/> arg$2
  ) {
    return IShow_Diagnostic.showList(arg$1.call(), arg$2.call());
  }
  final public static String/*<Character>*/ showsPrec(
    final Lazy<Integer> arg$1, final TDiagnostic arg$2, final String/*<Character>*/ arg$3
  ) {
    return IShow_Diagnostic.show(arg$2) + arg$3;
  }
  final public static String/*<Character>*/ showsub(final TDiagnostic arg$1) {
    final String/*<Character>*/ a4$17473 = arg$1.mem$message.call();
    final String/*<Character>*/ a3$17472 = arg$1.mem$source.call();
    final short a2$17471 = (short)arg$1.mem$severity.call();
    final Range.TRange a1$17470 = arg$1.mem$range.call();
    return ("(" + (((((((("Diagnostic" + " ") + Range.IShow_Range.showsub(a1$17470)) + " ") + IShow_DiagnosticSeverity.showsub(
              a2$17471
            )) + " ") + PreludeText.IShow_String.showsub(a3$17472)) + " ") + PreludeText.IShow_String.showsub(
              a4$17473
            ))) + ")";
  }
  final public static PreludeBase.TList<Character> showChars(final TDiagnostic arg$1) {
    return PreludeList.IListView_StringJ.<Character>toList(IShow_Diagnostic.show(arg$1));
  }
  final public static String/*<Character>*/ display(final TDiagnostic arg$1) {
    return IShow_Diagnostic.show(arg$1);
  }
  final public static String/*<Character>*/ show(final TDiagnostic arg$1) {
    final String/*<Character>*/ a4$17468 = arg$1.mem$message.call();
    final String/*<Character>*/ a3$17467 = arg$1.mem$source.call();
    final short a2$17466 = (short)arg$1.mem$severity.call();
    final Range.TRange a1$17465 = arg$1.mem$range.call();
    return ((((((("Diagnostic" + " ") + Range.IShow_Range.showsub(a1$17465)) + " ") + IShow_DiagnosticSeverity.showsub(
              a2$17466
            )) + " ") + PreludeText.IShow_String.showsub(a3$17467)) + " ") + PreludeText.IShow_String.showsub(
              a4$17468
            );
  }
  final public static String/*<Character>*/ showList(
    final PreludeBase.TList<TDiagnostic> arg$1, final String/*<Character>*/ arg$2
  ) {
    return "[" + (PreludeText.joined(
              Thunk.<String/*<Character>*/>lazy(", "),
              PreludeList.<String/*<Character>*/, TDiagnostic>map(
                    (Func.U<TDiagnostic, String/*<Character>*/>)((final Lazy<TDiagnostic> η$18742) -> Thunk.<
                          String/*<Character>*/
                        >shared((Lazy<String/*<Character>*/>)(() -> IShow_Diagnostic.show(η$18742.call())))),
                    arg$1
                  )
            ).call() + ("]" + arg$2));
  }
}
final public static class IShow_DiagnosticSeverity implements PreludeText.CShow<Short> {
  public IShow_DiagnosticSeverity() {}
  final public static IShow_DiagnosticSeverity it = new IShow_DiagnosticSeverity();
  @Override final public String/*<Character>*/ ƒshowsPrec(
    final Lazy<Integer> arg$1, final Lazy<Short> arg$2, final Lazy<String/*<Character>*/> arg$3
  ) {
    return IShow_DiagnosticSeverity.showsPrec(arg$1, (short)arg$2.call(), arg$3.call());
  }
  @Override final public String/*<Character>*/ ƒshowsub(final Lazy<Short> arg$1) {
    return IShow_DiagnosticSeverity.showsub((short)arg$1.call());
  }
  @Override final public PreludeBase.TList<Character> ƒshowChars(final Lazy<Short> arg$1) {
    return IShow_DiagnosticSeverity.showChars((short)arg$1.call());
  }
  @Override final public String/*<Character>*/ ƒdisplay(final Lazy<Short> arg$1) {
    return IShow_DiagnosticSeverity.display((short)arg$1.call());
  }
  @Override final public String/*<Character>*/ ƒshow(final Lazy<Short> arg$1) {
    return IShow_DiagnosticSeverity.show((short)arg$1.call());
  }
  @Override final public String/*<Character>*/ ƒshowList(
    final Lazy<PreludeBase.TList<Short>> arg$1, final Lazy<String/*<Character>*/> arg$2
  ) {
    return IShow_DiagnosticSeverity.showList(arg$1.call(), arg$2.call());
  }
  final public static String/*<Character>*/ showsPrec(
    final Lazy<Integer> arg$1, final short arg$2, final String/*<Character>*/ arg$3
  ) {
    return IShow_DiagnosticSeverity.show(arg$2) + arg$3;
  }
  final public static String/*<Character>*/ showsub(final short arg$1) {
    if (arg$1 == TDiagnosticSeverity.ERROR) {
      return "ERROR";
    }
    if (arg$1 == TDiagnosticSeverity.WARNING) {
      return "WARNING";
    }
    if (arg$1 == TDiagnosticSeverity.INFORMATION) {
      return "INFORMATION";
    }
    assert arg$1 == TDiagnosticSeverity.HINT;
    return "HINT";
  }
  final public static PreludeBase.TList<Character> showChars(final short arg$1) {
    return PreludeList.IListView_StringJ.<Character>toList(IShow_DiagnosticSeverity.show(arg$1));
  }
  final public static String/*<Character>*/ display(final short arg$1) {
    return IShow_DiagnosticSeverity.show(arg$1);
  }
  final public static String/*<Character>*/ show(final short arg$1) {
    if (arg$1 == TDiagnosticSeverity.ERROR) {
      return "ERROR";
    }
    if (arg$1 == TDiagnosticSeverity.WARNING) {
      return "WARNING";
    }
    if (arg$1 == TDiagnosticSeverity.INFORMATION) {
      return "INFORMATION";
    }
    assert arg$1 == TDiagnosticSeverity.HINT;
    return "HINT";
  }
  final public static String/*<Character>*/ showList(final PreludeBase.TList<Short> arg$1, final String/*<Character>*/ arg$2) {
    return "[" + (PreludeText.joined(
              Thunk.<String/*<Character>*/>lazy(", "),
              PreludeList.<String/*<Character>*/, Short>map(
                    (Func.U<Short, String/*<Character>*/>)((final Lazy<Short> η$18752) -> Thunk.<
                          String/*<Character>*/
                        >shared((Lazy<String/*<Character>*/>)(() -> IShow_DiagnosticSeverity.show((short)η$18752.call())))),
                    arg$1
                  )
            ).call() + ("]" + arg$2));
  }
}
final public static class IEq_DiagnosticSeverity implements PreludeBase.CEq<Short> {
  public IEq_DiagnosticSeverity() {}
  final public static IEq_DiagnosticSeverity it = new IEq_DiagnosticSeverity();
  @Override final public int ƒhashCode(final Lazy<Short> arg$1) {
    return IEq_DiagnosticSeverity.hashCode((short)arg$1.call());
  }
  @Override final public boolean ƒ$excl$eq(final Lazy<Short> arg$1, final Lazy<Short> arg$2) {
    return IEq_DiagnosticSeverity.$excl$eq((short)arg$1.call(), (short)arg$2.call());
  }
  @Override final public boolean ƒ$eq$eq(final Lazy<Short> arg$1, final Lazy<Short> arg$2) {
    return IEq_DiagnosticSeverity.$eq$eq((short)arg$1.call(), (short)arg$2.call());
  }
  final public static int hashCode(final short arg$1) {
    if (arg$1 == TDiagnosticSeverity.ERROR) {
      return (31 * 1) + RunTM.constructor(arg$1);
    }
    if (arg$1 == TDiagnosticSeverity.WARNING) {
      return (31 * 1) + RunTM.constructor(arg$1);
    }
    if (arg$1 == TDiagnosticSeverity.INFORMATION) {
      return (31 * 1) + RunTM.constructor(arg$1);
    }
    assert arg$1 == TDiagnosticSeverity.HINT;
    return (31 * 1) + RunTM.constructor(arg$1);
  }
  final public static boolean $excl$eq(final short arg$1, final short arg$2) {
    if (IEq_DiagnosticSeverity.$eq$eq(arg$1, arg$2)) {
      return false;
    }
    else {
      return true;
    }
  }
  final public static boolean $eq$eq(final short arg$1, final short arg$2) {
    if (RunTM.constructor(arg$1) == RunTM.constructor(arg$2)) {
      return true;
    }
    else {
      return false;
    }
  }
}
final public static class IEq_Diagnostic implements PreludeBase.CEq<TDiagnostic> {
  public IEq_Diagnostic() {}
  final public static IEq_Diagnostic it = new IEq_Diagnostic();
  @Override final public int ƒhashCode(final Lazy<TDiagnostic> arg$1) {
    return IEq_Diagnostic.hashCode(arg$1.call());
  }
  @Override final public boolean ƒ$excl$eq(final Lazy<TDiagnostic> arg$1, final Lazy<TDiagnostic> arg$2) {
    return IEq_Diagnostic.$excl$eq(arg$1.call(), arg$2.call());
  }
  @Override final public boolean ƒ$eq$eq(final Lazy<TDiagnostic> arg$1, final Lazy<TDiagnostic> arg$2) {
    return IEq_Diagnostic.$eq$eq(arg$1.call(), arg$2.call());
  }
  final public static int hashCode(final TDiagnostic arg$1) {
    final String/*<Character>*/ a4$17463 = arg$1.mem$message.call();
    final String/*<Character>*/ a3$17462 = arg$1.mem$source.call();
    final short a2$17461 = (short)arg$1.mem$severity.call();
    final Range.TRange a1$17460 = arg$1.mem$range.call();
    return (31 * ((31 * ((31 * ((31 * ((31 * 1) + RunTM.constructor(arg$1))) + Range.IEq_Range.hashCode(
              a1$17460
            ))) + IEq_DiagnosticSeverity.hashCode(a2$17461))) + a3$17462.hashCode())) + a4$17463
        .hashCode();
  }
  final public static boolean $excl$eq(final TDiagnostic arg$1, final TDiagnostic arg$2) {
    if (IEq_Diagnostic.$eq$eq(arg$1, arg$2)) {
      return false;
    }
    else {
      return true;
    }
  }
  final public static boolean $eq$eq(final TDiagnostic arg$1, final TDiagnostic arg$2) {
    final String/*<Character>*/ µ$$17535 = arg$1.mem$message.call();
    final String/*<Character>*/ µ$$17534 = arg$1.mem$source.call();
    final short µ$$17533 = (short)arg$1.mem$severity.call();
    final Range.TRange µ$$17532 = arg$1.mem$range.call();
    final String/*<Character>*/ µ$$17539 = arg$2.mem$message.call();
    final String/*<Character>*/ µ$$17538 = arg$2.mem$source.call();
    final short µ$$17537 = (short)arg$2.mem$severity.call();
    final Range.TRange µ$$17536 = arg$2.mem$range.call();
    return Range.IEq_Range.$eq$eq(µ$$17532, µ$$17536) && (IEq_DiagnosticSeverity.$eq$eq(
              µ$$17533, µ$$17537
            ) && (µ$$17534.equals(µ$$17538) && µ$$17535.equals(µ$$17539)));
  }
}
final public static class TDiagnostic implements frege.runtime.Value, Lazy<TDiagnostic> {
  private TDiagnostic(
    final Lazy<Range.TRange> arg$1, final Lazy<Short> arg$2, final Lazy<String/*<Character>*/> arg$3,
    final Lazy<String/*<Character>*/> arg$4
  ) {
    mem$range = Thunk.<Range.TRange>shared(arg$1);
    mem$severity = Thunk.<Short>shared(arg$2);
    mem$source = Thunk.<String/*<Character>*/>shared(arg$3);
    mem$message = Thunk.<String/*<Character>*/>shared(arg$4);
  }
  final public int constructor() {
    return 0;
  }
  final public static TDiagnostic mk(
    final Lazy<Range.TRange> arg$1, final Lazy<Short> arg$2, final Lazy<String/*<Character>*/> arg$3,
    final Lazy<String/*<Character>*/> arg$4
  ) {
    return new TDiagnostic(arg$1, arg$2, arg$3, arg$4);
  }
  final public Lazy<Range.TRange> mem$range  ;
  final public Lazy<Short> mem$severity  ;
  final public Lazy<String/*<Character>*/> mem$source  ;
  final public Lazy<String/*<Character>*/> mem$message  ;
  final public TDiagnostic call() {
    return this;
  }
  final public boolean isShared() {
    return true;
  }
  final public Thunk<TDiagnostic> asThunk() {
    return null;
  }
  @SuppressWarnings("unchecked") final public TDiagnostic simsalabim() {
    return (TDiagnostic)this;
  }
  final public static TDiagnostic upd$source(final TDiagnostic arg$1, final Lazy<String/*<Character>*/> arg$2) {
    return TDiagnostic.mk(arg$1.mem$range, arg$1.mem$severity, arg$2, arg$1.mem$message);
  }
  final public static TDiagnostic upd$range(final TDiagnostic arg$1, final Lazy<Range.TRange> arg$2) {
    return TDiagnostic.mk(arg$2, arg$1.mem$severity, arg$1.mem$source, arg$1.mem$message);
  }
  final public static TDiagnostic upd$severity(final TDiagnostic arg$1, final Lazy<Short> arg$2) {
    return TDiagnostic.mk(arg$1.mem$range, arg$2, arg$1.mem$source, arg$1.mem$message);
  }
  final public static String/*<Character>*/ source(final TDiagnostic arg$1) {
    final String/*<Character>*/ a3$17391 = arg$1.mem$source.call();
    return a3$17391;
  }
  final public static TDiagnostic upd$message(final TDiagnostic arg$1, final Lazy<String/*<Character>*/> arg$2) {
    return TDiagnostic.mk(arg$1.mem$range, arg$1.mem$severity, arg$1.mem$source, arg$2);
  }
  final public static Range.TRange range(final TDiagnostic arg$1) {
    final Range.TRange a1$17353 = arg$1.mem$range.call();
    return a1$17353;
  }
  final public static short severity(final TDiagnostic arg$1) {
    final short a2$17372 = (short)arg$1.mem$severity.call();
    return a2$17372;
  }
  final public static <α> boolean has$source(final Lazy<α> arg$1) {
    return true;
  }
  final public static <α> boolean has$range(final Lazy<α> arg$1) {
    return true;
  }
  final public static <α> boolean has$severity(final Lazy<α> arg$1) {
    return true;
  }
  final public static TDiagnostic chg$severity(final TDiagnostic arg$1, final Lazy<Func.U<Short, Short>> arg$2) {
    return TDiagnostic.mk(
              arg$1.mem$range, Thunk.<Short>nested((Lazy<Lazy<Short>>)(() -> arg$2.call().apply(arg$1.mem$severity))),
              arg$1.mem$source, arg$1.mem$message
            );
  }
  final public static TDiagnostic chg$source(
    final TDiagnostic arg$1, final Lazy<Func.U<String/*<Character>*/, String/*<Character>*/>> arg$2
  ) {
    return TDiagnostic.mk(
              arg$1.mem$range, arg$1.mem$severity,
              Thunk.<String/*<Character>*/>nested(
                    (Lazy<Lazy<String/*<Character>*/>>)(() -> arg$2.call().apply(arg$1.mem$source))
                  ),
              arg$1.mem$message
            );
  }
  final public static TDiagnostic chg$message(
    final TDiagnostic arg$1, final Lazy<Func.U<String/*<Character>*/, String/*<Character>*/>> arg$2
  ) {
    return TDiagnostic.mk(
              arg$1.mem$range, arg$1.mem$severity, arg$1.mem$source,
              Thunk.<String/*<Character>*/>nested(
                    (Lazy<Lazy<String/*<Character>*/>>)(() -> arg$2.call().apply(arg$1.mem$message))
                  )
            );
  }
  final public static TDiagnostic chg$range(final TDiagnostic arg$1, final Lazy<Func.U<Range.TRange, Range.TRange>> arg$2) {
    return TDiagnostic.mk(
              Thunk.<Range.TRange>nested((Lazy<Lazy<Range.TRange>>)(() -> arg$2.call().apply(arg$1.mem$range))),
              arg$1.mem$severity, arg$1.mem$source, arg$1.mem$message
            );
  }
  final public static <α> boolean has$message(final Lazy<α> arg$1) {
    return true;
  }
  final public static String/*<Character>*/ message(final TDiagnostic arg$1) {
    final String/*<Character>*/ a4$17338 = arg$1.mem$message.call();
    return a4$17338;
  }
}
final public static class TDiagnosticSeverity  {
  final public static short WARNING = 1;
  final public static short HINT = 3;
  final public static short ERROR = 0;
  final public static short INFORMATION = 2;
}
final public static Range.TRange tokensToRange(final PreludeBase.TList<Tokens.TToken> arg$1) {
  final PreludeBase.TList.DList<Tokens.TToken> $18779 = arg$1.asList();
  if ($18779 != null) {
    return Range.TRange.mk(
              Position.TPosition.mk(Thunk.<Integer>lazy(1), Thunk.<Integer>lazy(0)),
              Position.TPosition.mk(Thunk.<Integer>lazy(2), Thunk.<Integer>lazy(0))
            );
  }
  final PreludeBase.TList.DCons<Tokens.TToken> $18780 = arg$1.asCons();
  if ($18780 != null) {
    final PreludeBase.TList<Tokens.TToken> $18781 = $18780.mem2.call();
    final PreludeBase.TList.DList<Tokens.TToken> $18782 = $18781.asList();
    if ($18782 != null) {
      final Tokens.TToken tk$17407 = $18780.mem1.call();
      return Range.tokenToRange(tk$17407);
    }
  }
  final Lazy<Tokens.TToken> endToken$17410 = Thunk.<Tokens.TToken>shared(
        (Lazy<Tokens.TToken>)(() -> PreludeList.<Tokens.TToken>last(arg$1))
      );
  final Lazy<Tokens.TToken> startToken$17409 = Thunk.<Tokens.TToken>shared(
        (Lazy<Tokens.TToken>)(() -> PreludeList.IListView_$lbrack$rbrack.<Tokens.TToken>head(
                  arg$1
                ))
      );
  return Range.TRange.mk(
            Position.TPosition.mk(
                  Thunk.<Integer>lazy(Tokens.TToken.line(startToken$17409.call())),
                  Thunk.<Integer>lazy(Tokens.TToken.col(startToken$17409.call()))
                ),
            Position.TPosition.mk(
                  Thunk.<Integer>lazy(Tokens.TToken.line(endToken$17410.call())),
                  Thunk.<Integer>shared(
                        (Lazy<Integer>)(() -> Tokens.TToken.col(endToken$17410.call()) + Tokens.TToken.value(
                                  endToken$17410.call()
                                ).length())
                      )
                )
          );
}
final public static PreludeBase.TList<Tokens.TToken> posToTokens(
  final PreludeBase.TList<Positions.TPosition> arg$1, final Lazy<Global.TGlobal> arg$2
) {
  final PreludeBase.TList.DCons<Positions.TPosition> $18784 = arg$1.asCons();
  if ($18784 != null) {
    final Positions.TPosition µ$$17530 = $18784.mem1.call();
    return PreludeList.IListMonoid_$lbrack$rbrack.<Tokens.TToken>$plus$plus(
              Global.tokens(µ$$17530, arg$2),
              Thunk.<PreludeBase.TList<Tokens.TToken>>shared(
                    (Lazy<PreludeBase.TList<Tokens.TToken>>)(() -> Diagnostic.posToTokens(
                              $18784.mem2.call(), arg$2
                            ))
                  )
            );
  }
  final PreludeBase.TList.DList<Positions.TPosition> $18786 = arg$1.asList();
  assert $18786 != null;
  return PreludeBase.TList.DList.<Tokens.TToken>mk();
}
final public static Lazy<Func.U<RealWorld, Short>> $main = Thunk.<Func.U<RealWorld, Short>>shared(
      (Lazy<Func.U<RealWorld, Short>>)(() -> {
            return (Func.U<RealWorld, Short>)((final Lazy<RealWorld> arg$18787) -> {
                      final Global.TGlobal v2056$18297 = CompilerHelper.lspGlobal.call()
                      .apply(arg$18787).call();
                      final Func.U<RealWorld, Global.TGlobal> v2053$18316 = Func.<RealWorld, Global.TGlobal>coerceU(
                            State.<Global.TGlobal, Func.U<RealWorld, ?>, Global.TGlobal>execStateT(
                                  PreludeMonad.IMonad_ST.<RealWorld>mk(),
                                  Thunk.<State.TStateT<Global.TGlobal, Func.U<RealWorld, ?>, Global.TGlobal>>shared(
                                        (Lazy<State.TStateT<
                                          Global.TGlobal, Func.U<RealWorld, ?>, Global.TGlobal
                                        >>)(() -> CompilerHelper.compileFregeFile(
                                                  Thunk.<String/*<Character>*/>lazy(
                                                        "module FaultyFregeTest where\n\nsimplyString s = s\n\nerr1 = (simplyString 42) ++ \"test\""
                                                      )
                                                ))
                                      ),
                                  v2056$18297
                                )
                          );
                      final Global.TGlobal v2056$18319 = v2053$18316.apply(arg$18787)
                      .call();
                      final Func.U<RealWorld, Short> v4793$18341 = Prelude.<String/*<Character>*/>println(
                            PreludeText.IShow_String.it, Global.TSubSt.code(Global.TGlobal.sub(v2056$18319)).toString()
                          );
                      final short v4796$18343 = (short)v4793$18341.apply(arg$18787).call();
                      final Func.U<RealWorld, Short> v4797$18344 = ((Func.U<RealWorld, Short>)((
                        final Lazy<RealWorld> arg$18794
                      ) -> {
                            final short v4796$18374 = (short)Func.<RealWorld, Short>coerceU(
                                  PreludeMonad.<Func.U<RealWorld, ?>, Global.TMessage, Short, PreludeBase.TList<?>>$for(
                                        PreludeMonad.IMonad_ST.<RealWorld>mk(),
                                        PreludeList.IListSource_$lbrack$rbrack.<PreludeBase.TList<?>>mk(),
                                        Thunk.<Kind.U<PreludeBase.TList<?>, Global.TMessage>>lazy(
                                              (Kind.U<PreludeBase.TList<?>, Global.TMessage>)Global.TSubSt.messages(
                                                    Global.TGlobal.sub(v2056$18319)
                                                  )
                                            ),
                                        (Func.U<Global.TMessage, Kind.U<Func.U<RealWorld, ?>, Short>>)((
                                          final Lazy<Global.TMessage> η$18793
                                        ) -> Thunk.<Kind.U<Func.U<RealWorld, ?>, Short>>shared(
                                                  (Lazy<Kind.U<Func.U<RealWorld, ?>, Short>>)(() -> (Kind.U<
                                                        Func.U<RealWorld, ?>, Short
                                                      >)Thunk.<Func.U<RealWorld, Short>>shared(
                                                            (Lazy<Func.U<RealWorld, Short>>)(() -> Prelude.<
                                                                  Global.TMessage
                                                                >println(CompilerHelper.IShow_Message.it, η$18793.call()))
                                                          ).call())
                                                ))
                                      )
                                ).apply(arg$18794).call();
                            final Func.U<RealWorld, Short> v4797$18375 = Thunk.<Func.U<RealWorld, Short>>shared(
                                  (Lazy<Func.U<RealWorld, Short>>)(() -> Func.<RealWorld, Short>coerceU(
                                            Thunk.<Kind.U<Func.U<RealWorld, ?>, Short>>shared(
                                                  (Lazy<Kind.U<Func.U<RealWorld, ?>, Short>>)(() -> PreludeMonad.<
                                                        Func.U<RealWorld, ?>, Tokens.TToken, Short,
                                                        PreludeBase.TList<?>
                                                      >$for(
                                                            PreludeMonad.IMonad_ST.<RealWorld>mk(),
                                                            PreludeList.IListSource_$lbrack$rbrack.<
                                                              PreludeBase.TList<?>
                                                            >mk(),
                                                            Thunk.<Kind.U<PreludeBase.TList<?>, Tokens.TToken>>shared(
                                                                  (Lazy<Kind.U<
                                                                    PreludeBase.TList<?>, Tokens.TToken
                                                                  >>)(() -> (Kind.U<PreludeBase.TList<?>, Tokens.TToken>)Thunk.<
                                                                        PreludeBase.TList<
                                                                          Tokens.TToken
                                                                        >
                                                                      >shared(
                                                                            (Lazy<PreludeBase.TList<
                                                                              Tokens.TToken
                                                                            >>)(() -> Diagnostic.posToTokens(
                                                                                      PreludeList.<
                                                                                        Positions.TPosition,
                                                                                        Global.TMessage
                                                                                      >map(
                                                                                            (Func.U<
                                                                                              Global.TMessage,
                                                                                              Positions.TPosition
                                                                                            >)((
                                                                                              final Lazy<Global.TMessage> η$18791
                                                                                            ) -> Global.TMessage.pos(
                                                                                                      η$18791
                                                                                                      .call()
                                                                                                    )),
                                                                                            Global.TSubSt.messages(
                                                                                                  Global.TGlobal.sub(
                                                                                                        v2056$18319
                                                                                                      )
                                                                                                )
                                                                                          ),
                                                                                      v2056$18319
                                                                                    ))
                                                                          ).call())
                                                                ),
                                                            (Func.U<Tokens.TToken, Kind.U<Func.U<RealWorld, ?>, Short>>)((
                                                              final Lazy<Tokens.TToken> η$18792
                                                            ) -> Thunk.<Kind.U<Func.U<RealWorld, ?>, Short>>shared(
                                                                      (Lazy<Kind.U<Func.U<RealWorld, ?>, Short>>)(() -> (Kind.U<
                                                                            Func.U<RealWorld, ?>, Short
                                                                          >)Thunk.<Func.U<RealWorld, Short>>shared(
                                                                                (Lazy<Func.U<
                                                                                  RealWorld, Short
                                                                                >>)(() -> Prelude.<
                                                                                      Tokens.TToken
                                                                                    >println(
                                                                                          Tokens.IShow_Token.it,
                                                                                          η$18792
                                                                                          .call()
                                                                                        ))
                                                                              ).call())
                                                                    ))
                                                          ))
                                                ).call()
                                          ))
                                ).call();
                            return Thunk.<Short>nested((Lazy<Lazy<Short>>)(() -> v4797$18375.apply(arg$18794)));
                          })).call();
                      return Thunk.<Short>nested((Lazy<Lazy<Short>>)(() -> v4797$18344.apply(arg$18787)));
                    });
          })
    );
final public static short fromCompilerSeverity(final short arg$1) {
  if (arg$1 == Global.TSeverity.ERROR) {
    return TDiagnosticSeverity.ERROR;
  }
  if (arg$1 == Global.TSeverity.WARNING) {
    return TDiagnosticSeverity.WARNING;
  }
  assert arg$1 == Global.TSeverity.HINT;
  return TDiagnosticSeverity.HINT;
}
final public static State.TState<Global.TGlobal, Range.TRange> createRangeFromPos(final Positions.TPosition arg$1) {
  return State.TState.<Global.TGlobal, Range.TRange>mk(
            (Func.U<Global.TGlobal, PreludeBase.TTuple2<Range.TRange, Global.TGlobal>>)((
              final Lazy<Global.TGlobal> arg$18800
            ) -> {
                  final State.TState<Global.TGlobal, Range.TRange> $18801 = State.IMonad_State.<
                    Global.TGlobal, Range.TRange
                  >pure(Diagnostic.tokensToRange(Global.tokens(arg$1, arg$18800)));
                  final Func.U<Global.TGlobal, PreludeBase.TTuple2<Range.TRange, Global.TGlobal>> v7693$18619 =
                  $18801.mem$fun;
                  return Thunk.<PreludeBase.TTuple2<Range.TRange, Global.TGlobal>>nested(
                            (Lazy<Lazy<PreludeBase.TTuple2<Range.TRange, Global.TGlobal>>>)(() -> v7693$18619
                                .apply(arg$18800))
                          );
                })
          );
}
final public static State.TState<Global.TGlobal, TDiagnostic> createDiagnosticFromMessage(
  final Global.TMessage arg$1
) {
  final State.TState<Global.TGlobal, Range.TRange> $18803 = Diagnostic.createRangeFromPos(
        Global.TMessage.pos(arg$1)
      );
  final Func.U<Global.TGlobal, PreludeBase.TTuple2<Range.TRange, Global.TGlobal>> v7688$18581 =
  $18803.mem$fun;
  return State.TState.<Global.TGlobal, TDiagnostic>mk(
            (Func.U<Global.TGlobal, PreludeBase.TTuple2<TDiagnostic, Global.TGlobal>>)((
              final Lazy<Global.TGlobal> arg$18805
            ) -> {
                  final PreludeBase.TTuple2<Range.TRange, Global.TGlobal> $18806 = v7688$18581
                  .apply(arg$18805).call();
                  final State.TState<Global.TGlobal, TDiagnostic> $18807 = State.IMonad_State.<
                    Global.TGlobal, TDiagnostic
                  >pure(
                        TDiagnostic.mk(
                              $18806.mem1,
                              Thunk.<Short>shared(
                                    (Lazy<Short>)(() -> Diagnostic.fromCompilerSeverity(
                                              Global.TMessage.level(arg$1)
                                            ))
                                  ),
                              Thunk.<String/*<Character>*/>lazy("frege compiler"),
                              Thunk.<String/*<Character>*/>lazy(Global.TMessage.text(arg$1))
                            )
                      );
                  final Func.U<Global.TGlobal, PreludeBase.TTuple2<TDiagnostic, Global.TGlobal>> v7693$18586 =
                  $18807.mem$fun;
                  return Thunk.<PreludeBase.TTuple2<TDiagnostic, Global.TGlobal>>nested(
                            (Lazy<Lazy<PreludeBase.TTuple2<TDiagnostic, Global.TGlobal>>>)(() -> v7693$18586
                                .apply($18806.mem2))
                          );
                })
          );
}
final public static State.TState<Global.TGlobal, PreludeBase.TList<TDiagnostic>> extractDiagnostics =
State.TState.<Global.TGlobal, PreludeBase.TList<TDiagnostic>>mk(
      (Func.U<Global.TGlobal, PreludeBase.TTuple2<PreludeBase.TList<TDiagnostic>, Global.TGlobal>>)((
        final Lazy<Global.TGlobal> arg$18809
      ) -> {
            final Global.TGlobal v7690$18548 = arg$18809.call();
            final State.TState<Global.TGlobal, PreludeBase.TList<TDiagnostic>> $18812 =
            State.TState.<Global.TGlobal, PreludeBase.TList<TDiagnostic>>coerce(
                  PreludeMonad.<State.TState<Global.TGlobal, ?>, TDiagnostic>sequence(
                        State.IMonad_State.<Global.TGlobal>mk(), State.IMonad_State.<Global.TGlobal>mk(),
                        PreludeMonad.IFunctor_$lbrack$rbrack.<Global.TMessage, State.TState<Global.TGlobal, TDiagnostic>>fmap(
                              (Func.U<Global.TMessage, State.TState<Global.TGlobal, TDiagnostic>>)((
                                final Lazy<Global.TMessage> η$18811
                              ) -> Thunk.<State.TState<Global.TGlobal, TDiagnostic>>shared(
                                        (Lazy<State.TState<
                                          Global.TGlobal, TDiagnostic
                                        >>)(() -> Diagnostic.createDiagnosticFromMessage(
                                                  η$18811.call()
                                                ))
                                      )),
                              Global.TSubSt.messages(Global.TGlobal.sub(v7690$18548))
                            ).<Kind.U<State.TState<Global.TGlobal, ?>, TDiagnostic>>simsalabim()
                      )
                );
            final Func.U<Global.TGlobal, PreludeBase.TTuple2<PreludeBase.TList<TDiagnostic>, Global.TGlobal>> v7693$18551 =
            $18812.mem$fun;
            return Thunk.<PreludeBase.TTuple2<PreludeBase.TList<TDiagnostic>, Global.TGlobal>>nested(
                      (Lazy<Lazy<PreludeBase.TTuple2<PreludeBase.TList<TDiagnostic>, Global.TGlobal>>>)(() -> v7693$18551
                          .apply(v7690$18548))
                    );
          })
    );
final public static Func.U<RealWorld, PreludeBase.TList<TDiagnostic>> compileAndGetDiagnostics(
  final Lazy<String/*<Character>*/> arg$1
) {
  return (Func.U<RealWorld, PreludeBase.TList<TDiagnostic>>)((final Lazy<RealWorld> arg$18814) -> {
            final Global.TGlobal v2056$18658 = CompilerHelper.lspGlobal.call().apply(arg$18814)
            .call();
            final Func.U<RealWorld, Global.TGlobal> v2053$18677 = Func.<RealWorld, Global.TGlobal>coerceU(
                  State.<Global.TGlobal, Func.U<RealWorld, ?>, Global.TGlobal>execStateT(
                        PreludeMonad.IMonad_ST.<RealWorld>mk(),
                        Thunk.<State.TStateT<Global.TGlobal, Func.U<RealWorld, ?>, Global.TGlobal>>shared(
                              (Lazy<State.TStateT<
                                Global.TGlobal, Func.U<RealWorld, ?>, Global.TGlobal
                              >>)(() -> CompilerHelper.compileFregeFile(arg$1))
                            ),
                        v2056$18658
                      )
                );
            final Global.TGlobal v2056$18680 = v2053$18677.apply(arg$18814).call();
            final Func.U<RealWorld, PreludeBase.TList<TDiagnostic>> v2057$18681 = PreludeMonad.IMonad_ST.<
              RealWorld, PreludeBase.TList<TDiagnostic>
            >pure(
                  Thunk.<PreludeBase.TList<TDiagnostic>>shared(
                        (Lazy<PreludeBase.TList<TDiagnostic>>)(() -> State.<
                              Global.TGlobal, PreludeBase.TList<TDiagnostic>
                            >evalState(Diagnostic.extractDiagnostics, v2056$18680))
                      )
                );
            return Thunk.<PreludeBase.TList<TDiagnostic>>nested(
                      (Lazy<Lazy<PreludeBase.TList<TDiagnostic>>>)(() -> v2057$18681.apply(
                                arg$18814
                              ))
                    );
          });
}
final public static Lazy<QuickCheckGen.TGen<
  QuickCheckProperty.TRose<QuickCheckProperty.TResult>
>> fregeLSPServerShouldMapSingleCompilerMessageToDiagnostics = Thunk.<
  QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>
>shared(
      (Lazy<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>)(() -> {
            return QuickCheckProperty.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>once(
                      new QuickCheckProperty.ITestable_Gen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>(
                        QuickCheckProperty.ITestable_Prop.it
                      ),
                      Thunk.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>shared(
                            (Lazy<QuickCheckGen.TGen<
                              QuickCheckProperty.TRose<QuickCheckProperty.TResult>
                            >>)(() -> QuickCheckProperty.<Boolean>morallyDubiousIOProperty(
                                      QuickCheckProperty.ITestable_Bool.it,
                                      (Func.U<RealWorld, Boolean>)((final Lazy<RealWorld> arg$18819) -> {
                                            final Global.TGlobal v2056$18403 = CompilerHelper.lspGlobal
                                            .call().apply(arg$18819).call();
                                            final Func.U<RealWorld, PreludeBase.TList<TDiagnostic>> v2053$18422 =
                                            Diagnostic.compileAndGetDiagnostics(
                                                  Thunk.<String/*<Character>*/>lazy(
                                                        "module ch.fhnw.thga.FaultyFregeTest where\n\nimport Does.not.Exist"
                                                      )
                                                );
                                            final PreludeBase.TList<TDiagnostic> v2056$18425 =
                                            v2053$18422.apply(arg$18819).call();
                                            final Func.U<RealWorld, Boolean> v2057$18426 =
                                            PreludeMonad.IMonad_ST.<RealWorld, Boolean>pure(
                                                  Thunk.<Boolean>shared(
                                                        (Lazy<Boolean>)(() -> PreludeBase.IEq_$lbrack$rbrack.<
                                                              TDiagnostic
                                                            >$eq$eq(
                                                                  IEq_Diagnostic.it,
                                                                  PreludeBase.TList.DCons.<
                                                                    TDiagnostic
                                                                  >mk(
                                                                        TDiagnostic.mk(
                                                                              Range.TRange.mk(
                                                                                    Position.TPosition.mk(
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                3
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                8
                                                                                              )
                                                                                        ),
                                                                                    Position.TPosition.mk(
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                3
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                22
                                                                                              )
                                                                                        )
                                                                                  ),
                                                                              Thunk.<Short>lazy(
                                                                                    TDiagnosticSeverity.ERROR
                                                                                  ),
                                                                              Thunk.<String/*<Character>*/>lazy(
                                                                                    "frege compiler"
                                                                                  ),
                                                                              Thunk.<String/*<Character>*/>lazy(
                                                                                    "Could not import module frege.does.not.Exist\n(java.lang.ClassNotFoundException: frege.does.not.Exist)"
                                                                                  )
                                                                            ),
                                                                        PreludeBase.TList.DList.<
                                                                          TDiagnostic
                                                                        >mk()
                                                                      ),
                                                                  v2056$18425
                                                                ))
                                                      )
                                                );
                                            return Thunk.<Boolean>nested(
                                                      (Lazy<Lazy<Boolean>>)(() -> v2057$18426
                                                          .apply(arg$18819))
                                                    );
                                          })
                                    ))
                          )
                    );
          })
    );
final public static Lazy<QuickCheckGen.TGen<
  QuickCheckProperty.TRose<QuickCheckProperty.TResult>
>> fregeLSPServerShouldMapNoCompilerMessagesToEmptyArray = Thunk.<
  QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>
>shared(
      (Lazy<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>)(() -> {
            return QuickCheckProperty.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>once(
                      new QuickCheckProperty.ITestable_Gen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>(
                        QuickCheckProperty.ITestable_Prop.it
                      ),
                      Thunk.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>shared(
                            (Lazy<QuickCheckGen.TGen<
                              QuickCheckProperty.TRose<QuickCheckProperty.TResult>
                            >>)(() -> QuickCheckProperty.<Boolean>morallyDubiousIOProperty(
                                      QuickCheckProperty.ITestable_Bool.it,
                                      (Func.U<RealWorld, Boolean>)((final Lazy<RealWorld> arg$18824) -> {
                                            final PreludeBase.TList<TDiagnostic> v2056$18519 =
                                            Diagnostic.compileAndGetDiagnostics(
                                                  Thunk.<String/*<Character>*/>shared(
                                                        (Lazy<String/*
                                                          <Character>
                                                        */>)(() -> "module CorrectFregeTest where\n\n" + "ok = 42 + 42")
                                                      )
                                                ).apply(arg$18824).call();
                                            final Func.U<RealWorld, Boolean> v2057$18520 =
                                            PreludeMonad.IMonad_ST.<RealWorld, Boolean>pure(
                                                  Thunk.<Boolean>shared(
                                                        (Lazy<Boolean>)(() -> PreludeBase.IEq_$lbrack$rbrack.<
                                                              TDiagnostic
                                                            >$eq$eq(
                                                                  IEq_Diagnostic.it, PreludeBase.TList.DList.<TDiagnostic>mk(),
                                                                  v2056$18519
                                                                ))
                                                      )
                                                );
                                            return Thunk.<Boolean>nested(
                                                      (Lazy<Lazy<Boolean>>)(() -> v2057$18520
                                                          .apply(arg$18824))
                                                    );
                                          })
                                    ))
                          )
                    );
          })
    );
final public static Lazy<QuickCheckGen.TGen<
  QuickCheckProperty.TRose<QuickCheckProperty.TResult>
>> fregeLSPServerShouldMapMultipleCompilerMessageToDiagnostics = Thunk.<
  QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>
>shared(
      (Lazy<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>)(() -> {
            return QuickCheckProperty.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>once(
                      new QuickCheckProperty.ITestable_Gen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>(
                        QuickCheckProperty.ITestable_Prop.it
                      ),
                      Thunk.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>shared(
                            (Lazy<QuickCheckGen.TGen<
                              QuickCheckProperty.TRose<QuickCheckProperty.TResult>
                            >>)(() -> QuickCheckProperty.<Boolean>morallyDubiousIOProperty(
                                      QuickCheckProperty.ITestable_Bool.it,
                                      (Func.U<RealWorld, Boolean>)((final Lazy<RealWorld> arg$18827) -> {
                                            final Global.TGlobal v2056$18461 = CompilerHelper.lspGlobal
                                            .call().apply(arg$18827).call();
                                            final Func.U<RealWorld, PreludeBase.TList<TDiagnostic>> v2053$18480 =
                                            Diagnostic.compileAndGetDiagnostics(
                                                  Thunk.<String/*<Character>*/>lazy(
                                                        "module ch.fhnw.thga.FaultyFregeTest where\n\nerr1 = do\n  x = 42\n\nerr2 = [ 22.0 ] ++ \"42\"\n\nerr3 = 42 + \"42\""
                                                      )
                                                );
                                            final PreludeBase.TList<TDiagnostic> v2056$18483 =
                                            v2053$18480.apply(arg$18827).call();
                                            final Func.U<RealWorld, Boolean> v2057$18484 =
                                            PreludeMonad.IMonad_ST.<RealWorld, Boolean>pure(
                                                  Thunk.<Boolean>shared(
                                                        (Lazy<Boolean>)(() -> PreludeBase.IEq_$lbrack$rbrack.<
                                                              TDiagnostic
                                                            >$eq$eq(
                                                                  IEq_Diagnostic.it,
                                                                  PreludeBase.TList.DCons.<
                                                                    TDiagnostic
                                                                  >mk(
                                                                        TDiagnostic.mk(
                                                                              Range.TRange.mk(
                                                                                    Position.TPosition.mk(
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                6
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                20
                                                                                              )
                                                                                        ),
                                                                                    Position.TPosition.mk(
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                6
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                24
                                                                                              )
                                                                                        )
                                                                                  ),
                                                                              Thunk.<Short>lazy(
                                                                                    TDiagnosticSeverity.ERROR
                                                                                  ),
                                                                              Thunk.<String/*<Character>*/>lazy(
                                                                                    "frege compiler"
                                                                                  ),
                                                                              Thunk.<String/*<Character>*/>lazy(
                                                                                    "type error in expression\n\"42\"\ntype is : String\nexpected: [t1]"
                                                                                  )
                                                                            ),
                                                                        PreludeBase.TList.DCons.<
                                                                          TDiagnostic
                                                                        >mk(
                                                                              TDiagnostic.mk(
                                                                                    Range.TRange.mk(
                                                                                          Position.TPosition.mk(
                                                                                                Thunk.<
                                                                                                  Integer
                                                                                                >lazy(
                                                                                                      8
                                                                                                    ),
                                                                                                Thunk.<
                                                                                                  Integer
                                                                                                >lazy(
                                                                                                      11
                                                                                                    )
                                                                                              ),
                                                                                          Position.TPosition.mk(
                                                                                                Thunk.<
                                                                                                  Integer
                                                                                                >lazy(
                                                                                                      8
                                                                                                    ),
                                                                                                Thunk.<
                                                                                                  Integer
                                                                                                >lazy(
                                                                                                      12
                                                                                                    )
                                                                                              )
                                                                                        ),
                                                                                    Thunk.<
                                                                                      Short
                                                                                    >lazy(
                                                                                          TDiagnosticSeverity.ERROR
                                                                                        ),
                                                                                    Thunk.<
                                                                                      String/*
                                                                                        <
                                                                                          Character
                                                                                        >
                                                                                      */
                                                                                    >lazy(
                                                                                          "frege compiler"
                                                                                        ),
                                                                                    Thunk.<
                                                                                      String/*
                                                                                        <
                                                                                          Character
                                                                                        >
                                                                                      */
                                                                                    >lazy(
                                                                                          "String is not an instance of Num"
                                                                                        )
                                                                                  ),
                                                                              PreludeBase.TList.DCons.<
                                                                                TDiagnostic
                                                                              >mk(
                                                                                    TDiagnostic.mk(
                                                                                          Range.TRange.mk(
                                                                                                Position.TPosition.mk(
                                                                                                      Thunk.<
                                                                                                        Integer
                                                                                                      >lazy(
                                                                                                            3
                                                                                                          ),
                                                                                                      Thunk.<
                                                                                                        Integer
                                                                                                      >lazy(
                                                                                                            8
                                                                                                          )
                                                                                                    ),
                                                                                                Position.TPosition.mk(
                                                                                                      Thunk.<
                                                                                                        Integer
                                                                                                      >lazy(
                                                                                                            3
                                                                                                          ),
                                                                                                      Thunk.<
                                                                                                        Integer
                                                                                                      >lazy(
                                                                                                            10
                                                                                                          )
                                                                                                    )
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Short
                                                                                          >lazy(
                                                                                                TDiagnosticSeverity.ERROR
                                                                                              ),
                                                                                          Thunk.<
                                                                                            String/*
                                                                                              <
                                                                                                Character
                                                                                              >
                                                                                            */
                                                                                          >lazy(
                                                                                                "frege compiler"
                                                                                              ),
                                                                                          Thunk.<
                                                                                            String/*
                                                                                              <
                                                                                                Character
                                                                                              >
                                                                                            */
                                                                                          >lazy(
                                                                                                "last statement in a monadic do block must not\nbe let decls"
                                                                                              )
                                                                                        ),
                                                                                    PreludeBase.TList.DList.<
                                                                                      TDiagnostic
                                                                                    >mk()
                                                                                  )
                                                                            )
                                                                      ),
                                                                  v2056$18483
                                                                ))
                                                      )
                                                );
                                            return Thunk.<Boolean>nested(
                                                      (Lazy<Lazy<Boolean>>)(() -> v2057$18484
                                                          .apply(arg$18827))
                                                    );
                                          })
                                    ))
                          )
                    );
          })
    );

  public static void main(final java.lang.String[] argv) {
    try {
      frege.run.RunTM.argv = argv;
      
        PreludeBase.TST.<Short>performUnsafe($main
               .call()
          ).call();
      frege.runtime.Runtime.stdout.get().close();
      frege.runtime.Runtime.stderr.get().close();

    } finally { frege.run.Concurrent.shutDownIfExists(); }
  }
}
