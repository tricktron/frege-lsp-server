/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.25.84
  from
  /Users/tricktron/github/master/frege-lsp-server/src/main/frege/ch/fhnw/thga/fregelanguageserver/diagnostic/Diagnostic.fr
  Do not edit this file! Instead, edit the source file and recompile.
*/

package ch.fhnw.thga.fregelanguageserver.diagnostic;

import frege.run8.Func;
import frege.run8.Lazy;
import frege.run8.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import ch.fhnw.thga.fregelanguageserver.compile.CompileGlobal;
import ch.fhnw.thga.fregelanguageserver.compile.CompileNormalMode;
import ch.fhnw.thga.fregelanguageserver.compile.CompileOptions;
import ch.fhnw.thga.fregelanguageserver.types.Position;
import ch.fhnw.thga.fregelanguageserver.types.Range;
import frege.Prelude;
import frege.Version;
import frege.compiler.Classes;
import frege.compiler.Classtools;
import frege.compiler.GenMeta;
import frege.compiler.Javatypes;
import frege.compiler.Kinds;
import frege.compiler.Main;
import frege.compiler.Typecheck;
import frege.compiler.Utilities;
import frege.compiler.classes.Nice;
import frege.compiler.classes.QNameMatcher;
import frege.compiler.common.Annotate;
import frege.compiler.common.AnnotateG;
import frege.compiler.common.Binders;
import frege.compiler.common.CompilerOptions;
import frege.compiler.common.Desugar;
import frege.compiler.common.Errors;
import frege.compiler.common.ImpExp;
import frege.compiler.common.JavaName;
import frege.compiler.common.Mangle;
import frege.compiler.common.PatternCompiler;
import frege.compiler.common.Resolve;
import frege.compiler.common.Roman;
import frege.compiler.common.SymbolTable;
import frege.compiler.common.Trans;
import frege.compiler.common.Tuples;
import frege.compiler.common.Types;
import frege.compiler.common.UnAlias;
import frege.compiler.enums.CaseKind;
import frege.compiler.enums.Flags;
import frege.compiler.enums.Literals;
import frege.compiler.enums.RFlag;
import frege.compiler.enums.SymState;
import frege.compiler.enums.TokenID;
import frege.compiler.enums.Visibility;
import frege.compiler.gen.java.Bindings;
import frege.compiler.gen.java.Common;
import frege.compiler.gen.java.Constants;
import frege.compiler.gen.java.DataCode;
import frege.compiler.gen.java.InstanceCode;
import frege.compiler.gen.java.Instantiation;
import frege.compiler.gen.java.Match;
import frege.compiler.gen.java.MethodCall;
import frege.compiler.gen.java.PrettyJava;
import frege.compiler.gen.java.VarCode;
import frege.compiler.grammar.Frege;
import frege.compiler.grammar.Lexer;
import frege.compiler.instances.NiceExprS;
import frege.compiler.instances.Nicer;
import frege.compiler.instances.PositionedSName;
import frege.compiler.passes.Easy;
import frege.compiler.passes.Enter;
import frege.compiler.passes.Fields;
import frege.compiler.passes.Final;
import frege.compiler.passes.Fix;
import frege.compiler.passes.GenCode;
import frege.compiler.passes.GlobalLam;
import frege.compiler.passes.Imp;
import frege.compiler.passes.Instances;
import frege.compiler.passes.LetUnroll;
import frege.compiler.passes.Strict;
import frege.compiler.passes.Transdef;
import frege.compiler.passes.TypeAlias;
import frege.compiler.tc.Methods;
import frege.compiler.tc.Patterns;
import frege.compiler.tc.Util;
import frege.compiler.types.AbstractJava;
import frege.compiler.types.ConstructorField;
import frege.compiler.types.Expression;
import frege.compiler.types.External;
import frege.compiler.types.Global;
import frege.compiler.types.ImportDetails;
import frege.compiler.types.JNames;
import frege.compiler.types.NSNames;
import frege.compiler.types.Packs;
import frege.compiler.types.Positions;
import frege.compiler.types.QNames;
import frege.compiler.types.SNames;
import frege.compiler.types.SourceDefinitions;
import frege.compiler.types.Strictness;
import frege.compiler.types.Symbols;
import frege.compiler.types.Targets;
import frege.compiler.types.Tokens;
import frege.control.Category;
import frege.control.Concurrent;
import frege.control.Semigroupoid;
import frege.control.monad.State;
import frege.control.monad.trans.MonadIO;
import frege.control.monad.trans.MonadTrans;
import frege.data.Bits;
import frege.data.Char;
import frege.data.Foldable;
import frege.data.Graph;
import frege.data.List;
import frege.data.Monoid;
import frege.data.Traversable;
import frege.data.Tree;
import frege.data.TreeMap;
import frege.data.wrapper.Const;
import frege.data.wrapper.Dual;
import frege.data.wrapper.Endo;
import frege.data.wrapper.Identity;
import frege.data.wrapper.Num;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Net;
import frege.java.util.Regex;
import frege.lib.PP;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeDecimal;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;
import frege.system.Random;
import frege.test.QuickCheck;
import frege.test.QuickCheckArbitrary;
import frege.test.QuickCheckException;
import frege.test.QuickCheckGen;
import frege.test.QuickCheckModifiers;
import frege.test.QuickCheckProperty;
import frege.test.QuickCheckState;
import frege.test.QuickCheckTest;
import frege.test.QuickCheckText;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="/Users/tricktron/github/master/frege-lsp-server/src/main/frege/ch/fhnw/thga/fregelanguageserver/diagnostic/Diagnostic.fr",
  time=1659770983884L, jmajor=11, jminor=-1,
  imps={
    "ch.fhnw.thga.fregelanguageserver.compile.CompileGlobal",
    "ch.fhnw.thga.fregelanguageserver.compile.CompileNormalMode", "frege.compiler.types.Global",
    "ch.fhnw.thga.fregelanguageserver.types.Position", "frege.compiler.types.Positions", "frege.Prelude",
    "frege.prelude.PreludeArrays", "frege.prelude.PreludeBase", "frege.prelude.PreludeDecimal",
    "frege.prelude.PreludeIO", "frege.prelude.PreludeList", "frege.prelude.PreludeMonad", "frege.prelude.PreludeText",
    "frege.test.QuickCheck", "ch.fhnw.thga.fregelanguageserver.types.Range", "frege.java.util.Regex",
    "frege.control.monad.State", "frege.compiler.types.Tokens"
  },
  nmss={
    "CompileGlobal", "CompileNormalMode", "Global", "Position", "Positions", "Prelude", "PreludeArrays",
    "PreludeBase", "PreludeDecimal", "PreludeIO", "PreludeList", "PreludeMonad", "PreludeText",
    "QuickCheck", "Range", "Regexp", "State", "Tokens"
  },
  symas={}, symcs={},
  symis={
    @Meta.SymI(
      offset=1178,
      name=@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic"),
      clas=@Meta.QName(kind=0, pack="frege.prelude.PreludeText", base="Show"), typ=0, lnks={},
      funs={
        @Meta.SymV(
          offset=1178,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="showsub"
          ),
          stri="s(s)", sig=1, depth=1, rkind=13, doc="Function generated for derived instance."
        ),
        @Meta.SymV(
          offset=1178,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="showList"
          ),
          stri="s(ss)", sig=4, depth=2, rkind=13, doc="inherited from 'Show.showList'"
        ),
        @Meta.SymV(
          offset=1178,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="showsPrec"
          ),
          stri="s(uss)", sig=6, depth=3, rkind=13, doc="inherited from 'Show.showsPrec'"
        ),
        @Meta.SymV(
          offset=1178,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="display"
          ),
          stri="s(s)", sig=1, depth=1, rkind=13, doc="inherited from 'Show.display'"
        ),
        @Meta.SymV(
          offset=1178,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="show"
          ),
          stri="s(s)", sig=1, depth=1, rkind=13, doc="Function generated for derived instance."
        ),
        @Meta.SymV(
          offset=1178,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="showChars"
          ),
          stri="s(s)", sig=7, depth=1, rkind=13, doc="inherited from 'Show.showChars'"
        )
      }
    ),
    @Meta.SymI(
      offset=790,
      name=@Meta.QName(
        kind=0, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity"
      ),
      clas=@Meta.QName(kind=0, pack="frege.prelude.PreludeText", base="Show"), typ=8, lnks={},
      funs={
        @Meta.SymV(
          offset=790,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="showsub"
          ),
          stri="s(s)", sig=9, depth=1, rkind=13, doc="Function generated for derived instance."
        ),
        @Meta.SymV(
          offset=790,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="showList"
          ),
          stri="s(ss)", sig=11, depth=2, rkind=13, doc="inherited from 'Show.showList'"
        ),
        @Meta.SymV(
          offset=790,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="showsPrec"
          ),
          stri="s(uss)", sig=12, depth=3, rkind=13, doc="inherited from 'Show.showsPrec'"
        ),
        @Meta.SymV(
          offset=790,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="display"
          ),
          stri="s(s)", sig=9, depth=1, rkind=13, doc="inherited from 'Show.display'"
        ),
        @Meta.SymV(
          offset=790,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="show"
          ),
          stri="s(s)", sig=9, depth=1, rkind=13, doc="Function generated for derived instance."
        ),
        @Meta.SymV(
          offset=790,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="showChars"
          ),
          stri="s(s)", sig=13, depth=1, rkind=13, doc="inherited from 'Show.showChars'"
        )
      }
    ),
    @Meta.SymI(
      offset=1157,
      name=@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_Diagnostic"),
      clas=@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Eq"), typ=0, lnks={},
      funs={
        @Meta.SymV(
          offset=1157,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_Diagnostic",
            member="hashCode"
          ),
          stri="s(s)", sig=14, depth=1, rkind=13, doc="Function generated for derived instance."
        ),
        @Meta.SymV(
          offset=1157,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_Diagnostic",
            member="!="
          ),
          stri="s(ss)", sig=15, depth=2, rkind=13, doc="inherited from 'Eq.!='", op=96
        ),
        @Meta.SymV(
          offset=1157,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_Diagnostic",
            member="=="
          ),
          stri="s(ss)", sig=15, depth=2, rkind=13, doc="Function generated for derived instance.", op=96
        )
      }
    ),
    @Meta.SymI(
      offset=761,
      name=@Meta.QName(
        kind=0, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_DiagnosticSeverity"
      ),
      clas=@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Eq"), typ=8, lnks={},
      funs={
        @Meta.SymV(
          offset=761,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_DiagnosticSeverity",
            member="hashCode"
          ),
          stri="s(s)", sig=16, depth=1, rkind=13, doc="Function generated for derived instance."
        ),
        @Meta.SymV(
          offset=761,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_DiagnosticSeverity",
            member="!="
          ),
          stri="s(ss)", sig=17, depth=2, rkind=13, doc="inherited from 'Eq.!='", op=96
        ),
        @Meta.SymV(
          offset=761,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_DiagnosticSeverity",
            member="=="
          ),
          stri="s(ss)", sig=17, depth=2, rkind=13, doc="Function generated for derived instance.", op=96
        )
      }
    )
  },
  symts={
    @Meta.SymT(
      offset=1022,
      name=@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic"), typ=0,
      kind=12,
      cons={
        @Meta.SymD(
          offset=1035,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="Diagnostic"
          ),
          cid=0, typ=19,
          fields={
            @Meta.Field(name="range", offset=1052, sigma=18, strict=false),
            @Meta.Field(name="severity", offset=1075, sigma=8, strict=false),
            @Meta.Field(name="source", offset=1111, sigma=3, strict=false),
            @Meta.Field(name="message", offset=1135, sigma=3, strict=false)
          }
        )
      },
      lnks={
        @Meta.SymL(
          offset=1178,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="showsPrec"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="showsPrec"
          )
        ),
        @Meta.SymL(
          offset=1178,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="showChars"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="showChars"
          )
        ),
        @Meta.SymL(
          offset=1178,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="showList"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="showList"
          )
        ),
        @Meta.SymL(
          offset=1178,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="show"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="show"
          )
        ),
        @Meta.SymL(
          offset=1178,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="showsub"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="showsub"
          )
        ),
        @Meta.SymL(
          offset=1157,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="hashCode"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_Diagnostic",
            member="hashCode"
          )
        ),
        @Meta.SymL(
          offset=1178,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="display"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_Diagnostic",
            member="display"
          )
        ),
        @Meta.SymL(
          offset=1157,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="!="
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_Diagnostic",
            member="!="
          )
        ),
        @Meta.SymL(
          offset=1157,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="=="
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_Diagnostic",
            member="=="
          )
        )
      },
      funs={
        @Meta.SymV(
          offset=1112,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="upd$source"
          ),
          stri="s(su)", sig=20, depth=2, rkind=13, doc="update field @source@"
        ),
        @Meta.SymV(
          offset=1053,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="upd$range"
          ),
          stri="s(su)", sig=21, depth=2, rkind=13, doc="update field @range@"
        ),
        @Meta.SymV(
          offset=1076,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="upd$severity"
          ),
          stri="s(su)", sig=22, depth=2, rkind=13, doc="update field @severity@"
        ),
        @Meta.SymV(
          offset=1112,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="source"
          ),
          stri="s(s)", sig=1, depth=1, rkind=13, doc="access field @source@"
        ),
        @Meta.SymV(
          offset=1136,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="upd$message"
          ),
          stri="s(su)", sig=20, depth=2, rkind=13, doc="update field @message@"
        ),
        @Meta.SymV(
          offset=1053,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="range"
          ),
          stri="s(s)", sig=23, depth=1, rkind=13, doc="access field @range@"
        ),
        @Meta.SymV(
          offset=1076,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="severity"
          ),
          stri="s(s)", sig=24, depth=1, rkind=13, doc="access field @severity@"
        ),
        @Meta.SymV(
          offset=1112,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="has$source"
          ),
          stri="s(u)", sig=26, depth=1, rkind=13, doc="check if constructor has field @source@"
        ),
        @Meta.SymV(
          offset=1053,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="has$range"
          ),
          stri="s(u)", sig=26, depth=1, rkind=13, doc="check if constructor has field @range@"
        ),
        @Meta.SymV(
          offset=1076,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="has$severity"
          ),
          stri="s(u)", sig=26, depth=1, rkind=13, doc="check if constructor has field @severity@"
        ),
        @Meta.SymV(
          offset=1076,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="chg$severity"
          ),
          stri="s(su)", sig=28, depth=2, rkind=13, doc="change field @severity@"
        ),
        @Meta.SymV(
          offset=1112,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="chg$source"
          ),
          stri="s(su)", sig=30, depth=2, rkind=13, doc="change field @source@"
        ),
        @Meta.SymV(
          offset=1136,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="chg$message"
          ),
          stri="s(su)", sig=30, depth=2, rkind=13, doc="change field @message@"
        ),
        @Meta.SymV(
          offset=1053,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="chg$range"
          ),
          stri="s(su)", sig=32, depth=2, rkind=13, doc="change field @range@"
        ),
        @Meta.SymV(
          offset=1136,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="has$message"
          ),
          stri="s(u)", sig=26, depth=1, rkind=13, doc="check if constructor has field @message@"
        ),
        @Meta.SymV(
          offset=1136,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic",
            member="message"
          ),
          stri="s(s)", sig=1, depth=1, rkind=13, doc="access field @message@"
        )
      },
      prod=true
    ),
    @Meta.SymT(
      offset=702,
      name=@Meta.QName(
        kind=0, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity"
      ),
      typ=8, kind=12,
      cons={
        @Meta.SymD(
          offset=731,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="WARNING"
          ),
          cid=1, typ=8, fields={}
        ),
        @Meta.SymD(
          offset=755,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="HINT"
          ),
          cid=3, typ=8, fields={}
        ),
        @Meta.SymD(
          offset=723,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="ERROR"
          ),
          cid=0, typ=8, fields={}
        ),
        @Meta.SymD(
          offset=741,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="INFORMATION"
          ),
          cid=2, typ=8, fields={}
        )
      },
      lnks={
        @Meta.SymL(
          offset=790,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="showsub"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="showsub"
          )
        ),
        @Meta.SymL(
          offset=790,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="showList"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="showList"
          )
        ),
        @Meta.SymL(
          offset=790,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="showChars"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="showChars"
          )
        ),
        @Meta.SymL(
          offset=790,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="showsPrec"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="showsPrec"
          )
        ),
        @Meta.SymL(
          offset=761,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="hashCode"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_DiagnosticSeverity",
            member="hashCode"
          )
        ),
        @Meta.SymL(
          offset=790,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="display"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="display"
          )
        ),
        @Meta.SymL(
          offset=761,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="!="
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_DiagnosticSeverity",
            member="!="
          )
        ),
        @Meta.SymL(
          offset=761,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="=="
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Eq_DiagnosticSeverity",
            member="=="
          )
        ),
        @Meta.SymL(
          offset=790,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
            member="show"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Show_DiagnosticSeverity",
            member="show"
          )
        )
      },
      funs={}, isEnum=true
    )
  },
  symvs={
    @Meta.SymV(
      offset=1202,
      name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="tokensToRange"),
      stri="s(s)", sig=34, depth=1, rkind=13
    ),
    @Meta.SymV(
      offset=5165, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="posToTokens"),
      stri="s(su)", sig=37, depth=2, rkind=45
    ),
    @Meta.SymV(
      offset=5306, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="main"),
      stri="u", sig=38, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=2296,
      name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="getDiagnostics"),
      stri="s(u)", sig=39, depth=1, rkind=13
    ),
    @Meta.SymV(
      offset=822,
      name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="fromCompilerSeverity"),
      stri="s(s)", sig=41, depth=1, rkind=13
    ),
    @Meta.SymV(
      offset=2879,
      name=@Meta.QName(
        pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic",
        base="fregeLSPServerShouldMapSingleCompilerMessageToDiagnostics"
      ),
      stri="u", sig=42, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=3718,
      name=@Meta.QName(
        pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic",
        base="fregeLSPServerShouldMapMultipleCompilerMessageToDiagnostics"
      ),
      stri="u", sig=42, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=2388,
      name=@Meta.QName(
        pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic",
        base="fregeLSPServerShouldMapNoCompilerMessagesToEmptyArray"
      ),
      stri="u", sig=42, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=2114,
      name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="extractDiagnostics"),
      stri="s", sig=43, depth=0, rkind=13
    ),
    @Meta.SymV(
      offset=1764,
      name=@Meta.QName(
        pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="createDiagnosticFromMessage"
      ),
      stri="s(s)", sig=45, depth=1, rkind=13
    ),
    @Meta.SymV(
      offset=1614,
      name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="createRangeFromPos"),
      stri="s(s)", sig=47, depth=1, rkind=13
    )
  },
  symls={
    @Meta.SymL(
      offset=731, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="WARNING"),
      alias=@Meta.QName(
        kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
        member="WARNING"
      )
    ),
    @Meta.SymL(
      offset=741, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="INFORMATION"),
      alias=@Meta.QName(
        kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity",
        member="INFORMATION"
      )
    ),
    @Meta.SymL(
      offset=755, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="HINT"),
      alias=@Meta.QName(
        kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity", member="HINT"
      )
    ),
    @Meta.SymL(
      offset=723, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="ERROR"),
      alias=@Meta.QName(
        kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity", member="ERROR"
      )
    ),
    @Meta.SymL(
      offset=1035, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic"),
      alias=@Meta.QName(
        kind=2, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic", member="Diagnostic"
      )
    )
  },
  taus={
    @Meta.Tau(
      kind=2, suba=0,
      tcon={@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="Diagnostic")}
    ),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}),
    @Meta.Tau(kind=0, suba=1, subb=2),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}),
    @Meta.Tau(kind=0, suba=4, subb=0),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Int")}),
    @Meta.Tau(kind=0, suba=4, subb=2),
    @Meta.Tau(
      kind=2, suba=0,
      tcon={
        @Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.diagnostic.Diagnostic", base="DiagnosticSeverity")
      }
    ),
    @Meta.Tau(kind=0, suba=4, subb=8),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Bool")}),
    @Meta.Tau(
      kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.types.Range", base="Range")}
    ),
    @Meta.Tau(kind=9), @Meta.Tau(suba=12, tvar="α"),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="->")}),
    @Meta.Tau(kind=0, suba=14, subb=8), @Meta.Tau(kind=0, suba=15, subb=8), @Meta.Tau(kind=0, suba=14, subb=3),
    @Meta.Tau(kind=0, suba=17, subb=3), @Meta.Tau(kind=0, suba=14, subb=11), @Meta.Tau(kind=0, suba=19, subb=11),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.compiler.types.Tokens", base="Token")}),
    @Meta.Tau(kind=0, suba=4, subb=21),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.compiler.types.Positions", base="Position")}),
    @Meta.Tau(kind=0, suba=4, subb=23),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.compiler.types.Global", base="Global")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="ST")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="RealWorld")}),
    @Meta.Tau(kind=0, suba=26, subb=27),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="()")}),
    @Meta.Tau(kind=0, suba=28, subb=29),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.compiler.types.Global", base="Severity")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.test.QuickCheckGen", base="Gen")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.test.QuickCheckProperty", base="Prop")}),
    @Meta.Tau(kind=0, suba=32, subb=33),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.control.monad.State", base="State")}),
    @Meta.Tau(kind=0, suba=35, subb=25), @Meta.Tau(kind=0, suba=36, subb=5),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.compiler.types.Global", base="Message")}),
    @Meta.Tau(kind=0, suba=36, subb=0), @Meta.Tau(kind=0, suba=36, subb=11)
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=0), @Meta.Rho(rhofun=false, rhotau=3), @Meta.Rho(sigma=0, rhotau=1),
    @Meta.Rho(rhofun=false, rhotau=5), @Meta.Rho(sigma=3, rhotau=1), @Meta.Rho(sigma=2, rhotau=4),
    @Meta.Rho(rhofun=false, rhotau=6), @Meta.Rho(sigma=0, rhotau=4), @Meta.Rho(sigma=5, rhotau=7),
    @Meta.Rho(rhofun=false, rhotau=7), @Meta.Rho(sigma=0, rhotau=9), @Meta.Rho(rhofun=false, rhotau=8),
    @Meta.Rho(sigma=8, rhotau=1), @Meta.Rho(rhofun=false, rhotau=9), @Meta.Rho(sigma=10, rhotau=4),
    @Meta.Rho(sigma=8, rhotau=4), @Meta.Rho(sigma=5, rhotau=15), @Meta.Rho(sigma=8, rhotau=9),
    @Meta.Rho(sigma=0, rhotau=6), @Meta.Rho(rhofun=false, rhotau=10), @Meta.Rho(sigma=0, rhotau=19),
    @Meta.Rho(sigma=0, rhotau=20), @Meta.Rho(sigma=8, rhotau=6), @Meta.Rho(sigma=8, rhotau=19),
    @Meta.Rho(sigma=8, rhotau=23), @Meta.Rho(rhofun=false, rhotau=11), @Meta.Rho(sigma=3, rhotau=0),
    @Meta.Rho(sigma=3, rhotau=26), @Meta.Rho(sigma=8, rhotau=27), @Meta.Rho(sigma=18, rhotau=28),
    @Meta.Rho(sigma=0, rhotau=26), @Meta.Rho(sigma=18, rhotau=0), @Meta.Rho(sigma=0, rhotau=31),
    @Meta.Rho(sigma=8, rhotau=0), @Meta.Rho(sigma=0, rhotau=33), @Meta.Rho(sigma=0, rhotau=25),
    @Meta.Rho(sigma=0, rhotau=11), @Meta.Rho(rhofun=false, rhotau=13), @Meta.Rho(sigma=25, rhotau=19),
    @Meta.Rho(rhofun=false, rhotau=16), @Meta.Rho(sigma=27, rhotau=0), @Meta.Rho(sigma=0, rhotau=40),
    @Meta.Rho(rhofun=false, rhotau=18), @Meta.Rho(sigma=29, rhotau=0), @Meta.Rho(sigma=0, rhotau=43),
    @Meta.Rho(rhofun=false, rhotau=20), @Meta.Rho(sigma=31, rhotau=0), @Meta.Rho(sigma=0, rhotau=46),
    @Meta.Rho(rhofun=false, rhotau=22), @Meta.Rho(sigma=33, rhotau=25), @Meta.Rho(rhofun=false, rhotau=24),
    @Meta.Rho(rhofun=false, rhotau=25), @Meta.Rho(sigma=36, rhotau=48), @Meta.Rho(sigma=35, rhotau=52),
    @Meta.Rho(rhofun=false, rhotau=30), @Meta.Rho(sigma=36, rhotau=3), @Meta.Rho(rhofun=false, rhotau=31),
    @Meta.Rho(sigma=40, rhotau=11), @Meta.Rho(rhofun=false, rhotau=34), @Meta.Rho(rhofun=false, rhotau=37),
    @Meta.Rho(rhofun=false, rhotau=38), @Meta.Rho(rhofun=false, rhotau=39), @Meta.Rho(sigma=44, rhotau=61),
    @Meta.Rho(rhofun=false, rhotau=23), @Meta.Rho(rhofun=false, rhotau=40), @Meta.Rho(sigma=46, rhotau=64)
  },
  sigmas={
    @Meta.Sigma(rho=0), @Meta.Sigma(rho=2), @Meta.Sigma(rho=3), @Meta.Sigma(rho=1), @Meta.Sigma(rho=5),
    @Meta.Sigma(rho=6), @Meta.Sigma(rho=8), @Meta.Sigma(rho=10), @Meta.Sigma(rho=11), @Meta.Sigma(rho=12),
    @Meta.Sigma(rho=13), @Meta.Sigma(rho=14), @Meta.Sigma(rho=16), @Meta.Sigma(rho=17), @Meta.Sigma(rho=18),
    @Meta.Sigma(rho=21), @Meta.Sigma(rho=22), @Meta.Sigma(rho=24), @Meta.Sigma(rho=25), @Meta.Sigma(rho=29),
    @Meta.Sigma(rho=30), @Meta.Sigma(rho=32), @Meta.Sigma(rho=34), @Meta.Sigma(rho=35), @Meta.Sigma(rho=36),
    @Meta.Sigma(rho=37), @Meta.Sigma(bound={"α"}, kinds={12}, rho=38), @Meta.Sigma(rho=39), @Meta.Sigma(rho=41),
    @Meta.Sigma(rho=42), @Meta.Sigma(rho=44), @Meta.Sigma(rho=45), @Meta.Sigma(rho=47), @Meta.Sigma(rho=48),
    @Meta.Sigma(rho=49), @Meta.Sigma(rho=50), @Meta.Sigma(rho=51), @Meta.Sigma(rho=53), @Meta.Sigma(rho=54),
    @Meta.Sigma(rho=55), @Meta.Sigma(rho=56), @Meta.Sigma(rho=57), @Meta.Sigma(rho=58), @Meta.Sigma(rho=59),
    @Meta.Sigma(rho=60), @Meta.Sigma(rho=62), @Meta.Sigma(rho=63), @Meta.Sigma(rho=65)
  },
  exprs={@Meta.Expr()}
)
final public class Diagnostic  {
  


final public static class IShow_Diagnostic implements PreludeText.CShow<TDiagnostic> {
  public IShow_Diagnostic() {}
  final public static IShow_Diagnostic it = new IShow_Diagnostic();
  @Override final public String/*<Character>*/ ƒshowsub(final Lazy<TDiagnostic> arg$1) {
    return IShow_Diagnostic.showsub(arg$1.call());
  }
  @Override final public String/*<Character>*/ ƒshowList(
    final Lazy<PreludeBase.TList<TDiagnostic>> arg$1, final Lazy<String/*<Character>*/> arg$2
  ) {
    return IShow_Diagnostic.showList(arg$1.call(), arg$2.call());
  }
  @Override final public String/*<Character>*/ ƒshowsPrec(
    final Lazy<Integer> arg$1, final Lazy<TDiagnostic> arg$2, final Lazy<String/*<Character>*/> arg$3
  ) {
    return IShow_Diagnostic.showsPrec(arg$1, arg$2.call(), arg$3.call());
  }
  @Override final public String/*<Character>*/ ƒdisplay(final Lazy<TDiagnostic> arg$1) {
    return IShow_Diagnostic.display(arg$1.call());
  }
  @Override final public String/*<Character>*/ ƒshow(final Lazy<TDiagnostic> arg$1) {
    return IShow_Diagnostic.show(arg$1.call());
  }
  @Override final public PreludeBase.TList<Character> ƒshowChars(final Lazy<TDiagnostic> arg$1) {
    return IShow_Diagnostic.showChars(arg$1.call());
  }
  final public static String/*<Character>*/ showsub(final TDiagnostic arg$1) {
    final String/*<Character>*/ a4$17846 = arg$1.mem$message.call();
    final String/*<Character>*/ a3$17845 = arg$1.mem$source.call();
    final short a2$17844 = (short)arg$1.mem$severity.call();
    final Range.TRange a1$17843 = arg$1.mem$range.call();
    return ("(" + (((((((("Diagnostic" + " ") + Range.IShow_Range.showsub(a1$17843)) + " ") + IShow_DiagnosticSeverity.showsub(
              a2$17844
            )) + " ") + PreludeText.IShow_String.showsub(a3$17845)) + " ") + PreludeText.IShow_String.showsub(
              a4$17846
            ))) + ")";
  }
  final public static String/*<Character>*/ showList(
    final PreludeBase.TList<TDiagnostic> arg$1, final String/*<Character>*/ arg$2
  ) {
    return "[" + (PreludeText.joined(
              Thunk.<String/*<Character>*/>lazy(", "),
              PreludeList.<String/*<Character>*/, TDiagnostic>map(
                    (Func.U<TDiagnostic, String/*<Character>*/>)((final Lazy<TDiagnostic> η$19079) -> Thunk.<
                          String/*<Character>*/
                        >shared((Lazy<String/*<Character>*/>)(() -> IShow_Diagnostic.show(η$19079.call())))),
                    arg$1
                  )
            ).call() + ("]" + arg$2));
  }
  final public static String/*<Character>*/ showsPrec(
    final Lazy<Integer> arg$1, final TDiagnostic arg$2, final String/*<Character>*/ arg$3
  ) {
    return IShow_Diagnostic.show(arg$2) + arg$3;
  }
  final public static String/*<Character>*/ display(final TDiagnostic arg$1) {
    return IShow_Diagnostic.show(arg$1);
  }
  final public static String/*<Character>*/ show(final TDiagnostic arg$1) {
    final String/*<Character>*/ a4$17841 = arg$1.mem$message.call();
    final String/*<Character>*/ a3$17840 = arg$1.mem$source.call();
    final short a2$17839 = (short)arg$1.mem$severity.call();
    final Range.TRange a1$17838 = arg$1.mem$range.call();
    return ((((((("Diagnostic" + " ") + Range.IShow_Range.showsub(a1$17838)) + " ") + IShow_DiagnosticSeverity.showsub(
              a2$17839
            )) + " ") + PreludeText.IShow_String.showsub(a3$17840)) + " ") + PreludeText.IShow_String.showsub(
              a4$17841
            );
  }
  final public static PreludeBase.TList<Character> showChars(final TDiagnostic arg$1) {
    return PreludeList.IListView_StringJ.<Character>toList(IShow_Diagnostic.show(arg$1));
  }
}
final public static class IShow_DiagnosticSeverity implements PreludeText.CShow<Short> {
  public IShow_DiagnosticSeverity() {}
  final public static IShow_DiagnosticSeverity it = new IShow_DiagnosticSeverity();
  @Override final public String/*<Character>*/ ƒshowsub(final Lazy<Short> arg$1) {
    return IShow_DiagnosticSeverity.showsub((short)arg$1.call());
  }
  @Override final public String/*<Character>*/ ƒshowList(
    final Lazy<PreludeBase.TList<Short>> arg$1, final Lazy<String/*<Character>*/> arg$2
  ) {
    return IShow_DiagnosticSeverity.showList(arg$1.call(), arg$2.call());
  }
  @Override final public String/*<Character>*/ ƒshowsPrec(
    final Lazy<Integer> arg$1, final Lazy<Short> arg$2, final Lazy<String/*<Character>*/> arg$3
  ) {
    return IShow_DiagnosticSeverity.showsPrec(arg$1, (short)arg$2.call(), arg$3.call());
  }
  @Override final public String/*<Character>*/ ƒdisplay(final Lazy<Short> arg$1) {
    return IShow_DiagnosticSeverity.display((short)arg$1.call());
  }
  @Override final public String/*<Character>*/ ƒshow(final Lazy<Short> arg$1) {
    return IShow_DiagnosticSeverity.show((short)arg$1.call());
  }
  @Override final public PreludeBase.TList<Character> ƒshowChars(final Lazy<Short> arg$1) {
    return IShow_DiagnosticSeverity.showChars((short)arg$1.call());
  }
  final public static String/*<Character>*/ showsub(final short arg$1) {
    if (arg$1 == TDiagnosticSeverity.ERROR) {
      return "ERROR";
    }
    if (arg$1 == TDiagnosticSeverity.WARNING) {
      return "WARNING";
    }
    if (arg$1 == TDiagnosticSeverity.INFORMATION) {
      return "INFORMATION";
    }
    assert arg$1 == TDiagnosticSeverity.HINT;
    return "HINT";
  }
  final public static String/*<Character>*/ showList(final PreludeBase.TList<Short> arg$1, final String/*<Character>*/ arg$2) {
    return "[" + (PreludeText.joined(
              Thunk.<String/*<Character>*/>lazy(", "),
              PreludeList.<String/*<Character>*/, Short>map(
                    (Func.U<Short, String/*<Character>*/>)((final Lazy<Short> η$19093) -> Thunk.<
                          String/*<Character>*/
                        >shared((Lazy<String/*<Character>*/>)(() -> IShow_DiagnosticSeverity.show((short)η$19093.call())))),
                    arg$1
                  )
            ).call() + ("]" + arg$2));
  }
  final public static String/*<Character>*/ showsPrec(
    final Lazy<Integer> arg$1, final short arg$2, final String/*<Character>*/ arg$3
  ) {
    return IShow_DiagnosticSeverity.show(arg$2) + arg$3;
  }
  final public static String/*<Character>*/ display(final short arg$1) {
    return IShow_DiagnosticSeverity.show(arg$1);
  }
  final public static String/*<Character>*/ show(final short arg$1) {
    if (arg$1 == TDiagnosticSeverity.ERROR) {
      return "ERROR";
    }
    if (arg$1 == TDiagnosticSeverity.WARNING) {
      return "WARNING";
    }
    if (arg$1 == TDiagnosticSeverity.INFORMATION) {
      return "INFORMATION";
    }
    assert arg$1 == TDiagnosticSeverity.HINT;
    return "HINT";
  }
  final public static PreludeBase.TList<Character> showChars(final short arg$1) {
    return PreludeList.IListView_StringJ.<Character>toList(IShow_DiagnosticSeverity.show(arg$1));
  }
}
final public static class IEq_Diagnostic implements PreludeBase.CEq<TDiagnostic> {
  public IEq_Diagnostic() {}
  final public static IEq_Diagnostic it = new IEq_Diagnostic();
  @Override final public int ƒhashCode(final Lazy<TDiagnostic> arg$1) {
    return IEq_Diagnostic.hashCode(arg$1.call());
  }
  @Override final public boolean ƒ$excl$eq(final Lazy<TDiagnostic> arg$1, final Lazy<TDiagnostic> arg$2) {
    return IEq_Diagnostic.$excl$eq(arg$1.call(), arg$2.call());
  }
  @Override final public boolean ƒ$eq$eq(final Lazy<TDiagnostic> arg$1, final Lazy<TDiagnostic> arg$2) {
    return IEq_Diagnostic.$eq$eq(arg$1.call(), arg$2.call());
  }
  final public static int hashCode(final TDiagnostic arg$1) {
    final String/*<Character>*/ a4$17836 = arg$1.mem$message.call();
    final String/*<Character>*/ a3$17835 = arg$1.mem$source.call();
    final short a2$17834 = (short)arg$1.mem$severity.call();
    final Range.TRange a1$17833 = arg$1.mem$range.call();
    return (31 * ((31 * ((31 * ((31 * ((31 * 1) + RunTM.constructor(arg$1))) + Range.IEq_Range.hashCode(
              a1$17833
            ))) + IEq_DiagnosticSeverity.hashCode(a2$17834))) + a3$17835.hashCode())) + a4$17836
        .hashCode();
  }
  final public static boolean $excl$eq(final TDiagnostic arg$1, final TDiagnostic arg$2) {
    if (IEq_Diagnostic.$eq$eq(arg$1, arg$2)) {
      return false;
    }
    else {
      return true;
    }
  }
  final public static boolean $eq$eq(final TDiagnostic arg$1, final TDiagnostic arg$2) {
    final String/*<Character>*/ µ$$17908 = arg$1.mem$message.call();
    final String/*<Character>*/ µ$$17907 = arg$1.mem$source.call();
    final short µ$$17906 = (short)arg$1.mem$severity.call();
    final Range.TRange µ$$17905 = arg$1.mem$range.call();
    final String/*<Character>*/ µ$$17912 = arg$2.mem$message.call();
    final String/*<Character>*/ µ$$17911 = arg$2.mem$source.call();
    final short µ$$17910 = (short)arg$2.mem$severity.call();
    final Range.TRange µ$$17909 = arg$2.mem$range.call();
    return Range.IEq_Range.$eq$eq(µ$$17905, µ$$17909) && (IEq_DiagnosticSeverity.$eq$eq(
              µ$$17906, µ$$17910
            ) && (µ$$17907.equals(µ$$17911) && µ$$17908.equals(µ$$17912)));
  }
}
final public static class IEq_DiagnosticSeverity implements PreludeBase.CEq<Short> {
  public IEq_DiagnosticSeverity() {}
  final public static IEq_DiagnosticSeverity it = new IEq_DiagnosticSeverity();
  @Override final public int ƒhashCode(final Lazy<Short> arg$1) {
    return IEq_DiagnosticSeverity.hashCode((short)arg$1.call());
  }
  @Override final public boolean ƒ$excl$eq(final Lazy<Short> arg$1, final Lazy<Short> arg$2) {
    return IEq_DiagnosticSeverity.$excl$eq((short)arg$1.call(), (short)arg$2.call());
  }
  @Override final public boolean ƒ$eq$eq(final Lazy<Short> arg$1, final Lazy<Short> arg$2) {
    return IEq_DiagnosticSeverity.$eq$eq((short)arg$1.call(), (short)arg$2.call());
  }
  final public static int hashCode(final short arg$1) {
    if (arg$1 == TDiagnosticSeverity.ERROR) {
      return (31 * 1) + RunTM.constructor(arg$1);
    }
    if (arg$1 == TDiagnosticSeverity.WARNING) {
      return (31 * 1) + RunTM.constructor(arg$1);
    }
    if (arg$1 == TDiagnosticSeverity.INFORMATION) {
      return (31 * 1) + RunTM.constructor(arg$1);
    }
    assert arg$1 == TDiagnosticSeverity.HINT;
    return (31 * 1) + RunTM.constructor(arg$1);
  }
  final public static boolean $excl$eq(final short arg$1, final short arg$2) {
    if (IEq_DiagnosticSeverity.$eq$eq(arg$1, arg$2)) {
      return false;
    }
    else {
      return true;
    }
  }
  final public static boolean $eq$eq(final short arg$1, final short arg$2) {
    if (RunTM.constructor(arg$1) == RunTM.constructor(arg$2)) {
      return true;
    }
    else {
      return false;
    }
  }
}
final public static class TDiagnostic implements frege.runtime.Value, Lazy<TDiagnostic> {
  private TDiagnostic(
    final Lazy<Range.TRange> arg$1, final Lazy<Short> arg$2, final Lazy<String/*<Character>*/> arg$3,
    final Lazy<String/*<Character>*/> arg$4
  ) {
    mem$range = Thunk.<Range.TRange>shared(arg$1);
    mem$severity = Thunk.<Short>shared(arg$2);
    mem$source = Thunk.<String/*<Character>*/>shared(arg$3);
    mem$message = Thunk.<String/*<Character>*/>shared(arg$4);
  }
  final public int constructor() {
    return 0;
  }
  final public static TDiagnostic mk(
    final Lazy<Range.TRange> arg$1, final Lazy<Short> arg$2, final Lazy<String/*<Character>*/> arg$3,
    final Lazy<String/*<Character>*/> arg$4
  ) {
    return new TDiagnostic(arg$1, arg$2, arg$3, arg$4);
  }
  final public Lazy<Range.TRange> mem$range  ;
  final public Lazy<Short> mem$severity  ;
  final public Lazy<String/*<Character>*/> mem$source  ;
  final public Lazy<String/*<Character>*/> mem$message  ;
  final public TDiagnostic call() {
    return this;
  }
  final public boolean isShared() {
    return true;
  }
  final public Thunk<TDiagnostic> asThunk() {
    return null;
  }
  @SuppressWarnings("unchecked") final public TDiagnostic simsalabim() {
    return (TDiagnostic)this;
  }
  final public static TDiagnostic upd$source(final TDiagnostic arg$1, final Lazy<String/*<Character>*/> arg$2) {
    return TDiagnostic.mk(arg$1.mem$range, arg$1.mem$severity, arg$2, arg$1.mem$message);
  }
  final public static TDiagnostic upd$range(final TDiagnostic arg$1, final Lazy<Range.TRange> arg$2) {
    return TDiagnostic.mk(arg$2, arg$1.mem$severity, arg$1.mem$source, arg$1.mem$message);
  }
  final public static TDiagnostic upd$severity(final TDiagnostic arg$1, final Lazy<Short> arg$2) {
    return TDiagnostic.mk(arg$1.mem$range, arg$2, arg$1.mem$source, arg$1.mem$message);
  }
  final public static String/*<Character>*/ source(final TDiagnostic arg$1) {
    final String/*<Character>*/ a3$17763 = arg$1.mem$source.call();
    return a3$17763;
  }
  final public static TDiagnostic upd$message(final TDiagnostic arg$1, final Lazy<String/*<Character>*/> arg$2) {
    return TDiagnostic.mk(arg$1.mem$range, arg$1.mem$severity, arg$1.mem$source, arg$2);
  }
  final public static Range.TRange range(final TDiagnostic arg$1) {
    final Range.TRange a1$17725 = arg$1.mem$range.call();
    return a1$17725;
  }
  final public static short severity(final TDiagnostic arg$1) {
    final short a2$17744 = (short)arg$1.mem$severity.call();
    return a2$17744;
  }
  final public static <α> boolean has$source(final Lazy<α> arg$1) {
    return true;
  }
  final public static <α> boolean has$range(final Lazy<α> arg$1) {
    return true;
  }
  final public static <α> boolean has$severity(final Lazy<α> arg$1) {
    return true;
  }
  final public static TDiagnostic chg$severity(final TDiagnostic arg$1, final Lazy<Func.U<Short, Short>> arg$2) {
    return TDiagnostic.mk(
              arg$1.mem$range, Thunk.<Short>nested((Lazy<Lazy<Short>>)(() -> arg$2.call().apply(arg$1.mem$severity))),
              arg$1.mem$source, arg$1.mem$message
            );
  }
  final public static TDiagnostic chg$source(
    final TDiagnostic arg$1, final Lazy<Func.U<String/*<Character>*/, String/*<Character>*/>> arg$2
  ) {
    return TDiagnostic.mk(
              arg$1.mem$range, arg$1.mem$severity,
              Thunk.<String/*<Character>*/>nested(
                    (Lazy<Lazy<String/*<Character>*/>>)(() -> arg$2.call().apply(arg$1.mem$source))
                  ),
              arg$1.mem$message
            );
  }
  final public static TDiagnostic chg$message(
    final TDiagnostic arg$1, final Lazy<Func.U<String/*<Character>*/, String/*<Character>*/>> arg$2
  ) {
    return TDiagnostic.mk(
              arg$1.mem$range, arg$1.mem$severity, arg$1.mem$source,
              Thunk.<String/*<Character>*/>nested(
                    (Lazy<Lazy<String/*<Character>*/>>)(() -> arg$2.call().apply(arg$1.mem$message))
                  )
            );
  }
  final public static TDiagnostic chg$range(final TDiagnostic arg$1, final Lazy<Func.U<Range.TRange, Range.TRange>> arg$2) {
    return TDiagnostic.mk(
              Thunk.<Range.TRange>nested((Lazy<Lazy<Range.TRange>>)(() -> arg$2.call().apply(arg$1.mem$range))),
              arg$1.mem$severity, arg$1.mem$source, arg$1.mem$message
            );
  }
  final public static <α> boolean has$message(final Lazy<α> arg$1) {
    return true;
  }
  final public static String/*<Character>*/ message(final TDiagnostic arg$1) {
    final String/*<Character>*/ a4$17710 = arg$1.mem$message.call();
    return a4$17710;
  }
}
final public static class TDiagnosticSeverity  {
  final public static short WARNING = 1;
  final public static short HINT = 3;
  final public static short ERROR = 0;
  final public static short INFORMATION = 2;
}
final public static Range.TRange tokensToRange(final PreludeBase.TList<Tokens.TToken> arg$1) {
  final PreludeBase.TList.DList<Tokens.TToken> $19120 = arg$1.asList();
  if ($19120 != null) {
    return Range.TRange.mk(
              Position.TPosition.mk(Thunk.<Integer>lazy(1), Thunk.<Integer>lazy(0)),
              Position.TPosition.mk(Thunk.<Integer>lazy(2), Thunk.<Integer>lazy(0))
            );
  }
  final PreludeBase.TList.DCons<Tokens.TToken> $19121 = arg$1.asCons();
  if ($19121 != null) {
    final PreludeBase.TList<Tokens.TToken> $19122 = $19121.mem2.call();
    final PreludeBase.TList.DList<Tokens.TToken> $19123 = $19122.asList();
    if ($19123 != null) {
      final Tokens.TToken tk$17779 = $19121.mem1.call();
      return Range.tokenToRange(tk$17779);
    }
  }
  final Lazy<Tokens.TToken> endToken$17782 = Thunk.<Tokens.TToken>shared(
        (Lazy<Tokens.TToken>)(() -> PreludeList.<Tokens.TToken>last(arg$1))
      );
  final Lazy<Tokens.TToken> startToken$17781 = Thunk.<Tokens.TToken>shared(
        (Lazy<Tokens.TToken>)(() -> PreludeList.IListView_$lbrack$rbrack.<Tokens.TToken>head(
                  arg$1
                ))
      );
  return Range.TRange.mk(
            Position.TPosition.mk(
                  Thunk.<Integer>lazy(Tokens.TToken.line(startToken$17781.call())),
                  Thunk.<Integer>lazy(Tokens.TToken.col(startToken$17781.call()))
                ),
            Position.TPosition.mk(
                  Thunk.<Integer>lazy(Tokens.TToken.line(endToken$17782.call())),
                  Thunk.<Integer>shared(
                        (Lazy<Integer>)(() -> Tokens.TToken.col(endToken$17782.call()) + Tokens.TToken.value(
                                  endToken$17782.call()
                                ).length())
                      )
                )
          );
}
final public static PreludeBase.TList<Tokens.TToken> posToTokens(
  final PreludeBase.TList<Positions.TPosition> arg$1, final Lazy<Global.TGlobal> arg$2
) {
  final PreludeBase.TList.DCons<Positions.TPosition> $19125 = arg$1.asCons();
  if ($19125 != null) {
    final Positions.TPosition µ$$17903 = $19125.mem1.call();
    return PreludeList.IListMonoid_$lbrack$rbrack.<Tokens.TToken>$plus$plus(
              Global.tokens(µ$$17903, arg$2),
              Thunk.<PreludeBase.TList<Tokens.TToken>>shared(
                    (Lazy<PreludeBase.TList<Tokens.TToken>>)(() -> Diagnostic.posToTokens(
                              $19125.mem2.call(), arg$2
                            ))
                  )
            );
  }
  final PreludeBase.TList.DList<Positions.TPosition> $19127 = arg$1.asList();
  assert $19127 != null;
  return PreludeBase.TList.DList.<Tokens.TToken>mk();
}
final public static Lazy<Func.U<RealWorld, Short>> $main = Thunk.<Func.U<RealWorld, Short>>shared(
      (Lazy<Func.U<RealWorld, Short>>)(() -> {
            return (Func.U<RealWorld, Short>)((final Lazy<RealWorld> arg$19128) -> {
                      final Global.TGlobal v2056$18660 = CompileGlobal.standardCompileGlobal
                      .call().apply(arg$19128).call();
                      final Func.U<RealWorld, Global.TGlobal> v2053$18679 = CompileNormalMode.compile(
                            Thunk.<String/*<Character>*/>lazy(
                                  "module FaultyFregeTest where\n\nsimplyString s = s\n\nerr1 = (simplyString 42) ++ \"test\""
                                ),
                            v2056$18660
                          );
                      final Global.TGlobal v2056$18682 = v2053$18679.apply(arg$19128)
                      .call();
                      final Func.U<RealWorld, Short> v4793$18704 = Prelude.<String/*<Character>*/>println(
                            PreludeText.IShow_String.it, Global.TSubSt.code(Global.TGlobal.sub(v2056$18682)).toString()
                          );
                      final short v4796$18706 = (short)v4793$18704.apply(arg$19128).call();
                      final Func.U<RealWorld, Short> v4797$18707 = ((Func.U<RealWorld, Short>)((
                        final Lazy<RealWorld> arg$19135
                      ) -> {
                            final short v4796$18737 = (short)Func.<RealWorld, Short>coerceU(
                                  PreludeMonad.<Func.U<RealWorld, ?>, Global.TMessage, Short, PreludeBase.TList<?>>$for(
                                        PreludeMonad.IMonad_ST.<RealWorld>mk(),
                                        PreludeList.IListSource_$lbrack$rbrack.<PreludeBase.TList<?>>mk(),
                                        Thunk.<Kind.U<PreludeBase.TList<?>, Global.TMessage>>lazy(
                                              (Kind.U<PreludeBase.TList<?>, Global.TMessage>)Global.TSubSt.messages(
                                                    Global.TGlobal.sub(v2056$18682)
                                                  )
                                            ),
                                        (Func.U<Global.TMessage, Kind.U<Func.U<RealWorld, ?>, Short>>)((
                                          final Lazy<Global.TMessage> η$19134
                                        ) -> Thunk.<Kind.U<Func.U<RealWorld, ?>, Short>>shared(
                                                  (Lazy<Kind.U<Func.U<RealWorld, ?>, Short>>)(() -> (Kind.U<
                                                        Func.U<RealWorld, ?>, Short
                                                      >)Thunk.<Func.U<RealWorld, Short>>shared(
                                                            (Lazy<Func.U<RealWorld, Short>>)(() -> Prelude.<
                                                                  Global.TMessage
                                                                >println(CompileNormalMode.IShow_Message.it, η$19134.call()))
                                                          ).call())
                                                ))
                                      )
                                ).apply(arg$19135).call();
                            final Func.U<RealWorld, Short> v4797$18738 = Thunk.<Func.U<RealWorld, Short>>shared(
                                  (Lazy<Func.U<RealWorld, Short>>)(() -> Func.<RealWorld, Short>coerceU(
                                            Thunk.<Kind.U<Func.U<RealWorld, ?>, Short>>shared(
                                                  (Lazy<Kind.U<Func.U<RealWorld, ?>, Short>>)(() -> PreludeMonad.<
                                                        Func.U<RealWorld, ?>, Tokens.TToken, Short,
                                                        PreludeBase.TList<?>
                                                      >$for(
                                                            PreludeMonad.IMonad_ST.<RealWorld>mk(),
                                                            PreludeList.IListSource_$lbrack$rbrack.<
                                                              PreludeBase.TList<?>
                                                            >mk(),
                                                            Thunk.<Kind.U<PreludeBase.TList<?>, Tokens.TToken>>shared(
                                                                  (Lazy<Kind.U<
                                                                    PreludeBase.TList<?>, Tokens.TToken
                                                                  >>)(() -> (Kind.U<PreludeBase.TList<?>, Tokens.TToken>)Thunk.<
                                                                        PreludeBase.TList<
                                                                          Tokens.TToken
                                                                        >
                                                                      >shared(
                                                                            (Lazy<PreludeBase.TList<
                                                                              Tokens.TToken
                                                                            >>)(() -> Diagnostic.posToTokens(
                                                                                      PreludeList.<
                                                                                        Positions.TPosition,
                                                                                        Global.TMessage
                                                                                      >map(
                                                                                            (Func.U<
                                                                                              Global.TMessage,
                                                                                              Positions.TPosition
                                                                                            >)((
                                                                                              final Lazy<Global.TMessage> η$19132
                                                                                            ) -> Global.TMessage.pos(
                                                                                                      η$19132
                                                                                                      .call()
                                                                                                    )),
                                                                                            Global.TSubSt.messages(
                                                                                                  Global.TGlobal.sub(
                                                                                                        v2056$18682
                                                                                                      )
                                                                                                )
                                                                                          ),
                                                                                      v2056$18682
                                                                                    ))
                                                                          ).call())
                                                                ),
                                                            (Func.U<Tokens.TToken, Kind.U<Func.U<RealWorld, ?>, Short>>)((
                                                              final Lazy<Tokens.TToken> η$19133
                                                            ) -> Thunk.<Kind.U<Func.U<RealWorld, ?>, Short>>shared(
                                                                      (Lazy<Kind.U<Func.U<RealWorld, ?>, Short>>)(() -> (Kind.U<
                                                                            Func.U<RealWorld, ?>, Short
                                                                          >)Thunk.<Func.U<RealWorld, Short>>shared(
                                                                                (Lazy<Func.U<
                                                                                  RealWorld, Short
                                                                                >>)(() -> Prelude.<
                                                                                      Tokens.TToken
                                                                                    >println(
                                                                                          Tokens.IShow_Token.it,
                                                                                          η$19133
                                                                                          .call()
                                                                                        ))
                                                                              ).call())
                                                                    ))
                                                          ))
                                                ).call()
                                          ))
                                ).call();
                            return Thunk.<Short>nested((Lazy<Lazy<Short>>)(() -> v4797$18738.apply(arg$19135)));
                          })).call();
                      return Thunk.<Short>nested((Lazy<Lazy<Short>>)(() -> v4797$18707.apply(arg$19128)));
                    });
          })
    );
final public static short fromCompilerSeverity(final short arg$1) {
  if (arg$1 == Global.TSeverity.ERROR) {
    return TDiagnosticSeverity.ERROR;
  }
  if (arg$1 == Global.TSeverity.WARNING) {
    return TDiagnosticSeverity.WARNING;
  }
  assert arg$1 == Global.TSeverity.HINT;
  return TDiagnosticSeverity.HINT;
}
final public static State.TState<Global.TGlobal, Range.TRange> createRangeFromPos(final Positions.TPosition arg$1) {
  return State.TState.<Global.TGlobal, Range.TRange>mk(
            (Func.U<Global.TGlobal, PreludeBase.TTuple2<Range.TRange, Global.TGlobal>>)((
              final Lazy<Global.TGlobal> arg$19141
            ) -> {
                  final State.TState<Global.TGlobal, Range.TRange> $19142 = State.IMonad_State.<
                    Global.TGlobal, Range.TRange
                  >pure(Diagnostic.tokensToRange(Global.tokens(arg$1, arg$19141)));
                  final Func.U<Global.TGlobal, PreludeBase.TTuple2<Range.TRange, Global.TGlobal>> v7693$19011 =
                  $19142.mem$fun;
                  return Thunk.<PreludeBase.TTuple2<Range.TRange, Global.TGlobal>>nested(
                            (Lazy<Lazy<PreludeBase.TTuple2<Range.TRange, Global.TGlobal>>>)(() -> v7693$19011
                                .apply(arg$19141))
                          );
                })
          );
}
final public static State.TState<Global.TGlobal, TDiagnostic> createDiagnosticFromMessage(
  final Global.TMessage arg$1
) {
  final State.TState<Global.TGlobal, Range.TRange> $19144 = Diagnostic.createRangeFromPos(
        Global.TMessage.pos(arg$1)
      );
  final Func.U<Global.TGlobal, PreludeBase.TTuple2<Range.TRange, Global.TGlobal>> v7688$18973 =
  $19144.mem$fun;
  return State.TState.<Global.TGlobal, TDiagnostic>mk(
            (Func.U<Global.TGlobal, PreludeBase.TTuple2<TDiagnostic, Global.TGlobal>>)((
              final Lazy<Global.TGlobal> arg$19146
            ) -> {
                  final PreludeBase.TTuple2<Range.TRange, Global.TGlobal> $19147 = v7688$18973
                  .apply(arg$19146).call();
                  final State.TState<Global.TGlobal, TDiagnostic> $19148 = State.IMonad_State.<
                    Global.TGlobal, TDiagnostic
                  >pure(
                        TDiagnostic.mk(
                              $19147.mem1,
                              Thunk.<Short>shared(
                                    (Lazy<Short>)(() -> Diagnostic.fromCompilerSeverity(
                                              Global.TMessage.level(arg$1)
                                            ))
                                  ),
                              Thunk.<String/*<Character>*/>lazy("frege compiler"),
                              Thunk.<String/*<Character>*/>lazy(Global.TMessage.text(arg$1))
                            )
                      );
                  final Func.U<Global.TGlobal, PreludeBase.TTuple2<TDiagnostic, Global.TGlobal>> v7693$18978 =
                  $19148.mem$fun;
                  return Thunk.<PreludeBase.TTuple2<TDiagnostic, Global.TGlobal>>nested(
                            (Lazy<Lazy<PreludeBase.TTuple2<TDiagnostic, Global.TGlobal>>>)(() -> v7693$18978
                                .apply($19147.mem2))
                          );
                })
          );
}
final public static State.TState<Global.TGlobal, PreludeBase.TList<TDiagnostic>> extractDiagnostics =
State.TState.<Global.TGlobal, PreludeBase.TList<TDiagnostic>>mk(
      (Func.U<Global.TGlobal, PreludeBase.TTuple2<PreludeBase.TList<TDiagnostic>, Global.TGlobal>>)((
        final Lazy<Global.TGlobal> arg$19150
      ) -> {
            final Global.TGlobal v7690$18940 = arg$19150.call();
            final State.TState<Global.TGlobal, PreludeBase.TList<TDiagnostic>> $19153 =
            State.TState.<Global.TGlobal, PreludeBase.TList<TDiagnostic>>coerce(
                  PreludeMonad.<State.TState<Global.TGlobal, ?>, TDiagnostic>sequence(
                        State.IMonad_State.<Global.TGlobal>mk(), State.IMonad_State.<Global.TGlobal>mk(),
                        PreludeMonad.IFunctor_$lbrack$rbrack.<Global.TMessage, State.TState<Global.TGlobal, TDiagnostic>>fmap(
                              (Func.U<Global.TMessage, State.TState<Global.TGlobal, TDiagnostic>>)((
                                final Lazy<Global.TMessage> η$19152
                              ) -> Thunk.<State.TState<Global.TGlobal, TDiagnostic>>shared(
                                        (Lazy<State.TState<
                                          Global.TGlobal, TDiagnostic
                                        >>)(() -> Diagnostic.createDiagnosticFromMessage(
                                                  η$19152.call()
                                                ))
                                      )),
                              Global.TSubSt.messages(Global.TGlobal.sub(v7690$18940))
                            ).<Kind.U<State.TState<Global.TGlobal, ?>, TDiagnostic>>simsalabim()
                      )
                );
            final Func.U<Global.TGlobal, PreludeBase.TTuple2<PreludeBase.TList<TDiagnostic>, Global.TGlobal>> v7693$18943 =
            $19153.mem$fun;
            return Thunk.<PreludeBase.TTuple2<PreludeBase.TList<TDiagnostic>, Global.TGlobal>>nested(
                      (Lazy<Lazy<PreludeBase.TTuple2<PreludeBase.TList<TDiagnostic>, Global.TGlobal>>>)(() -> v7693$18943
                          .apply(v7690$18940))
                    );
          })
    );
final public static PreludeBase.TList<TDiagnostic> getDiagnostics(final Lazy<Global.TGlobal> arg$1) {
  return State.<Global.TGlobal, PreludeBase.TList<TDiagnostic>>evalState(Diagnostic.extractDiagnostics, arg$1);
}
final public static Lazy<QuickCheckGen.TGen<
  QuickCheckProperty.TRose<QuickCheckProperty.TResult>
>> fregeLSPServerShouldMapSingleCompilerMessageToDiagnostics = Thunk.<
  QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>
>shared(
      (Lazy<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>)(() -> {
            return QuickCheckProperty.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>once(
                      new QuickCheckProperty.ITestable_Gen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>(
                        QuickCheckProperty.ITestable_Prop.it
                      ),
                      Thunk.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>shared(
                            (Lazy<QuickCheckGen.TGen<
                              QuickCheckProperty.TRose<QuickCheckProperty.TResult>
                            >>)(() -> QuickCheckProperty.<Boolean>morallyDubiousIOProperty(
                                      QuickCheckProperty.ITestable_Bool.it,
                                      (Func.U<RealWorld, Boolean>)((final Lazy<RealWorld> arg$19155) -> {
                                            final Global.TGlobal v2056$18773 = CompileGlobal.standardCompileGlobal
                                            .call().apply(arg$19155).call();
                                            final Func.U<RealWorld, Global.TGlobal> v2053$18792 =
                                            CompileNormalMode.compile(
                                                  Thunk.<String/*<Character>*/>lazy(
                                                        "module ch.fhnw.thga.FaultyFregeTest where\n\nimport Does.not.Exist"
                                                      ),
                                                  v2056$18773
                                                );
                                            final Global.TGlobal v2056$18795 = v2053$18792
                                            .apply(arg$19155).call();
                                            final Func.U<RealWorld, Boolean> v2057$18796 =
                                            PreludeMonad.IMonad_ST.<RealWorld, Boolean>pure(
                                                  Thunk.<Boolean>shared(
                                                        (Lazy<Boolean>)(() -> PreludeBase.IEq_$lbrack$rbrack.<
                                                              TDiagnostic
                                                            >$eq$eq(
                                                                  IEq_Diagnostic.it,
                                                                  PreludeBase.TList.DCons.<
                                                                    TDiagnostic
                                                                  >mk(
                                                                        TDiagnostic.mk(
                                                                              Range.TRange.mk(
                                                                                    Position.TPosition.mk(
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                3
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                8
                                                                                              )
                                                                                        ),
                                                                                    Position.TPosition.mk(
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                3
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                22
                                                                                              )
                                                                                        )
                                                                                  ),
                                                                              Thunk.<Short>lazy(
                                                                                    TDiagnosticSeverity.ERROR
                                                                                  ),
                                                                              Thunk.<String/*<Character>*/>lazy(
                                                                                    "frege compiler"
                                                                                  ),
                                                                              Thunk.<String/*<Character>*/>lazy(
                                                                                    "Could not import module frege.does.not.Exist\n(java.lang.ClassNotFoundException: frege.does.not.Exist)"
                                                                                  )
                                                                            ),
                                                                        PreludeBase.TList.DList.<
                                                                          TDiagnostic
                                                                        >mk()
                                                                      ),
                                                                  Thunk.<PreludeBase.TList<TDiagnostic>>shared(
                                                                        (Lazy<PreludeBase.TList<
                                                                          TDiagnostic
                                                                        >>)(() -> Diagnostic.getDiagnostics(
                                                                                  v2056$18795
                                                                                ))
                                                                      )
                                                                ))
                                                      )
                                                );
                                            return Thunk.<Boolean>nested(
                                                      (Lazy<Lazy<Boolean>>)(() -> v2057$18796
                                                          .apply(arg$19155))
                                                    );
                                          })
                                    ))
                          )
                    );
          })
    );
final public static Lazy<QuickCheckGen.TGen<
  QuickCheckProperty.TRose<QuickCheckProperty.TResult>
>> fregeLSPServerShouldMapNoCompilerMessagesToEmptyArray = Thunk.<
  QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>
>shared(
      (Lazy<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>)(() -> {
            return QuickCheckProperty.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>once(
                      new QuickCheckProperty.ITestable_Gen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>(
                        QuickCheckProperty.ITestable_Prop.it
                      ),
                      Thunk.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>shared(
                            (Lazy<QuickCheckGen.TGen<
                              QuickCheckProperty.TRose<QuickCheckProperty.TResult>
                            >>)(() -> QuickCheckProperty.<Boolean>morallyDubiousIOProperty(
                                      QuickCheckProperty.ITestable_Bool.it,
                                      (Func.U<RealWorld, Boolean>)((final Lazy<RealWorld> arg$19160) -> {
                                            final Global.TGlobal v2056$18889 = CompileGlobal.standardCompileGlobal
                                            .call().apply(arg$19160).call();
                                            final Func.U<RealWorld, Global.TGlobal> v2053$18908 =
                                            CompileNormalMode.compile(
                                                  Thunk.<String/*<Character>*/>shared(
                                                        (Lazy<String/*
                                                          <Character>
                                                        */>)(() -> "module CorrectFregeTest where\n\n" + "ok = 42 + 42")
                                                      ),
                                                  v2056$18889
                                                );
                                            final Global.TGlobal v2056$18911 = v2053$18908
                                            .apply(arg$19160).call();
                                            final Func.U<RealWorld, Boolean> v2057$18912 =
                                            PreludeMonad.IMonad_ST.<RealWorld, Boolean>pure(
                                                  Thunk.<Boolean>shared(
                                                        (Lazy<Boolean>)(() -> PreludeBase.IEq_$lbrack$rbrack.<
                                                              TDiagnostic
                                                            >$eq$eq(
                                                                  IEq_Diagnostic.it, PreludeBase.TList.DList.<TDiagnostic>mk(),
                                                                  Thunk.<PreludeBase.TList<TDiagnostic>>shared(
                                                                        (Lazy<PreludeBase.TList<
                                                                          TDiagnostic
                                                                        >>)(() -> Diagnostic.getDiagnostics(
                                                                                  v2056$18911
                                                                                ))
                                                                      )
                                                                ))
                                                      )
                                                );
                                            return Thunk.<Boolean>nested(
                                                      (Lazy<Lazy<Boolean>>)(() -> v2057$18912
                                                          .apply(arg$19160))
                                                    );
                                          })
                                    ))
                          )
                    );
          })
    );
final public static Lazy<QuickCheckGen.TGen<
  QuickCheckProperty.TRose<QuickCheckProperty.TResult>
>> fregeLSPServerShouldMapMultipleCompilerMessageToDiagnostics = Thunk.<
  QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>
>shared(
      (Lazy<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>)(() -> {
            return QuickCheckProperty.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>once(
                      new QuickCheckProperty.ITestable_Gen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>(
                        QuickCheckProperty.ITestable_Prop.it
                      ),
                      Thunk.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>shared(
                            (Lazy<QuickCheckGen.TGen<
                              QuickCheckProperty.TRose<QuickCheckProperty.TResult>
                            >>)(() -> QuickCheckProperty.<Boolean>morallyDubiousIOProperty(
                                      QuickCheckProperty.ITestable_Bool.it,
                                      (Func.U<RealWorld, Boolean>)((final Lazy<RealWorld> arg$19165) -> {
                                            final Global.TGlobal v2056$18831 = CompileGlobal.standardCompileGlobal
                                            .call().apply(arg$19165).call();
                                            final Func.U<RealWorld, Global.TGlobal> v2053$18850 =
                                            CompileNormalMode.compile(
                                                  Thunk.<String/*<Character>*/>lazy(
                                                        "module ch.fhnw.thga.FaultyFregeTest where\n\nerr1 = do\n  x = 42\n\nerr2 = [ 22.0 ] ++ \"42\"\n\nerr3 = 42 + \"42\""
                                                      ),
                                                  v2056$18831
                                                );
                                            final Global.TGlobal v2056$18853 = v2053$18850
                                            .apply(arg$19165).call();
                                            final Func.U<RealWorld, Boolean> v2057$18854 =
                                            PreludeMonad.IMonad_ST.<RealWorld, Boolean>pure(
                                                  Thunk.<Boolean>shared(
                                                        (Lazy<Boolean>)(() -> PreludeBase.IEq_$lbrack$rbrack.<
                                                              TDiagnostic
                                                            >$eq$eq(
                                                                  IEq_Diagnostic.it,
                                                                  PreludeBase.TList.DCons.<
                                                                    TDiagnostic
                                                                  >mk(
                                                                        TDiagnostic.mk(
                                                                              Range.TRange.mk(
                                                                                    Position.TPosition.mk(
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                6
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                20
                                                                                              )
                                                                                        ),
                                                                                    Position.TPosition.mk(
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                6
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                24
                                                                                              )
                                                                                        )
                                                                                  ),
                                                                              Thunk.<Short>lazy(
                                                                                    TDiagnosticSeverity.ERROR
                                                                                  ),
                                                                              Thunk.<String/*<Character>*/>lazy(
                                                                                    "frege compiler"
                                                                                  ),
                                                                              Thunk.<String/*<Character>*/>lazy(
                                                                                    "type error in expression\n\"42\"\ntype is : String\nexpected: [t1]"
                                                                                  )
                                                                            ),
                                                                        PreludeBase.TList.DCons.<
                                                                          TDiagnostic
                                                                        >mk(
                                                                              TDiagnostic.mk(
                                                                                    Range.TRange.mk(
                                                                                          Position.TPosition.mk(
                                                                                                Thunk.<
                                                                                                  Integer
                                                                                                >lazy(
                                                                                                      8
                                                                                                    ),
                                                                                                Thunk.<
                                                                                                  Integer
                                                                                                >lazy(
                                                                                                      11
                                                                                                    )
                                                                                              ),
                                                                                          Position.TPosition.mk(
                                                                                                Thunk.<
                                                                                                  Integer
                                                                                                >lazy(
                                                                                                      8
                                                                                                    ),
                                                                                                Thunk.<
                                                                                                  Integer
                                                                                                >lazy(
                                                                                                      12
                                                                                                    )
                                                                                              )
                                                                                        ),
                                                                                    Thunk.<
                                                                                      Short
                                                                                    >lazy(
                                                                                          TDiagnosticSeverity.ERROR
                                                                                        ),
                                                                                    Thunk.<
                                                                                      String/*
                                                                                        <
                                                                                          Character
                                                                                        >
                                                                                      */
                                                                                    >lazy(
                                                                                          "frege compiler"
                                                                                        ),
                                                                                    Thunk.<
                                                                                      String/*
                                                                                        <
                                                                                          Character
                                                                                        >
                                                                                      */
                                                                                    >lazy(
                                                                                          "String is not an instance of Num"
                                                                                        )
                                                                                  ),
                                                                              PreludeBase.TList.DCons.<
                                                                                TDiagnostic
                                                                              >mk(
                                                                                    TDiagnostic.mk(
                                                                                          Range.TRange.mk(
                                                                                                Position.TPosition.mk(
                                                                                                      Thunk.<
                                                                                                        Integer
                                                                                                      >lazy(
                                                                                                            3
                                                                                                          ),
                                                                                                      Thunk.<
                                                                                                        Integer
                                                                                                      >lazy(
                                                                                                            8
                                                                                                          )
                                                                                                    ),
                                                                                                Position.TPosition.mk(
                                                                                                      Thunk.<
                                                                                                        Integer
                                                                                                      >lazy(
                                                                                                            3
                                                                                                          ),
                                                                                                      Thunk.<
                                                                                                        Integer
                                                                                                      >lazy(
                                                                                                            10
                                                                                                          )
                                                                                                    )
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Short
                                                                                          >lazy(
                                                                                                TDiagnosticSeverity.ERROR
                                                                                              ),
                                                                                          Thunk.<
                                                                                            String/*
                                                                                              <
                                                                                                Character
                                                                                              >
                                                                                            */
                                                                                          >lazy(
                                                                                                "frege compiler"
                                                                                              ),
                                                                                          Thunk.<
                                                                                            String/*
                                                                                              <
                                                                                                Character
                                                                                              >
                                                                                            */
                                                                                          >lazy(
                                                                                                "last statement in a monadic do block must not\nbe let decls"
                                                                                              )
                                                                                        ),
                                                                                    PreludeBase.TList.DList.<
                                                                                      TDiagnostic
                                                                                    >mk()
                                                                                  )
                                                                            )
                                                                      ),
                                                                  Thunk.<PreludeBase.TList<TDiagnostic>>shared(
                                                                        (Lazy<PreludeBase.TList<
                                                                          TDiagnostic
                                                                        >>)(() -> Diagnostic.getDiagnostics(
                                                                                  v2056$18853
                                                                                ))
                                                                      )
                                                                ))
                                                      )
                                                );
                                            return Thunk.<Boolean>nested(
                                                      (Lazy<Lazy<Boolean>>)(() -> v2057$18854
                                                          .apply(arg$19165))
                                                    );
                                          })
                                    ))
                          )
                    );
          })
    );

  public static void main(final java.lang.String[] argv) {
    try {
      frege.run.RunTM.argv = argv;
      
        PreludeBase.TST.<Short>performUnsafe($main
               .call()
          ).call();
      frege.runtime.Runtime.stdout.get().close();
      frege.runtime.Runtime.stderr.get().close();

    } finally { frege.run.Concurrent.shutDownIfExists(); }
  }
}
