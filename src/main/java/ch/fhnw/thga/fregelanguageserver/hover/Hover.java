/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.25.84
  from /Users/tricktron/github/master/frege-lsp-server/src/main/frege/ch/fhnw/thga/fregelanguageserver/hover/Hover.fr
  Do not edit this file! Instead, edit the source file and recompile.
*/

package ch.fhnw.thga.fregelanguageserver.hover;

import frege.run8.Func;
import frege.run8.Lazy;
import frege.run8.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import ch.fhnw.thga.fregelanguageserver.compile.CompileGlobal;
import ch.fhnw.thga.fregelanguageserver.compile.CompileNormalMode;
import ch.fhnw.thga.fregelanguageserver.compile.CompileOptions;
import ch.fhnw.thga.fregelanguageserver.types.Position;
import ch.fhnw.thga.fregelanguageserver.types.Range;
import frege.Prelude;
import frege.Version;
import frege.compiler.Classes;
import frege.compiler.Classtools;
import frege.compiler.GenMeta;
import frege.compiler.Javatypes;
import frege.compiler.Kinds;
import frege.compiler.Main;
import frege.compiler.Typecheck;
import frege.compiler.Utilities;
import frege.compiler.classes.Nice;
import frege.compiler.classes.QNameMatcher;
import frege.compiler.common.Annotate;
import frege.compiler.common.AnnotateG;
import frege.compiler.common.Binders;
import frege.compiler.common.CompilerOptions;
import frege.compiler.common.Desugar;
import frege.compiler.common.Errors;
import frege.compiler.common.ImpExp;
import frege.compiler.common.JavaName;
import frege.compiler.common.Mangle;
import frege.compiler.common.PatternCompiler;
import frege.compiler.common.Resolve;
import frege.compiler.common.Roman;
import frege.compiler.common.SymbolTable;
import frege.compiler.common.Trans;
import frege.compiler.common.Tuples;
import frege.compiler.common.Types;
import frege.compiler.common.UnAlias;
import frege.compiler.enums.CaseKind;
import frege.compiler.enums.Flags;
import frege.compiler.enums.Literals;
import frege.compiler.enums.RFlag;
import frege.compiler.enums.SymState;
import frege.compiler.enums.TokenID;
import frege.compiler.enums.Visibility;
import frege.compiler.gen.java.Bindings;
import frege.compiler.gen.java.Common;
import frege.compiler.gen.java.Constants;
import frege.compiler.gen.java.DataCode;
import frege.compiler.gen.java.InstanceCode;
import frege.compiler.gen.java.Instantiation;
import frege.compiler.gen.java.Match;
import frege.compiler.gen.java.MethodCall;
import frege.compiler.gen.java.PrettyJava;
import frege.compiler.gen.java.VarCode;
import frege.compiler.grammar.Frege;
import frege.compiler.grammar.Lexer;
import frege.compiler.instances.NiceExprS;
import frege.compiler.instances.Nicer;
import frege.compiler.instances.PositionedSName;
import frege.compiler.passes.Easy;
import frege.compiler.passes.Enter;
import frege.compiler.passes.Fields;
import frege.compiler.passes.Final;
import frege.compiler.passes.Fix;
import frege.compiler.passes.GenCode;
import frege.compiler.passes.GlobalLam;
import frege.compiler.passes.Imp;
import frege.compiler.passes.Instances;
import frege.compiler.passes.LetUnroll;
import frege.compiler.passes.Strict;
import frege.compiler.passes.Transdef;
import frege.compiler.passes.TypeAlias;
import frege.compiler.tc.Methods;
import frege.compiler.tc.Patterns;
import frege.compiler.tc.Util;
import frege.compiler.types.AbstractJava;
import frege.compiler.types.ConstructorField;
import frege.compiler.types.Expression;
import frege.compiler.types.External;
import frege.compiler.types.Global;
import frege.compiler.types.ImportDetails;
import frege.compiler.types.JNames;
import frege.compiler.types.NSNames;
import frege.compiler.types.Packs;
import frege.compiler.types.Positions;
import frege.compiler.types.QNames;
import frege.compiler.types.SNames;
import frege.compiler.types.SourceDefinitions;
import frege.compiler.types.Strictness;
import frege.compiler.types.Symbols;
import frege.compiler.types.Targets;
import frege.compiler.types.Tokens;
import frege.control.Category;
import frege.control.Concurrent;
import frege.control.Semigroupoid;
import frege.control.monad.State;
import frege.control.monad.trans.MonadIO;
import frege.control.monad.trans.MonadTrans;
import frege.data.Bits;
import frege.data.Char;
import frege.data.Foldable;
import frege.data.Graph;
import frege.data.List;
import frege.data.Monoid;
import frege.data.Traversable;
import frege.data.Tree;
import frege.data.TreeMap;
import frege.data.wrapper.Const;
import frege.data.wrapper.Dual;
import frege.data.wrapper.Endo;
import frege.data.wrapper.Identity;
import frege.data.wrapper.Num;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Net;
import frege.java.util.Regex;
import frege.java.util.Zip;
import frege.lib.Modules;
import frege.lib.PP;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeDecimal;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;
import frege.system.Random;
import frege.test.QuickCheck;
import frege.test.QuickCheckArbitrary;
import frege.test.QuickCheckException;
import frege.test.QuickCheckGen;
import frege.test.QuickCheckModifiers;
import frege.test.QuickCheckProperty;
import frege.test.QuickCheckState;
import frege.test.QuickCheckTest;
import frege.test.QuickCheckText;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="/Users/tricktron/github/master/frege-lsp-server/src/main/frege/ch/fhnw/thga/fregelanguageserver/hover/Hover.fr",
  time=1659972659116L, jmajor=11, jminor=-1,
  imps={
    "ch.fhnw.thga.fregelanguageserver.compile.CompileGlobal",
    "ch.fhnw.thga.fregelanguageserver.compile.CompileNormalMode", "frege.compiler.types.Global", "frege.data.List",
    "frege.control.monad.trans.MonadTrans", "ch.fhnw.thga.fregelanguageserver.types.Position", "frege.Prelude",
    "frege.prelude.PreludeArrays", "frege.prelude.PreludeBase", "frege.prelude.PreludeDecimal",
    "frege.prelude.PreludeIO", "frege.prelude.PreludeList", "frege.prelude.PreludeMonad", "frege.prelude.PreludeText",
    "frege.compiler.types.QNames", "frege.test.QuickCheck", "ch.fhnw.thga.fregelanguageserver.types.Range",
    "frege.java.util.Regex", "frege.control.monad.State", "frege.compiler.types.Tokens", "frege.ide.Utilities"
  },
  nmss={
    "CompileGlobal", "CompileNormalMode", "Global", "List", "MonadTrans", "Position", "Prelude",
    "PreludeArrays", "PreludeBase", "PreludeDecimal", "PreludeIO", "PreludeList", "PreludeMonad",
    "PreludeText", "QNames", "QuickCheck", "Range", "Regexp", "State", "Tokens", "Utilities"
  },
  symas={}, symcs={},
  symis={
    @Meta.SymI(
      offset=912,
      name=@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_FregeCodeBlock"),
      clas=@Meta.QName(kind=0, pack="frege.prelude.PreludeText", base="Show"), typ=0, lnks={},
      funs={
        @Meta.SymV(
          offset=912,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_FregeCodeBlock", member="showsub"
          ),
          stri="s(s)", sig=1, depth=1, rkind=13, doc="inherited from 'Show.showsub'"
        ),
        @Meta.SymV(
          offset=912,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_FregeCodeBlock", member="showList"
          ),
          stri="s(ss)", sig=4, depth=2, rkind=13, doc="inherited from 'Show.showList'"
        ),
        @Meta.SymV(
          offset=912,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_FregeCodeBlock", member="showsPrec"
          ),
          stri="s(uss)", sig=6, depth=3, rkind=13, doc="inherited from 'Show.showsPrec'"
        ),
        @Meta.SymV(
          offset=912,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_FregeCodeBlock", member="display"
          ),
          stri="s(s)", sig=1, depth=1, rkind=13, doc="inherited from 'Show.display'"
        ),
        @Meta.SymV(
          offset=951,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_FregeCodeBlock", member="show"
          ),
          stri="s(s(s))", sig=1, depth=1, rkind=13
        ),
        @Meta.SymV(
          offset=912,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_FregeCodeBlock", member="showChars"
          ),
          stri="s(s)", sig=7, depth=1, rkind=13, doc="inherited from 'Show.showChars'"
        )
      }
    ),
    @Meta.SymI(
      offset=1116, name=@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_Hover"),
      clas=@Meta.QName(kind=0, pack="frege.prelude.PreludeText", base="Show"), typ=8, lnks={},
      funs={
        @Meta.SymV(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_Hover", member="showsub"
          ),
          stri="s(s)", sig=9, depth=1, rkind=13, doc="Function generated for derived instance."
        ),
        @Meta.SymV(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_Hover", member="showList"
          ),
          stri="s(ss)", sig=11, depth=2, rkind=13, doc="inherited from 'Show.showList'"
        ),
        @Meta.SymV(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_Hover", member="showsPrec"
          ),
          stri="s(uss)", sig=12, depth=3, rkind=13, doc="inherited from 'Show.showsPrec'"
        ),
        @Meta.SymV(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_Hover", member="display"
          ),
          stri="s(s)", sig=9, depth=1, rkind=13, doc="inherited from 'Show.display'"
        ),
        @Meta.SymV(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_Hover", member="show"
          ),
          stri="s(s)", sig=9, depth=1, rkind=13, doc="Function generated for derived instance."
        ),
        @Meta.SymV(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_Hover", member="showChars"
          ),
          stri="s(s)", sig=13, depth=1, rkind=13, doc="inherited from 'Show.showChars'"
        )
      }
    ),
    @Meta.SymI(
      offset=887,
      name=@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Eq_FregeCodeBlock"),
      clas=@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Eq"), typ=0, lnks={},
      funs={
        @Meta.SymV(
          offset=887,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Eq_FregeCodeBlock", member="hashCode"
          ),
          stri="s(s)", sig=14, depth=1, rkind=13, doc="Function generated for derived instance."
        ),
        @Meta.SymV(
          offset=887,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Eq_FregeCodeBlock", member="!="
          ),
          stri="s(ss)", sig=15, depth=2, rkind=13, doc="inherited from 'Eq.!='", op=96
        ),
        @Meta.SymV(
          offset=887,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Eq_FregeCodeBlock", member="=="
          ),
          stri="s(ss)", sig=15, depth=2, rkind=13, doc="Function generated for derived instance.", op=96
        )
      }
    ),
    @Meta.SymI(
      offset=1100, name=@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Eq_Hover"),
      clas=@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Eq"), typ=8, lnks={},
      funs={
        @Meta.SymV(
          offset=1100,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Eq_Hover", member="hashCode"
          ),
          stri="s(s)", sig=16, depth=1, rkind=13, doc="Function generated for derived instance."
        ),
        @Meta.SymV(
          offset=1100,
          name=@Meta.QName(kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Eq_Hover", member="!="),
          stri="s(ss)", sig=17, depth=2, rkind=13, doc="inherited from 'Eq.!='", op=96
        ),
        @Meta.SymV(
          offset=1100,
          name=@Meta.QName(kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Eq_Hover", member="=="),
          stri="s(ss)", sig=17, depth=2, rkind=13, doc="Function generated for derived instance.", op=96
        )
      }
    )
  },
  symts={
    @Meta.SymT(
      offset=1029, name=@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover"), typ=8,
      kind=12,
      cons={
        @Meta.SymD(
          offset=1037,
          name=@Meta.QName(kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover", member="Hover"),
          cid=0, typ=19,
          fields={
            @Meta.Field(name="range", offset=1049, sigma=18, strict=false),
            @Meta.Field(name="content", offset=1071, sigma=0, strict=false)
          }
        )
      },
      lnks={
        @Meta.SymL(
          offset=1116,
          name=@Meta.QName(kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover", member="showsub"),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_Hover", member="showsub"
          )
        ),
        @Meta.SymL(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover", member="showList"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_Hover", member="showList"
          )
        ),
        @Meta.SymL(
          offset=1116,
          name=@Meta.QName(kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover", member="show"),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_Hover", member="show"
          )
        ),
        @Meta.SymL(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover", member="showChars"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_Hover", member="showChars"
          )
        ),
        @Meta.SymL(
          offset=1116,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover", member="showsPrec"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_Hover", member="showsPrec"
          )
        ),
        @Meta.SymL(
          offset=1100,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover", member="hashCode"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Eq_Hover", member="hashCode"
          )
        ),
        @Meta.SymL(
          offset=1116,
          name=@Meta.QName(kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover", member="display"),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_Hover", member="display"
          )
        ),
        @Meta.SymL(
          offset=1100,
          name=@Meta.QName(kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover", member="!="),
          alias=@Meta.QName(kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Eq_Hover", member="!=")
        ),
        @Meta.SymL(
          offset=1100,
          name=@Meta.QName(kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover", member="=="),
          alias=@Meta.QName(kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Eq_Hover", member="==")
        )
      },
      funs={
        @Meta.SymV(
          offset=1050,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover", member="upd$range"
          ),
          stri="s(su)", sig=20, depth=2, rkind=13, doc="update field @range@"
        ),
        @Meta.SymV(
          offset=1072,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover", member="upd$content"
          ),
          stri="s(su)", sig=21, depth=2, rkind=13, doc="update field @content@"
        ),
        @Meta.SymV(
          offset=1072,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover", member="has$content"
          ),
          stri="s(u)", sig=23, depth=1, rkind=13, doc="check if constructor has field @content@"
        ),
        @Meta.SymV(
          offset=1050,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover", member="has$range"
          ),
          stri="s(u)", sig=23, depth=1, rkind=13, doc="check if constructor has field @range@"
        ),
        @Meta.SymV(
          offset=1050,
          name=@Meta.QName(kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover", member="range"),
          stri="s(s)", sig=24, depth=1, rkind=13, doc="access field @range@"
        ),
        @Meta.SymV(
          offset=1050,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover", member="chg$range"
          ),
          stri="s(su)", sig=26, depth=2, rkind=13, doc="change field @range@"
        ),
        @Meta.SymV(
          offset=1072,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover", member="chg$content"
          ),
          stri="s(su)", sig=28, depth=2, rkind=13, doc="change field @content@"
        ),
        @Meta.SymV(
          offset=1072,
          name=@Meta.QName(kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover", member="content"),
          stri="s(s)", sig=29, depth=1, rkind=13, doc="access field @content@"
        )
      },
      prod=true
    ),
    @Meta.SymT(
      offset=831, name=@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="FregeCodeBlock"),
      typ=0, kind=12,
      cons={
        @Meta.SymD(
          offset=848,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="FregeCodeBlock", member="FregeCodeBlock"
          ),
          cid=0, typ=30, fields={@Meta.Field(name="code", offset=869, sigma=3, strict=false)}
        )
      },
      lnks={
        @Meta.SymL(
          offset=912,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="FregeCodeBlock", member="showsPrec"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_FregeCodeBlock", member="showsPrec"
          )
        ),
        @Meta.SymL(
          offset=912,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="FregeCodeBlock", member="showChars"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_FregeCodeBlock", member="showChars"
          )
        ),
        @Meta.SymL(
          offset=912,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="FregeCodeBlock", member="showList"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_FregeCodeBlock", member="showList"
          )
        ),
        @Meta.SymL(
          offset=912,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="FregeCodeBlock", member="showsub"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_FregeCodeBlock", member="showsub"
          )
        ),
        @Meta.SymL(
          offset=887,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="FregeCodeBlock", member="hashCode"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Eq_FregeCodeBlock", member="hashCode"
          )
        ),
        @Meta.SymL(
          offset=912,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="FregeCodeBlock", member="display"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_FregeCodeBlock", member="display"
          )
        ),
        @Meta.SymL(
          offset=887,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="FregeCodeBlock", member="!="
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Eq_FregeCodeBlock", member="!="
          )
        ),
        @Meta.SymL(
          offset=887,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="FregeCodeBlock", member="=="
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Eq_FregeCodeBlock", member="=="
          )
        ),
        @Meta.SymL(
          offset=951,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="FregeCodeBlock", member="show"
          ),
          alias=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Show_FregeCodeBlock", member="show"
          )
        )
      },
      funs={
        @Meta.SymV(
          offset=870,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="FregeCodeBlock", member="upd$code"
          ),
          stri="s(su)", sig=31, depth=2, rkind=13, doc="update field @code@"
        ),
        @Meta.SymV(
          offset=870,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="FregeCodeBlock", member="has$code"
          ),
          stri="s(u)", sig=23, depth=1, rkind=13, doc="check if constructor has field @code@"
        ),
        @Meta.SymV(
          offset=870,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="FregeCodeBlock", member="chg$code"
          ),
          stri="s(su)", sig=33, depth=2, rkind=13, doc="change field @code@"
        ),
        @Meta.SymV(
          offset=870,
          name=@Meta.QName(
            kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="FregeCodeBlock", member="code"
          ),
          stri="s(s)", sig=1, depth=1, rkind=13, doc="access field @code@"
        )
      },
      prod=true, newt=true
    )
  },
  symvs={
    @Meta.SymV(
      offset=1799, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="tokenToQName"),
      stri="s(u)", sig=35, depth=1, rkind=13
    ),
    @Meta.SymV(
      offset=5041,
      name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="shouldShowLocalConidDataConstructor"),
      stri="u", sig=36, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=3782,
      name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="shouldShowLocalConidTypeSignature"),
      stri="u", sig=36, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=2557,
      name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="shouldShowLocalVaridTypeSignature"),
      stri="u", sig=36, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=4413,
      name=@Meta.QName(
        pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="shouldShowImportedConidTypeSignature"
      ),
      stri="u", sig=36, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=5725,
      name=@Meta.QName(
        pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="shouldShowImportedConidDataConstructor"
      ),
      stri="u", sig=36, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=3161,
      name=@Meta.QName(
        pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="shouldShowImportedVaridTypeSignature"
      ),
      stri="u", sig=36, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=6409, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="main"), stri="u",
      sig=37, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=2167, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="getTypeOnHover"),
      stri="s(u)", sig=39, depth=1, rkind=13
    ),
    @Meta.SymV(
      offset=2043,
      name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="getTypeSignatureOnHover"),
      stri="s(uu)", sig=41, depth=2, rkind=13
    ),
    @Meta.SymV(
      offset=1135, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="getSymbolType"),
      stri="s(u)", sig=43, depth=1, rkind=13
    ),
    @Meta.SymV(
      offset=1660, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="findSymbol"),
      stri="s(u)", sig=45, depth=1, rkind=13
    ),
    @Meta.SymV(
      offset=1267, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="findToken"), stri="s(u)",
      sig=46, depth=1, rkind=13
    )
  },
  symls={
    @Meta.SymL(
      offset=1037, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover"),
      alias=@Meta.QName(kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover", member="Hover")
    ),
    @Meta.SymL(
      offset=848, name=@Meta.QName(pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="FregeCodeBlock"),
      alias=@Meta.QName(
        kind=2, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="FregeCodeBlock", member="FregeCodeBlock"
      )
    )
  },
  taus={
    @Meta.Tau(
      kind=2, suba=0,
      tcon={@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="FregeCodeBlock")}
    ),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}),
    @Meta.Tau(kind=0, suba=1, subb=2),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}),
    @Meta.Tau(kind=0, suba=4, subb=0),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Int")}),
    @Meta.Tau(kind=0, suba=4, subb=2),
    @Meta.Tau(
      kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.hover.Hover", base="Hover")}
    ),
    @Meta.Tau(kind=0, suba=4, subb=8),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Bool")}),
    @Meta.Tau(
      kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.types.Range", base="Range")}
    ),
    @Meta.Tau(kind=9), @Meta.Tau(suba=12, tvar="α"),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="->")}),
    @Meta.Tau(kind=0, suba=14, subb=11), @Meta.Tau(kind=0, suba=15, subb=11), @Meta.Tau(kind=0, suba=14, subb=0),
    @Meta.Tau(kind=0, suba=17, subb=0), @Meta.Tau(kind=0, suba=14, subb=3), @Meta.Tau(kind=0, suba=19, subb=3),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.compiler.types.Tokens", base="Token")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.control.monad.State", base="StateT")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.compiler.types.Global", base="Global")}),
    @Meta.Tau(kind=0, suba=22, subb=23),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Maybe")}),
    @Meta.Tau(kind=0, suba=24, subb=25),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.compiler.types.QNames", base="QName")}),
    @Meta.Tau(kind=0, suba=26, subb=27),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.test.QuickCheckGen", base="Gen")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.test.QuickCheckProperty", base="Prop")}),
    @Meta.Tau(kind=0, suba=29, subb=30),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="ST")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="RealWorld")}),
    @Meta.Tau(kind=0, suba=32, subb=33),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="()")}),
    @Meta.Tau(kind=0, suba=34, subb=35),
    @Meta.Tau(
      kind=2, suba=0,
      tcon={@Meta.QName(kind=0, pack="ch.fhnw.thga.fregelanguageserver.types.Position", base="Position")}
    ),
    @Meta.Tau(kind=0, suba=26, subb=8), @Meta.Tau(kind=0, suba=25, subb=8),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.compiler.types.Symbols", base="SymbolT")}),
    @Meta.Tau(kind=0, suba=40, subb=23), @Meta.Tau(kind=0, suba=26, subb=3), @Meta.Tau(kind=0, suba=26, subb=41),
    @Meta.Tau(kind=0, suba=26, subb=21)
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=0), @Meta.Rho(rhofun=false, rhotau=3), @Meta.Rho(sigma=0, rhotau=1),
    @Meta.Rho(rhofun=false, rhotau=5), @Meta.Rho(sigma=3, rhotau=1), @Meta.Rho(sigma=2, rhotau=4),
    @Meta.Rho(rhofun=false, rhotau=6), @Meta.Rho(sigma=0, rhotau=4), @Meta.Rho(sigma=5, rhotau=7),
    @Meta.Rho(rhofun=false, rhotau=7), @Meta.Rho(sigma=0, rhotau=9), @Meta.Rho(rhofun=false, rhotau=8),
    @Meta.Rho(sigma=8, rhotau=1), @Meta.Rho(rhofun=false, rhotau=9), @Meta.Rho(sigma=10, rhotau=4),
    @Meta.Rho(sigma=8, rhotau=4), @Meta.Rho(sigma=5, rhotau=15), @Meta.Rho(sigma=8, rhotau=9),
    @Meta.Rho(sigma=0, rhotau=6), @Meta.Rho(rhofun=false, rhotau=10), @Meta.Rho(sigma=0, rhotau=19),
    @Meta.Rho(sigma=0, rhotau=20), @Meta.Rho(sigma=8, rhotau=6), @Meta.Rho(sigma=8, rhotau=19),
    @Meta.Rho(sigma=8, rhotau=23), @Meta.Rho(rhofun=false, rhotau=11), @Meta.Rho(sigma=0, rhotau=11),
    @Meta.Rho(sigma=18, rhotau=26), @Meta.Rho(sigma=18, rhotau=11), @Meta.Rho(sigma=8, rhotau=28),
    @Meta.Rho(sigma=8, rhotau=26), @Meta.Rho(rhofun=false, rhotau=13), @Meta.Rho(sigma=22, rhotau=19),
    @Meta.Rho(sigma=8, rhotau=25), @Meta.Rho(rhofun=false, rhotau=16), @Meta.Rho(sigma=25, rhotau=11),
    @Meta.Rho(sigma=8, rhotau=35), @Meta.Rho(rhofun=false, rhotau=18), @Meta.Rho(sigma=27, rhotau=11),
    @Meta.Rho(sigma=8, rhotau=38), @Meta.Rho(sigma=8, rhotau=0), @Meta.Rho(sigma=3, rhotau=0),
    @Meta.Rho(sigma=0, rhotau=41), @Meta.Rho(rhofun=false, rhotau=20), @Meta.Rho(sigma=32, rhotau=0),
    @Meta.Rho(sigma=0, rhotau=44), @Meta.Rho(rhofun=false, rhotau=21), @Meta.Rho(rhofun=false, rhotau=28),
    @Meta.Rho(sigma=34, rhotau=47), @Meta.Rho(rhofun=false, rhotau=31), @Meta.Rho(rhofun=false, rhotau=36),
    @Meta.Rho(rhofun=false, rhotau=37), @Meta.Rho(rhofun=false, rhotau=38), @Meta.Rho(sigma=38, rhotau=52),
    @Meta.Rho(rhofun=false, rhotau=23), @Meta.Rho(rhofun=false, rhotau=39), @Meta.Rho(sigma=40, rhotau=55),
    @Meta.Rho(sigma=38, rhotau=56), @Meta.Rho(rhofun=false, rhotau=41), @Meta.Rho(rhofun=false, rhotau=42),
    @Meta.Rho(sigma=42, rhotau=59), @Meta.Rho(rhofun=false, rhotau=27), @Meta.Rho(rhofun=false, rhotau=43),
    @Meta.Rho(sigma=44, rhotau=62), @Meta.Rho(rhofun=false, rhotau=44), @Meta.Rho(sigma=38, rhotau=64)
  },
  sigmas={
    @Meta.Sigma(rho=0), @Meta.Sigma(rho=2), @Meta.Sigma(rho=3), @Meta.Sigma(rho=1), @Meta.Sigma(rho=5),
    @Meta.Sigma(rho=6), @Meta.Sigma(rho=8), @Meta.Sigma(rho=10), @Meta.Sigma(rho=11), @Meta.Sigma(rho=12),
    @Meta.Sigma(rho=13), @Meta.Sigma(rho=14), @Meta.Sigma(rho=16), @Meta.Sigma(rho=17), @Meta.Sigma(rho=18),
    @Meta.Sigma(rho=21), @Meta.Sigma(rho=22), @Meta.Sigma(rho=24), @Meta.Sigma(rho=25), @Meta.Sigma(rho=27),
    @Meta.Sigma(rho=29), @Meta.Sigma(rho=30), @Meta.Sigma(rho=31), @Meta.Sigma(bound={"α"}, kinds={12}, rho=32),
    @Meta.Sigma(rho=33), @Meta.Sigma(rho=34), @Meta.Sigma(rho=36), @Meta.Sigma(rho=37), @Meta.Sigma(rho=39),
    @Meta.Sigma(rho=40), @Meta.Sigma(rho=41), @Meta.Sigma(rho=42), @Meta.Sigma(rho=43), @Meta.Sigma(rho=45),
    @Meta.Sigma(rho=46), @Meta.Sigma(rho=48), @Meta.Sigma(rho=49), @Meta.Sigma(rho=50), @Meta.Sigma(rho=51),
    @Meta.Sigma(rho=53), @Meta.Sigma(rho=54), @Meta.Sigma(rho=57), @Meta.Sigma(rho=58), @Meta.Sigma(rho=60),
    @Meta.Sigma(rho=61), @Meta.Sigma(rho=63), @Meta.Sigma(rho=65)
  },
  exprs={@Meta.Expr()}
)
final public class Hover  {
  


final public static class IShow_FregeCodeBlock implements PreludeText.CShow<String/*<Character>*/> {
  public IShow_FregeCodeBlock() {}
  final public static IShow_FregeCodeBlock it = new IShow_FregeCodeBlock();
  @Override final public String/*<Character>*/ ƒshowsub(final Lazy<String/*<Character>*/> arg$1) {
    return IShow_FregeCodeBlock.showsub(arg$1.call());
  }
  @Override final public String/*<Character>*/ ƒshowList(
    final Lazy<PreludeBase.TList<String/*<Character>*/>> arg$1, final Lazy<String/*<Character>*/> arg$2
  ) {
    return IShow_FregeCodeBlock.showList(arg$1.call(), arg$2.call());
  }
  @Override final public String/*<Character>*/ ƒshowsPrec(
    final Lazy<Integer> arg$1, final Lazy<String/*<Character>*/> arg$2, final Lazy<String/*<Character>*/> arg$3
  ) {
    return IShow_FregeCodeBlock.showsPrec(arg$1, arg$2.call(), arg$3.call());
  }
  @Override final public String/*<Character>*/ ƒdisplay(final Lazy<String/*<Character>*/> arg$1) {
    return IShow_FregeCodeBlock.display(arg$1.call());
  }
  @Override final public String/*<Character>*/ ƒshow(final Lazy<String/*<Character>*/> arg$1) {
    return IShow_FregeCodeBlock.show(arg$1.call());
  }
  @Override final public PreludeBase.TList<Character> ƒshowChars(final Lazy<String/*<Character>*/> arg$1) {
    return IShow_FregeCodeBlock.showChars(arg$1.call());
  }
  final public static String/*<Character>*/ showsub(final String/*<Character>*/ arg$1) {
    return IShow_FregeCodeBlock.show(arg$1);
  }
  final public static String/*<Character>*/ showList(
    final PreludeBase.TList<String/*<Character>*/> arg$1, final String/*<Character>*/ arg$2
  ) {
    return "[" + (PreludeText.joined(
              Thunk.<String/*<Character>*/>lazy(", "),
              PreludeList.<String/*<Character>*/, String/*<Character>*/>map(
                    (Func.U<String/*<Character>*/, String/*<Character>*/>)((
                      final Lazy<String/*<Character>*/> η$20264
                    ) -> Thunk.<String/*<Character>*/>shared(
                              (Lazy<String/*<Character>*/>)(() -> IShow_FregeCodeBlock.show(
                                        η$20264.call()
                                      ))
                            )),
                    arg$1
                  )
            ).call() + ("]" + arg$2));
  }
  final public static String/*<Character>*/ showsPrec(
    final Lazy<Integer> arg$1, final String/*<Character>*/ arg$2, final String/*<Character>*/ arg$3
  ) {
    return IShow_FregeCodeBlock.show(arg$2) + arg$3;
  }
  final public static String/*<Character>*/ display(final String/*<Character>*/ arg$1) {
    return IShow_FregeCodeBlock.show(arg$1);
  }
  final public static String/*<Character>*/ show(final String/*<Character>*/ arg$1) {
    return "```frege\n" + (arg$1 + "\n```");
  }
  final public static PreludeBase.TList<Character> showChars(final String/*<Character>*/ arg$1) {
    return PreludeList.IListView_StringJ.<Character>toList(IShow_FregeCodeBlock.show(arg$1));
  }
}
final public static class IShow_Hover implements PreludeText.CShow<THover> {
  public IShow_Hover() {}
  final public static IShow_Hover it = new IShow_Hover();
  @Override final public String/*<Character>*/ ƒshowsub(final Lazy<THover> arg$1) {
    return IShow_Hover.showsub(arg$1.call());
  }
  @Override final public String/*<Character>*/ ƒshowList(
    final Lazy<PreludeBase.TList<THover>> arg$1, final Lazy<String/*<Character>*/> arg$2
  ) {
    return IShow_Hover.showList(arg$1.call(), arg$2.call());
  }
  @Override final public String/*<Character>*/ ƒshowsPrec(
    final Lazy<Integer> arg$1, final Lazy<THover> arg$2, final Lazy<String/*<Character>*/> arg$3
  ) {
    return IShow_Hover.showsPrec(arg$1, arg$2.call(), arg$3.call());
  }
  @Override final public String/*<Character>*/ ƒdisplay(final Lazy<THover> arg$1) {
    return IShow_Hover.display(arg$1.call());
  }
  @Override final public String/*<Character>*/ ƒshow(final Lazy<THover> arg$1) {
    return IShow_Hover.show(arg$1.call());
  }
  @Override final public PreludeBase.TList<Character> ƒshowChars(final Lazy<THover> arg$1) {
    return IShow_Hover.showChars(arg$1.call());
  }
  final public static String/*<Character>*/ showsub(final THover arg$1) {
    final String/*<Character>*/ a2$18205 = arg$1.mem$content.call();
    final Range.TRange a1$18204 = arg$1.mem$range.call();
    return ("(" + (((("Hover" + " ") + Range.IShow_Range.showsub(a1$18204)) + " ") + IShow_FregeCodeBlock.showsub(
              a2$18205
            ))) + ")";
  }
  final public static String/*<Character>*/ showList(final PreludeBase.TList<THover> arg$1, final String/*<Character>*/ arg$2) {
    return "[" + (PreludeText.joined(
              Thunk.<String/*<Character>*/>lazy(", "),
              PreludeList.<String/*<Character>*/, THover>map(
                    (Func.U<THover, String/*<Character>*/>)((final Lazy<THover> η$20276) -> Thunk.<
                          String/*<Character>*/
                        >shared((Lazy<String/*<Character>*/>)(() -> IShow_Hover.show(η$20276.call())))),
                    arg$1
                  )
            ).call() + ("]" + arg$2));
  }
  final public static String/*<Character>*/ showsPrec(
    final Lazy<Integer> arg$1, final THover arg$2, final String/*<Character>*/ arg$3
  ) {
    return IShow_Hover.show(arg$2) + arg$3;
  }
  final public static String/*<Character>*/ display(final THover arg$1) {
    return IShow_Hover.show(arg$1);
  }
  final public static String/*<Character>*/ show(final THover arg$1) {
    final String/*<Character>*/ a2$18202 = arg$1.mem$content.call();
    final Range.TRange a1$18201 = arg$1.mem$range.call();
    return ((("Hover" + " ") + Range.IShow_Range.showsub(a1$18201)) + " ") + IShow_FregeCodeBlock.showsub(
              a2$18202
            );
  }
  final public static PreludeBase.TList<Character> showChars(final THover arg$1) {
    return PreludeList.IListView_StringJ.<Character>toList(IShow_Hover.show(arg$1));
  }
}
final public static class IEq_FregeCodeBlock implements PreludeBase.CEq<String/*<Character>*/> {
  public IEq_FregeCodeBlock() {}
  final public static IEq_FregeCodeBlock it = new IEq_FregeCodeBlock();
  @Override final public int ƒhashCode(final Lazy<String/*<Character>*/> arg$1) {
    return IEq_FregeCodeBlock.hashCode(arg$1.call());
  }
  @Override final public boolean ƒ$excl$eq(final Lazy<String/*<Character>*/> arg$1, final Lazy<String/*<Character>*/> arg$2) {
    return IEq_FregeCodeBlock.$excl$eq(arg$1.call(), arg$2.call());
  }
  @Override final public boolean ƒ$eq$eq(final Lazy<String/*<Character>*/> arg$1, final Lazy<String/*<Character>*/> arg$2) {
    return IEq_FregeCodeBlock.$eq$eq(arg$1.call(), arg$2.call());
  }
  final public static int hashCode(final String/*<Character>*/ arg$1) {
    return (31 * ((31 * 1) + RunTM.constructor(arg$1))) + arg$1.hashCode();
  }
  final public static boolean $excl$eq(final String/*<Character>*/ arg$1, final String/*<Character>*/ arg$2) {
    if (IEq_FregeCodeBlock.$eq$eq(arg$1, arg$2)) {
      return false;
    }
    else {
      return true;
    }
  }
  final public static boolean $eq$eq(final String/*<Character>*/ arg$1, final String/*<Character>*/ arg$2) {
    return arg$1.equals(arg$2);
  }
}
final public static class IEq_Hover implements PreludeBase.CEq<THover> {
  public IEq_Hover() {}
  final public static IEq_Hover it = new IEq_Hover();
  @Override final public int ƒhashCode(final Lazy<THover> arg$1) {
    return IEq_Hover.hashCode(arg$1.call());
  }
  @Override final public boolean ƒ$excl$eq(final Lazy<THover> arg$1, final Lazy<THover> arg$2) {
    return IEq_Hover.$excl$eq(arg$1.call(), arg$2.call());
  }
  @Override final public boolean ƒ$eq$eq(final Lazy<THover> arg$1, final Lazy<THover> arg$2) {
    return IEq_Hover.$eq$eq(arg$1.call(), arg$2.call());
  }
  final public static int hashCode(final THover arg$1) {
    final String/*<Character>*/ a2$18199 = arg$1.mem$content.call();
    final Range.TRange a1$18198 = arg$1.mem$range.call();
    return (31 * ((31 * ((31 * 1) + RunTM.constructor(arg$1))) + Range.IEq_Range.hashCode(
              a1$18198
            ))) + IEq_FregeCodeBlock.hashCode(a2$18199);
  }
  final public static boolean $excl$eq(final THover arg$1, final THover arg$2) {
    if (IEq_Hover.$eq$eq(arg$1, arg$2)) {
      return false;
    }
    else {
      return true;
    }
  }
  final public static boolean $eq$eq(final THover arg$1, final THover arg$2) {
    final String/*<Character>*/ µ$$18269 = arg$1.mem$content.call();
    final Range.TRange µ$$18268 = arg$1.mem$range.call();
    final String/*<Character>*/ µ$$18271 = arg$2.mem$content.call();
    final Range.TRange µ$$18270 = arg$2.mem$range.call();
    return Range.IEq_Range.$eq$eq(µ$$18268, µ$$18270) && IEq_FregeCodeBlock.$eq$eq(µ$$18269, µ$$18271);
  }
}
final public static class THover implements frege.runtime.Value, Lazy<THover> {
  private THover(final Lazy<Range.TRange> arg$1, final Lazy<String/*<Character>*/> arg$2) {
    mem$range = Thunk.<Range.TRange>shared(arg$1);
    mem$content = Thunk.<String/*<Character>*/>shared(arg$2);
  }
  final public int constructor() {
    return 0;
  }
  final public static THover mk(final Lazy<Range.TRange> arg$1, final Lazy<String/*<Character>*/> arg$2) {
    return new THover(arg$1, arg$2);
  }
  final public Lazy<Range.TRange> mem$range  ;
  final public Lazy<String/*<Character>*/> mem$content  ;
  final public THover call() {
    return this;
  }
  final public boolean isShared() {
    return true;
  }
  final public Thunk<THover> asThunk() {
    return null;
  }
  @SuppressWarnings("unchecked") final public THover simsalabim() {
    return (THover)this;
  }
  final public static THover upd$range(final THover arg$1, final Lazy<Range.TRange> arg$2) {
    return THover.mk(arg$2, arg$1.mem$content);
  }
  final public static THover upd$content(final THover arg$1, final Lazy<String/*<Character>*/> arg$2) {
    return THover.mk(arg$1.mem$range, arg$2);
  }
  final public static <α> boolean has$content(final Lazy<α> arg$1) {
    return true;
  }
  final public static <α> boolean has$range(final Lazy<α> arg$1) {
    return true;
  }
  final public static Range.TRange range(final THover arg$1) {
    final Range.TRange a1$18118 = arg$1.mem$range.call();
    return a1$18118;
  }
  final public static THover chg$range(final THover arg$1, final Lazy<Func.U<Range.TRange, Range.TRange>> arg$2) {
    return THover.mk(
              Thunk.<Range.TRange>nested((Lazy<Lazy<Range.TRange>>)(() -> arg$2.call().apply(arg$1.mem$range))),
              arg$1.mem$content
            );
  }
  final public static THover chg$content(
    final THover arg$1, final Lazy<Func.U<String/*<Character>*/, String/*<Character>*/>> arg$2
  ) {
    return THover.mk(
              arg$1.mem$range,
              Thunk.<String/*<Character>*/>nested(
                    (Lazy<Lazy<String/*<Character>*/>>)(() -> arg$2.call().apply(arg$1.mem$content))
                  )
            );
  }
  final public static String/*<Character>*/ content(final THover arg$1) {
    final String/*<Character>*/ a2$18107 = arg$1.mem$content.call();
    return a2$18107;
  }
}
public static abstract class TFregeCodeBlock  {
  final public static String/*<Character>*/ upd$code(
    final String/*<Character>*/ arg$1, final Lazy<String/*<Character>*/> arg$2
  ) {
    return arg$2.call();
  }
  final public static <α> boolean has$code(final Lazy<α> arg$1) {
    return true;
  }
  final public static String/*<Character>*/ chg$code(
    final String/*<Character>*/ arg$1, final Lazy<Func.U<String/*<Character>*/, String/*<Character>*/>> arg$2
  ) {
    return arg$2.call().apply(Thunk.<String/*<Character>*/>lazy(arg$1)).call();
  }
  final public static String/*<Character>*/ code(final String/*<Character>*/ arg$1) {
    return arg$1;
  }
}
final public static State.TStateT<Global.TGlobal, PreludeBase.TMaybe<?>, QNames.TQName> tokenToQName(
  final Lazy<Tokens.TToken> arg$1
) {
  return State.TStateT.<Global.TGlobal, PreludeBase.TMaybe<?>, QNames.TQName>mk(
            (Func.U<Global.TGlobal, Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<QNames.TQName, Global.TGlobal>>>)((
              final Lazy<Global.TGlobal> arg$20297
            ) -> {
                  final PreludeBase.TTuple2<Global.TGlobal, Global.TGlobal> v2895$19224 =
                  PreludeBase.TTuple2.<Global.TGlobal, Global.TGlobal>mk(arg$20297, arg$20297)
                  .call();
                  final State.TStateT<Global.TGlobal, PreludeBase.TMaybe<?>, PreludeBase.TEither<Short, QNames.TQName>> $20299 =
                  State.IMonadTrans_StateT.<
                    Global.TGlobal, PreludeBase.TEither<Short, QNames.TQName>, PreludeBase.TMaybe<?>
                  >lift(
                        Maybe.IMonad_Maybe.it,
                        Thunk.<Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TEither<Short, QNames.TQName>>>shared(
                              (Lazy<Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TEither<Short, QNames.TQName>>>)(() -> (Kind.U<
                                    PreludeBase.TMaybe<?>, PreludeBase.TEither<Short, QNames.TQName>
                                  >)Thunk.<PreludeBase.TMaybe<PreludeBase.TEither<Short, QNames.TQName>>>shared(
                                        (Lazy<PreludeBase.TMaybe<
                                          PreludeBase.TEither<Short, QNames.TQName>
                                        >>)(() -> Global.TGlobal.resolved(v2895$19224.mem1.call(), arg$1))
                                      ).call())
                            )
                      );
                  final Func.U<
                    Global.TGlobal,
                    Kind.U<
                      PreludeBase.TMaybe<?>, PreludeBase.TTuple2<PreludeBase.TEither<Short, QNames.TQName>, Global.TGlobal>
                    >
                  > v7734$19253 = $20299.mem$run;
                  final PreludeBase.TMaybe<
                    PreludeBase.TTuple2<PreludeBase.TEither<Short, QNames.TQName>, Global.TGlobal>
                  > $20301 = RunTM.<
                    Func.U<
                      Global.TGlobal,
                      PreludeBase.TMaybe<PreludeBase.TTuple2<PreludeBase.TEither<Short, QNames.TQName>, Global.TGlobal>>
                    >
                  >cast(v7734$19253).apply(v2895$19224.mem2).call();
                  final PreludeBase.TMaybe.DJust<
                    PreludeBase.TTuple2<PreludeBase.TEither<Short, QNames.TQName>, Global.TGlobal>
                  > $20302 = $20301.asJust();
                  if ($20302 != null) {
                    final PreludeBase.TTuple2<PreludeBase.TEither<Short, QNames.TQName>, Global.TGlobal> v2895$19285 =
                    $20302.mem1.call();
                    final State.TStateT<Global.TGlobal, PreludeBase.TMaybe<?>, QNames.TQName> $20306 =
                    State.IMonadTrans_StateT.<Global.TGlobal, QNames.TQName, PreludeBase.TMaybe<?>>lift(
                          Maybe.IMonad_Maybe.it,
                          Thunk.<Kind.U<PreludeBase.TMaybe<?>, QNames.TQName>>shared(
                                (Lazy<Kind.U<PreludeBase.TMaybe<?>, QNames.TQName>>)(() -> (Kind.U<
                                      PreludeBase.TMaybe<?>, QNames.TQName
                                    >)Thunk.<PreludeBase.TMaybe<QNames.TQName>>nested(
                                          (Lazy<Lazy<PreludeBase.TMaybe<QNames.TQName>>>)(() -> PreludeBase.<
                                                PreludeBase.TMaybe<QNames.TQName>, Short, QNames.TQName
                                              >either(
                                                    (Func.U<Short, PreludeBase.TMaybe<QNames.TQName>>)((
                                                      final Lazy<Short> η$20304
                                                    ) -> Thunk.<PreludeBase.TMaybe<QNames.TQName>>shared(
                                                              (Lazy<PreludeBase.TMaybe<
                                                                QNames.TQName
                                                              >>)(() -> PreludeBase.<
                                                                    Short, PreludeBase.TMaybe<QNames.TQName>
                                                                  >$const(
                                                                        PreludeBase.TMaybe.DNothing.<QNames.TQName>mk(), η$20304
                                                                      ))
                                                            )),
                                                    (Func.U<QNames.TQName, PreludeBase.TMaybe<QNames.TQName>>)((
                                                      final Lazy<QNames.TQName> η$20305
                                                    ) -> PreludeBase.TMaybe.DJust.<QNames.TQName>mk(
                                                              η$20305
                                                            )),
                                                    v2895$19285.mem1.call()
                                                  ))
                                        ).call())
                              )
                        );
                    final Func.U<
                      Global.TGlobal, Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<QNames.TQName, Global.TGlobal>>
                    > v7739$19258 = $20306.mem$run;
                    return Thunk.<Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<QNames.TQName, Global.TGlobal>>>shared(
                              (Lazy<Kind.U<
                                PreludeBase.TMaybe<?>, PreludeBase.TTuple2<QNames.TQName, Global.TGlobal>
                              >>)(() -> (Kind.U<
                                    PreludeBase.TMaybe<?>, PreludeBase.TTuple2<QNames.TQName, Global.TGlobal>
                                  >)Thunk.<PreludeBase.TMaybe<PreludeBase.TTuple2<QNames.TQName, Global.TGlobal>>>nested(
                                        (Lazy<Lazy<PreludeBase.TMaybe<
                                          PreludeBase.TTuple2<QNames.TQName, Global.TGlobal>
                                        >>>)(() -> RunTM.<
                                              Func.U<
                                                Global.TGlobal,
                                                PreludeBase.TMaybe<PreludeBase.TTuple2<QNames.TQName, Global.TGlobal>>
                                              >
                                            >cast(v7739$19258).apply(v2895$19285.mem2))
                                      ).call())
                            );
                  }
                  final PreludeBase.TMaybe.DNothing<
                    PreludeBase.TTuple2<PreludeBase.TEither<Short, QNames.TQName>, Global.TGlobal>
                  > $20308 = $20301.asNothing();
                  assert $20308 != null;
                  return Thunk.<Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<QNames.TQName, Global.TGlobal>>>lazy(
                            (Kind.U<
                              PreludeBase.TMaybe<?>, PreludeBase.TTuple2<QNames.TQName, Global.TGlobal>
                            >)PreludeBase.TMaybe.DNothing.<PreludeBase.TTuple2<QNames.TQName, Global.TGlobal>>mk()
                          );
                })
          );
}
final public static State.TStateT<Global.TGlobal, PreludeBase.TMaybe<?>, String/*<Character>*/> getSymbolType(
  final Lazy<Symbols.TSymbolT<Global.TGlobal>> arg$1
) {
  return State.TStateT.<Global.TGlobal, PreludeBase.TMaybe<?>, String/*<Character>*/>mk(
            (Func.U<
              Global.TGlobal, Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<String/*<Character>*/, Global.TGlobal>>
            >)((final Lazy<Global.TGlobal> arg$20309) -> {
                  final PreludeBase.TTuple2<Global.TGlobal, Global.TGlobal> v2895$20065 =
                  PreludeBase.TTuple2.<Global.TGlobal, Global.TGlobal>mk(arg$20309, arg$20309)
                  .call();
                  final State.TStateT<Global.TGlobal, PreludeBase.TMaybe<?>, String/*<Character>*/> $20311 =
                  State.IMonad_StateT.<Global.TGlobal, PreludeBase.TMaybe<?>, String/*<Character>*/>pure(
                        Maybe.IMonad_Maybe.it, frege.ide.Utilities.<Global.TGlobal>label(v2895$20065.mem1, arg$1.call())
                      );
                  final Func.U<
                    Global.TGlobal, Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<String/*<Character>*/, Global.TGlobal>>
                  > v7739$20038 = $20311.mem$run;
                  return Thunk.<
                        Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<String/*<Character>*/, Global.TGlobal>>
                      >shared(
                            (Lazy<Kind.U<
                              PreludeBase.TMaybe<?>, PreludeBase.TTuple2<String/*<Character>*/, Global.TGlobal>
                            >>)(() -> (Kind.U<
                                  PreludeBase.TMaybe<?>, PreludeBase.TTuple2<String/*<Character>*/, Global.TGlobal>
                                >)Thunk.<PreludeBase.TMaybe<PreludeBase.TTuple2<String/*<Character>*/, Global.TGlobal>>>nested(
                                      (Lazy<Lazy<PreludeBase.TMaybe<
                                        PreludeBase.TTuple2<String/*<Character>*/, Global.TGlobal>
                                      >>>)(() -> RunTM.<
                                            Func.U<
                                              Global.TGlobal,
                                              PreludeBase.TMaybe<PreludeBase.TTuple2<String/*<Character>*/, Global.TGlobal>>
                                            >
                                          >cast(v7739$20038).apply(v2895$20065.mem2))
                                    ).call())
                          );
                })
          );
}
final public static State.TStateT<Global.TGlobal, PreludeBase.TMaybe<?>, Tokens.TToken> findToken(
  final Lazy<Position.TPosition> arg$1
) {
  final class Let$20313  {
    final Let$20313 let$20313 = this;
    final public boolean isHoverOverToken$18132(final Tokens.TToken arg$2) {
      return (Position.TPosition.line(arg$1.call()) == Tokens.TToken.line(arg$2)) && ((Position.TPosition.character(
                arg$1.call()
              ) < (Tokens.TToken.col(arg$2) + Tokens.TToken.value(arg$2).length())) && (Position.TPosition.character(
                arg$1.call()
              ) >= Tokens.TToken.col(arg$2)));
    }
  }
  final Let$20313 let$20313 = new Let$20313();
  return State.TStateT.<Global.TGlobal, PreludeBase.TMaybe<?>, Tokens.TToken>mk(
            (Func.U<Global.TGlobal, Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<Tokens.TToken, Global.TGlobal>>>)((
              final Lazy<Global.TGlobal> arg$20314
            ) -> {
                  final PreludeBase.TTuple2<Global.TGlobal, Global.TGlobal> v2895$20201 =
                  PreludeBase.TTuple2.<Global.TGlobal, Global.TGlobal>mk(arg$20314, arg$20314)
                  .call();
                  final State.TStateT<Global.TGlobal, PreludeBase.TMaybe<?>, Tokens.TToken> $20317 =
                  State.IMonadTrans_StateT.<Global.TGlobal, Tokens.TToken, PreludeBase.TMaybe<?>>lift(
                        Maybe.IMonad_Maybe.it,
                        Thunk.<Kind.U<PreludeBase.TMaybe<?>, Tokens.TToken>>shared(
                              (Lazy<Kind.U<PreludeBase.TMaybe<?>, Tokens.TToken>>)(() -> (Kind.U<
                                    PreludeBase.TMaybe<?>, Tokens.TToken
                                  >)Thunk.<PreludeBase.TMaybe<Tokens.TToken>>shared(
                                        (Lazy<PreludeBase.TMaybe<Tokens.TToken>>)(() -> List.<
                                              Tokens.TToken
                                            >find(
                                                  (Func.U<Tokens.TToken, Boolean>)((
                                                    final Lazy<Tokens.TToken> η$20316
                                                  ) -> Thunk.<Boolean>shared(
                                                            (Lazy<Boolean>)(() -> let$20313
                                                                .isHoverOverToken$18132(
                                                                      η$20316.call()
                                                                    ))
                                                          )),
                                                  Thunk.<PreludeBase.TList<Tokens.TToken>>shared(
                                                        (Lazy<PreludeBase.TList<
                                                          Tokens.TToken
                                                        >>)(() -> Tokens.IArrayElement_Token.listFromArray(
                                                                  Global.TSubSt.toks(
                                                                        Global.TGlobal.sub(
                                                                              v2895$20201.mem1
                                                                              .call()
                                                                            )
                                                                      )
                                                                ))
                                                      )
                                                ))
                                      ).call())
                            )
                      );
                  final Func.U<
                    Global.TGlobal, Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<Tokens.TToken, Global.TGlobal>>
                  > v7739$20174 = $20317.mem$run;
                  return Thunk.<Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<Tokens.TToken, Global.TGlobal>>>shared(
                            (Lazy<Kind.U<
                              PreludeBase.TMaybe<?>, PreludeBase.TTuple2<Tokens.TToken, Global.TGlobal>
                            >>)(() -> (Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<Tokens.TToken, Global.TGlobal>>)Thunk.<
                                  PreludeBase.TMaybe<PreludeBase.TTuple2<Tokens.TToken, Global.TGlobal>>
                                >nested(
                                      (Lazy<Lazy<PreludeBase.TMaybe<
                                        PreludeBase.TTuple2<Tokens.TToken, Global.TGlobal>
                                      >>>)(() -> RunTM.<
                                            Func.U<
                                              Global.TGlobal,
                                              PreludeBase.TMaybe<PreludeBase.TTuple2<Tokens.TToken, Global.TGlobal>>
                                            >
                                          >cast(v7739$20174).apply(v2895$20201.mem2))
                                    ).call())
                          );
                })
          );
}
final public static State.TStateT<Global.TGlobal, PreludeBase.TMaybe<?>, Symbols.TSymbolT<Global.TGlobal>> findSymbol(
  final Lazy<QNames.TQName> arg$1
) {
  return State.TStateT.<Global.TGlobal, PreludeBase.TMaybe<?>, Symbols.TSymbolT<Global.TGlobal>>mk(
            (Func.U<
              Global.TGlobal,
              Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<Symbols.TSymbolT<Global.TGlobal>, Global.TGlobal>>
            >)((final Lazy<Global.TGlobal> arg$20319) -> {
                  final PreludeBase.TTuple2<Global.TGlobal, Global.TGlobal> v2895$20133 =
                  PreludeBase.TTuple2.<Global.TGlobal, Global.TGlobal>mk(arg$20319, arg$20319)
                  .call();
                  final State.TStateT<Global.TGlobal, PreludeBase.TMaybe<?>, Symbols.TSymbolT<Global.TGlobal>> $20321 =
                  State.IMonadTrans_StateT.<Global.TGlobal, Symbols.TSymbolT<Global.TGlobal>, PreludeBase.TMaybe<?>>lift(
                        Maybe.IMonad_Maybe.it,
                        Thunk.<Kind.U<PreludeBase.TMaybe<?>, Symbols.TSymbolT<Global.TGlobal>>>shared(
                              (Lazy<Kind.U<PreludeBase.TMaybe<?>, Symbols.TSymbolT<Global.TGlobal>>>)(() -> (Kind.U<
                                    PreludeBase.TMaybe<?>, Symbols.TSymbolT<Global.TGlobal>
                                  >)Thunk.<PreludeBase.TMaybe<Symbols.TSymbolT<Global.TGlobal>>>nested(
                                        (Lazy<Lazy<PreludeBase.TMaybe<
                                          Symbols.TSymbolT<Global.TGlobal>
                                        >>>)(() -> Global.TGlobal.find(v2895$20133.mem1.call(), arg$1.call()))
                                      ).call())
                            )
                      );
                  final Func.U<
                    Global.TGlobal,
                    Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<Symbols.TSymbolT<Global.TGlobal>, Global.TGlobal>>
                  > v7739$20106 = $20321.mem$run;
                  return Thunk.<
                        Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<Symbols.TSymbolT<Global.TGlobal>, Global.TGlobal>>
                      >shared(
                            (Lazy<Kind.U<
                              PreludeBase.TMaybe<?>, PreludeBase.TTuple2<Symbols.TSymbolT<Global.TGlobal>, Global.TGlobal>
                            >>)(() -> (Kind.U<
                                  PreludeBase.TMaybe<?>, PreludeBase.TTuple2<Symbols.TSymbolT<Global.TGlobal>, Global.TGlobal>
                                >)Thunk.<
                                  PreludeBase.TMaybe<PreludeBase.TTuple2<Symbols.TSymbolT<Global.TGlobal>, Global.TGlobal>>
                                >nested(
                                      (Lazy<Lazy<PreludeBase.TMaybe<
                                        PreludeBase.TTuple2<Symbols.TSymbolT<Global.TGlobal>, Global.TGlobal>
                                      >>>)(() -> RunTM.<
                                            Func.U<
                                              Global.TGlobal,
                                              PreludeBase.TMaybe<
                                                PreludeBase.TTuple2<Symbols.TSymbolT<Global.TGlobal>, Global.TGlobal>
                                              >
                                            >
                                          >cast(v7739$20106).apply(v2895$20133.mem2))
                                    ).call())
                          );
                })
          );
}
final public static State.TStateT<Global.TGlobal, PreludeBase.TMaybe<?>, THover> getTypeOnHover(
  final Lazy<Position.TPosition> arg$1
) {
  return State.TStateT.<Global.TGlobal, PreludeBase.TMaybe<?>, THover>mk(
            (Func.U<Global.TGlobal, Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<THover, Global.TGlobal>>>)((
              final Lazy<Global.TGlobal> arg$20323
            ) -> {
                  final PreludeBase.TTuple2<Global.TGlobal, Global.TGlobal> v2895$19814 =
                  PreludeBase.TTuple2.<Global.TGlobal, Global.TGlobal>mk(arg$20323, arg$20323)
                  .call();
                  final State.TStateT<Global.TGlobal, PreludeBase.TMaybe<?>, Tokens.TToken> $20325 =
                  Hover.findToken(arg$1);
                  final Func.U<
                    Global.TGlobal, Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<Tokens.TToken, Global.TGlobal>>
                  > v7734$19843 = $20325.mem$run;
                  final PreludeBase.TMaybe<PreludeBase.TTuple2<Tokens.TToken, Global.TGlobal>> $20327 =
                  RunTM.<Func.U<Global.TGlobal, PreludeBase.TMaybe<PreludeBase.TTuple2<Tokens.TToken, Global.TGlobal>>>>cast(
                        v7734$19843
                      ).apply(v2895$19814.mem2).call();
                  final PreludeBase.TMaybe.DJust<PreludeBase.TTuple2<Tokens.TToken, Global.TGlobal>> $20328 =
                  $20327.asJust();
                  if ($20328 != null) {
                    final PreludeBase.TTuple2<Tokens.TToken, Global.TGlobal> v2895$19875 =
                    $20328.mem1.call();
                    final State.TStateT<Global.TGlobal, PreludeBase.TMaybe<?>, QNames.TQName> $20330 =
                    Hover.tokenToQName(v2895$19875.mem1);
                    final Func.U<
                      Global.TGlobal, Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<QNames.TQName, Global.TGlobal>>
                    > v7734$19887 = $20330.mem$run;
                    final PreludeBase.TMaybe<PreludeBase.TTuple2<QNames.TQName, Global.TGlobal>> $20332 =
                    RunTM.<Func.U<Global.TGlobal, PreludeBase.TMaybe<PreludeBase.TTuple2<QNames.TQName, Global.TGlobal>>>>cast(
                          v7734$19887
                        ).apply(v2895$19875.mem2).call();
                    final PreludeBase.TMaybe.DJust<PreludeBase.TTuple2<QNames.TQName, Global.TGlobal>> $20333 =
                    $20332.asJust();
                    if ($20333 != null) {
                      final PreludeBase.TTuple2<QNames.TQName, Global.TGlobal> v2895$19919 =
                      $20333.mem1.call();
                      final State.TStateT<Global.TGlobal, PreludeBase.TMaybe<?>, Symbols.TSymbolT<Global.TGlobal>> $20335 =
                      Hover.findSymbol(v2895$19919.mem1);
                      final Func.U<
                        Global.TGlobal,
                        Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<Symbols.TSymbolT<Global.TGlobal>, Global.TGlobal>>
                      > v7734$19931 = $20335.mem$run;
                      final PreludeBase.TMaybe<PreludeBase.TTuple2<Symbols.TSymbolT<Global.TGlobal>, Global.TGlobal>> $20337 =
                      RunTM.<
                        Func.U<
                          Global.TGlobal,
                          PreludeBase.TMaybe<PreludeBase.TTuple2<Symbols.TSymbolT<Global.TGlobal>, Global.TGlobal>>
                        >
                      >cast(v7734$19931).apply(v2895$19919.mem2).call();
                      final PreludeBase.TMaybe.DJust<
                        PreludeBase.TTuple2<Symbols.TSymbolT<Global.TGlobal>, Global.TGlobal>
                      > $20338 = $20337.asJust();
                      if ($20338 != null) {
                        final PreludeBase.TTuple2<Symbols.TSymbolT<Global.TGlobal>, Global.TGlobal> v2895$19963 =
                        $20338.mem1.call();
                        final State.TStateT<Global.TGlobal, PreludeBase.TMaybe<?>, String/*<Character>*/> $20340 =
                        Hover.getSymbolType(v2895$19963.mem1);
                        final Func.U<
                          Global.TGlobal,
                          Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<String/*<Character>*/, Global.TGlobal>>
                        > v7734$19975 = $20340.mem$run;
                        final PreludeBase.TMaybe<PreludeBase.TTuple2<String/*<Character>*/, Global.TGlobal>> $20342 =
                        RunTM.<
                          Func.U<Global.TGlobal, PreludeBase.TMaybe<PreludeBase.TTuple2<String/*<Character>*/, Global.TGlobal>>>
                        >cast(v7734$19975).apply(v2895$19963.mem2).call();
                        final PreludeBase.TMaybe.DJust<PreludeBase.TTuple2<String/*<Character>*/, Global.TGlobal>> $20343 =
                        $20342.asJust();
                        if ($20343 != null) {
                          final PreludeBase.TTuple2<String/*<Character>*/, Global.TGlobal> v2895$20007 =
                          $20343.mem1.call();
                          final State.TStateT<Global.TGlobal, PreludeBase.TMaybe<?>, THover> $20345 =
                          State.IMonad_StateT.<Global.TGlobal, PreludeBase.TMaybe<?>, THover>pure(
                                Maybe.IMonad_Maybe.it,
                                THover.mk(
                                      Thunk.<Range.TRange>shared(
                                            (Lazy<Range.TRange>)(() -> Range.tokenToRange(
                                                      v2895$19875.mem1.call()
                                                    ))
                                          ),
                                      v2895$20007.mem1
                                    )
                              );
                          final Func.U<
                            Global.TGlobal, Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<THover, Global.TGlobal>>
                          > v7739$19980 = $20345.mem$run;
                          return Thunk.<Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<THover, Global.TGlobal>>>shared(
                                    (Lazy<Kind.U<
                                      PreludeBase.TMaybe<?>, PreludeBase.TTuple2<THover, Global.TGlobal>
                                    >>)(() -> (Kind.U<
                                          PreludeBase.TMaybe<?>, PreludeBase.TTuple2<THover, Global.TGlobal>
                                        >)Thunk.<PreludeBase.TMaybe<PreludeBase.TTuple2<THover, Global.TGlobal>>>nested(
                                              (Lazy<Lazy<PreludeBase.TMaybe<
                                                PreludeBase.TTuple2<THover, Global.TGlobal>
                                              >>>)(() -> RunTM.<
                                                    Func.U<
                                                      Global.TGlobal,
                                                      PreludeBase.TMaybe<PreludeBase.TTuple2<THover, Global.TGlobal>>
                                                    >
                                                  >cast(v7739$19980).apply(v2895$20007.mem2))
                                            ).call())
                                  );
                        }
                        final PreludeBase.TMaybe.DNothing<PreludeBase.TTuple2<String/*<Character>*/, Global.TGlobal>> $20347 =
                        $20342.asNothing();
                        assert $20347 != null;
                        return Thunk.<Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<THover, Global.TGlobal>>>lazy(
                                  (Kind.U<
                                    PreludeBase.TMaybe<?>, PreludeBase.TTuple2<THover, Global.TGlobal>
                                  >)PreludeBase.TMaybe.DNothing.<PreludeBase.TTuple2<THover, Global.TGlobal>>mk()
                                );
                      }
                      final PreludeBase.TMaybe.DNothing<
                        PreludeBase.TTuple2<Symbols.TSymbolT<Global.TGlobal>, Global.TGlobal>
                      > $20348 = $20337.asNothing();
                      assert $20348 != null;
                      return Thunk.<Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<THover, Global.TGlobal>>>lazy(
                                (Kind.U<
                                  PreludeBase.TMaybe<?>, PreludeBase.TTuple2<THover, Global.TGlobal>
                                >)PreludeBase.TMaybe.DNothing.<PreludeBase.TTuple2<THover, Global.TGlobal>>mk()
                              );
                    }
                    final PreludeBase.TMaybe.DNothing<PreludeBase.TTuple2<QNames.TQName, Global.TGlobal>> $20349 =
                    $20332.asNothing();
                    assert $20349 != null;
                    return Thunk.<Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<THover, Global.TGlobal>>>lazy(
                              (Kind.U<
                                PreludeBase.TMaybe<?>, PreludeBase.TTuple2<THover, Global.TGlobal>
                              >)PreludeBase.TMaybe.DNothing.<PreludeBase.TTuple2<THover, Global.TGlobal>>mk()
                            );
                  }
                  final PreludeBase.TMaybe.DNothing<PreludeBase.TTuple2<Tokens.TToken, Global.TGlobal>> $20350 =
                  $20327.asNothing();
                  assert $20350 != null;
                  return Thunk.<Kind.U<PreludeBase.TMaybe<?>, PreludeBase.TTuple2<THover, Global.TGlobal>>>lazy(
                            (Kind.U<
                              PreludeBase.TMaybe<?>, PreludeBase.TTuple2<THover, Global.TGlobal>
                            >)PreludeBase.TMaybe.DNothing.<PreludeBase.TTuple2<THover, Global.TGlobal>>mk()
                          );
                })
          );
}
final public static PreludeBase.TMaybe<THover> getTypeSignatureOnHover(
  final Lazy<Position.TPosition> arg$1, final Lazy<Global.TGlobal> arg$2
) {
  return PreludeBase.TMaybe.<THover>coerce(
            State.<THover, PreludeBase.TMaybe<?>, Global.TGlobal>evalStateT(
                  Maybe.IMonad_Maybe.it,
                  Thunk.<State.TStateT<Global.TGlobal, PreludeBase.TMaybe<?>, THover>>shared(
                        (Lazy<State.TStateT<Global.TGlobal, PreludeBase.TMaybe<?>, THover>>)(() -> Hover.getTypeOnHover(
                                  arg$1
                                ))
                      ),
                  arg$2
                )
          );
}
final public static Lazy<QuickCheckGen.TGen<
  QuickCheckProperty.TRose<QuickCheckProperty.TResult>
>> shouldShowLocalVaridTypeSignature = Thunk.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>shared(
      (Lazy<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>)(() -> {
            return QuickCheckProperty.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>once(
                      new QuickCheckProperty.ITestable_Gen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>(
                        QuickCheckProperty.ITestable_Prop.it
                      ),
                      Thunk.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>shared(
                            (Lazy<QuickCheckGen.TGen<
                              QuickCheckProperty.TRose<QuickCheckProperty.TResult>
                            >>)(() -> QuickCheckProperty.<Boolean>morallyDubiousIOProperty(
                                      QuickCheckProperty.ITestable_Bool.it,
                                      (Func.U<RealWorld, Boolean>)((final Lazy<RealWorld> arg$20351) -> {
                                            final Global.TGlobal v2056$19436 = CompileGlobal.standardCompileGlobal
                                            .call().apply(arg$20351).call();
                                            final Func.U<RealWorld, Global.TGlobal> v2053$19455 =
                                            CompileNormalMode.compile(
                                                  Thunk.<String/*<Character>*/>shared(
                                                        (Lazy<String/*
                                                          <Character>
                                                        */>)(() -> "module HoverTest where\n\n" + "simplyString = \"Hello\"")
                                                      ),
                                                  v2056$19436
                                                );
                                            final Global.TGlobal v2056$19458 = v2053$19455
                                            .apply(arg$20351).call();
                                            final Func.U<RealWorld, Boolean> v2057$19459 =
                                            PreludeMonad.IMonad_ST.<RealWorld, Boolean>pure(
                                                  Thunk.<Boolean>shared(
                                                        (Lazy<Boolean>)(() -> Maybe.IEq_Maybe.<
                                                              THover
                                                            >$eq$eq(
                                                                  IEq_Hover.it,
                                                                  PreludeBase.TMaybe.DJust.<
                                                                    THover
                                                                  >mk(
                                                                        THover.mk(
                                                                              Range.TRange.mk(
                                                                                    Position.TPosition.mk(
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                3
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                1
                                                                                              )
                                                                                        ),
                                                                                    Position.TPosition.mk(
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                3
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                13
                                                                                              )
                                                                                        )
                                                                                  ),
                                                                              Thunk.<String/*<Character>*/>lazy(
                                                                                    "simplyString :: String"
                                                                                  )
                                                                            )
                                                                      ),
                                                                  Hover.getTypeSignatureOnHover(
                                                                        Position.TPosition.mk(
                                                                              Thunk.<Integer>lazy(3), Thunk.<Integer>lazy(3)
                                                                            ),
                                                                        v2056$19458
                                                                      )
                                                                ))
                                                      )
                                                );
                                            return Thunk.<Boolean>nested(
                                                      (Lazy<Lazy<Boolean>>)(() -> v2057$19459
                                                          .apply(arg$20351))
                                                    );
                                          })
                                    ))
                          )
                    );
          })
    );
final public static Lazy<QuickCheckGen.TGen<
  QuickCheckProperty.TRose<QuickCheckProperty.TResult>
>> shouldShowLocalConidTypeSignature = Thunk.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>shared(
      (Lazy<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>)(() -> {
            return QuickCheckProperty.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>once(
                      new QuickCheckProperty.ITestable_Gen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>(
                        QuickCheckProperty.ITestable_Prop.it
                      ),
                      Thunk.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>shared(
                            (Lazy<QuickCheckGen.TGen<
                              QuickCheckProperty.TRose<QuickCheckProperty.TResult>
                            >>)(() -> QuickCheckProperty.<Boolean>morallyDubiousIOProperty(
                                      QuickCheckProperty.ITestable_Bool.it,
                                      (Func.U<RealWorld, Boolean>)((final Lazy<RealWorld> arg$20356) -> {
                                            final Global.TGlobal v2056$19378 = CompileGlobal.standardCompileGlobal
                                            .call().apply(arg$20356).call();
                                            final Func.U<RealWorld, Global.TGlobal> v2053$19397 =
                                            CompileNormalMode.compile(
                                                  Thunk.<String/*<Character>*/>shared(
                                                        (Lazy<String/*
                                                          <Character>
                                                        */>)(() -> "module HoverTest where\n\n" + "data MyMaybe a = MyNothing | MyJust a\n")
                                                      ),
                                                  v2056$19378
                                                );
                                            final Global.TGlobal v2056$19400 = v2053$19397
                                            .apply(arg$20356).call();
                                            final Func.U<RealWorld, Boolean> v2057$19401 =
                                            PreludeMonad.IMonad_ST.<RealWorld, Boolean>pure(
                                                  Thunk.<Boolean>shared(
                                                        (Lazy<Boolean>)(() -> Maybe.IEq_Maybe.<
                                                              THover
                                                            >$eq$eq(
                                                                  IEq_Hover.it,
                                                                  PreludeBase.TMaybe.DJust.<
                                                                    THover
                                                                  >mk(
                                                                        THover.mk(
                                                                              Range.TRange.mk(
                                                                                    Position.TPosition.mk(
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                3
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                6
                                                                                              )
                                                                                        ),
                                                                                    Position.TPosition.mk(
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                3
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                13
                                                                                              )
                                                                                        )
                                                                                  ),
                                                                              Thunk.<String/*<Character>*/>lazy(
                                                                                    "MyMaybe :: *->*"
                                                                                  )
                                                                            )
                                                                      ),
                                                                  Hover.getTypeSignatureOnHover(
                                                                        Position.TPosition.mk(
                                                                              Thunk.<Integer>lazy(3), Thunk.<Integer>lazy(7)
                                                                            ),
                                                                        v2056$19400
                                                                      )
                                                                ))
                                                      )
                                                );
                                            return Thunk.<Boolean>nested(
                                                      (Lazy<Lazy<Boolean>>)(() -> v2057$19401
                                                          .apply(arg$20356))
                                                    );
                                          })
                                    ))
                          )
                    );
          })
    );
final public static Lazy<QuickCheckGen.TGen<
  QuickCheckProperty.TRose<QuickCheckProperty.TResult>
>> shouldShowLocalConidDataConstructor = Thunk.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>shared(
      (Lazy<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>)(() -> {
            return QuickCheckProperty.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>once(
                      new QuickCheckProperty.ITestable_Gen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>(
                        QuickCheckProperty.ITestable_Prop.it
                      ),
                      Thunk.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>shared(
                            (Lazy<QuickCheckGen.TGen<
                              QuickCheckProperty.TRose<QuickCheckProperty.TResult>
                            >>)(() -> QuickCheckProperty.<Boolean>morallyDubiousIOProperty(
                                      QuickCheckProperty.ITestable_Bool.it,
                                      (Func.U<RealWorld, Boolean>)((final Lazy<RealWorld> arg$20361) -> {
                                            final Global.TGlobal v2056$19320 = CompileGlobal.standardCompileGlobal
                                            .call().apply(arg$20361).call();
                                            final Func.U<RealWorld, Global.TGlobal> v2053$19339 =
                                            CompileNormalMode.compile(
                                                  Thunk.<String/*<Character>*/>shared(
                                                        (Lazy<String/*
                                                          <Character>
                                                        */>)(() -> "module HoverTest where\n\n" + ("data MyMaybe a = MyNothing | MyJust a\n" + "res = MyJust 42"))
                                                      ),
                                                  v2056$19320
                                                );
                                            final Global.TGlobal v2056$19342 = v2053$19339
                                            .apply(arg$20361).call();
                                            final Func.U<RealWorld, Boolean> v2057$19343 =
                                            PreludeMonad.IMonad_ST.<RealWorld, Boolean>pure(
                                                  Thunk.<Boolean>shared(
                                                        (Lazy<Boolean>)(() -> Maybe.IEq_Maybe.<
                                                              THover
                                                            >$eq$eq(
                                                                  IEq_Hover.it,
                                                                  PreludeBase.TMaybe.DJust.<
                                                                    THover
                                                                  >mk(
                                                                        THover.mk(
                                                                              Range.TRange.mk(
                                                                                    Position.TPosition.mk(
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                4
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                7
                                                                                              )
                                                                                        ),
                                                                                    Position.TPosition.mk(
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                4
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                13
                                                                                              )
                                                                                        )
                                                                                  ),
                                                                              Thunk.<String/*<Character>*/>lazy(
                                                                                    "MyJust :: a -> MyMaybe a"
                                                                                  )
                                                                            )
                                                                      ),
                                                                  Hover.getTypeSignatureOnHover(
                                                                        Position.TPosition.mk(
                                                                              Thunk.<Integer>lazy(4), Thunk.<Integer>lazy(8)
                                                                            ),
                                                                        v2056$19342
                                                                      )
                                                                ))
                                                      )
                                                );
                                            return Thunk.<Boolean>nested(
                                                      (Lazy<Lazy<Boolean>>)(() -> v2057$19343
                                                          .apply(arg$20361))
                                                    );
                                          })
                                    ))
                          )
                    );
          })
    );
final public static Lazy<QuickCheckGen.TGen<
  QuickCheckProperty.TRose<QuickCheckProperty.TResult>
>> shouldShowImportedVaridTypeSignature = Thunk.<
  QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>
>shared(
      (Lazy<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>)(() -> {
            return QuickCheckProperty.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>once(
                      new QuickCheckProperty.ITestable_Gen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>(
                        QuickCheckProperty.ITestable_Prop.it
                      ),
                      Thunk.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>shared(
                            (Lazy<QuickCheckGen.TGen<
                              QuickCheckProperty.TRose<QuickCheckProperty.TResult>
                            >>)(() -> QuickCheckProperty.<Boolean>morallyDubiousIOProperty(
                                      QuickCheckProperty.ITestable_Bool.it,
                                      (Func.U<RealWorld, Boolean>)((final Lazy<RealWorld> arg$20366) -> {
                                            final Global.TGlobal v2056$19610 = CompileGlobal.standardCompileGlobal
                                            .call().apply(arg$20366).call();
                                            final Func.U<RealWorld, Global.TGlobal> v2053$19629 =
                                            CompileNormalMode.compile(
                                                  Thunk.<String/*<Character>*/>shared(
                                                        (Lazy<String/*
                                                          <Character>
                                                        */>)(() -> "module HoverTest where\n\n" + "main = println \"Hello\"")
                                                      ),
                                                  v2056$19610
                                                );
                                            final Global.TGlobal v2056$19632 = v2053$19629
                                            .apply(arg$20366).call();
                                            final Func.U<RealWorld, Boolean> v2057$19633 =
                                            PreludeMonad.IMonad_ST.<RealWorld, Boolean>pure(
                                                  Thunk.<Boolean>shared(
                                                        (Lazy<Boolean>)(() -> Maybe.IEq_Maybe.<
                                                              THover
                                                            >$eq$eq(
                                                                  IEq_Hover.it,
                                                                  PreludeBase.TMaybe.DJust.<
                                                                    THover
                                                                  >mk(
                                                                        THover.mk(
                                                                              Range.TRange.mk(
                                                                                    Position.TPosition.mk(
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                3
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                8
                                                                                              )
                                                                                        ),
                                                                                    Position.TPosition.mk(
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                3
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                15
                                                                                              )
                                                                                        )
                                                                                  ),
                                                                              Thunk.<String/*<Character>*/>lazy(
                                                                                    "println :: Show 𝖆 => 𝖆 -> IO ()"
                                                                                  )
                                                                            )
                                                                      ),
                                                                  Hover.getTypeSignatureOnHover(
                                                                        Position.TPosition.mk(
                                                                              Thunk.<Integer>lazy(3), Thunk.<Integer>lazy(9)
                                                                            ),
                                                                        v2056$19632
                                                                      )
                                                                ))
                                                      )
                                                );
                                            return Thunk.<Boolean>nested(
                                                      (Lazy<Lazy<Boolean>>)(() -> v2057$19633
                                                          .apply(arg$20366))
                                                    );
                                          })
                                    ))
                          )
                    );
          })
    );
final public static Lazy<QuickCheckGen.TGen<
  QuickCheckProperty.TRose<QuickCheckProperty.TResult>
>> shouldShowImportedConidTypeSignature = Thunk.<
  QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>
>shared(
      (Lazy<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>)(() -> {
            return QuickCheckProperty.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>once(
                      new QuickCheckProperty.ITestable_Gen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>(
                        QuickCheckProperty.ITestable_Prop.it
                      ),
                      Thunk.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>shared(
                            (Lazy<QuickCheckGen.TGen<
                              QuickCheckProperty.TRose<QuickCheckProperty.TResult>
                            >>)(() -> QuickCheckProperty.<Boolean>morallyDubiousIOProperty(
                                      QuickCheckProperty.ITestable_Bool.it,
                                      (Func.U<RealWorld, Boolean>)((final Lazy<RealWorld> arg$20371) -> {
                                            final Global.TGlobal v2056$19494 = CompileGlobal.standardCompileGlobal
                                            .call().apply(arg$20371).call();
                                            final Func.U<RealWorld, Global.TGlobal> v2053$19513 =
                                            CompileNormalMode.compile(
                                                  Thunk.<String/*<Character>*/>shared(
                                                        (Lazy<String/*
                                                          <Character>
                                                        */>)(() -> "module HoverTest where\n\n" + "import frege.data.Maybe(Maybe)")
                                                      ),
                                                  v2056$19494
                                                );
                                            final Global.TGlobal v2056$19516 = v2053$19513
                                            .apply(arg$20371).call();
                                            final Func.U<RealWorld, Boolean> v2057$19517 =
                                            PreludeMonad.IMonad_ST.<RealWorld, Boolean>pure(
                                                  Thunk.<Boolean>shared(
                                                        (Lazy<Boolean>)(() -> Maybe.IEq_Maybe.<
                                                              THover
                                                            >$eq$eq(
                                                                  IEq_Hover.it,
                                                                  PreludeBase.TMaybe.DJust.<
                                                                    THover
                                                                  >mk(
                                                                        THover.mk(
                                                                              Range.TRange.mk(
                                                                                    Position.TPosition.mk(
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                3
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                25
                                                                                              )
                                                                                        ),
                                                                                    Position.TPosition.mk(
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                3
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                30
                                                                                              )
                                                                                        )
                                                                                  ),
                                                                              Thunk.<String/*<Character>*/>lazy(
                                                                                    "Maybe :: *->*"
                                                                                  )
                                                                            )
                                                                      ),
                                                                  Hover.getTypeSignatureOnHover(
                                                                        Position.TPosition.mk(
                                                                              Thunk.<Integer>lazy(3), Thunk.<Integer>lazy(27)
                                                                            ),
                                                                        v2056$19516
                                                                      )
                                                                ))
                                                      )
                                                );
                                            return Thunk.<Boolean>nested(
                                                      (Lazy<Lazy<Boolean>>)(() -> v2057$19517
                                                          .apply(arg$20371))
                                                    );
                                          })
                                    ))
                          )
                    );
          })
    );
final public static Lazy<QuickCheckGen.TGen<
  QuickCheckProperty.TRose<QuickCheckProperty.TResult>
>> shouldShowImportedConidDataConstructor = Thunk.<
  QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>
>shared(
      (Lazy<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>)(() -> {
            return QuickCheckProperty.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>once(
                      new QuickCheckProperty.ITestable_Gen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>(
                        QuickCheckProperty.ITestable_Prop.it
                      ),
                      Thunk.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>shared(
                            (Lazy<QuickCheckGen.TGen<
                              QuickCheckProperty.TRose<QuickCheckProperty.TResult>
                            >>)(() -> QuickCheckProperty.<Boolean>morallyDubiousIOProperty(
                                      QuickCheckProperty.ITestable_Bool.it,
                                      (Func.U<RealWorld, Boolean>)((final Lazy<RealWorld> arg$20376) -> {
                                            final Global.TGlobal v2056$19552 = CompileGlobal.standardCompileGlobal
                                            .call().apply(arg$20376).call();
                                            final Func.U<RealWorld, Global.TGlobal> v2053$19571 =
                                            CompileNormalMode.compile(
                                                  Thunk.<String/*<Character>*/>shared(
                                                        (Lazy<String/*
                                                          <Character>
                                                        */>)(() -> "module HoverTest where\n\n" + ("import frege.data.Maybe(Maybe, Just)\n" + "res = Just 42"))
                                                      ),
                                                  v2056$19552
                                                );
                                            final Global.TGlobal v2056$19574 = v2053$19571
                                            .apply(arg$20376).call();
                                            final Func.U<RealWorld, Boolean> v2057$19575 =
                                            PreludeMonad.IMonad_ST.<RealWorld, Boolean>pure(
                                                  Thunk.<Boolean>shared(
                                                        (Lazy<Boolean>)(() -> Maybe.IEq_Maybe.<
                                                              THover
                                                            >$eq$eq(
                                                                  IEq_Hover.it,
                                                                  PreludeBase.TMaybe.DJust.<
                                                                    THover
                                                                  >mk(
                                                                        THover.mk(
                                                                              Range.TRange.mk(
                                                                                    Position.TPosition.mk(
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                4
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                7
                                                                                              )
                                                                                        ),
                                                                                    Position.TPosition.mk(
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                4
                                                                                              ),
                                                                                          Thunk.<
                                                                                            Integer
                                                                                          >lazy(
                                                                                                11
                                                                                              )
                                                                                        )
                                                                                  ),
                                                                              Thunk.<String/*<Character>*/>lazy(
                                                                                    "Just :: a -> Maybe a"
                                                                                  )
                                                                            )
                                                                      ),
                                                                  Hover.getTypeSignatureOnHover(
                                                                        Position.TPosition.mk(
                                                                              Thunk.<Integer>lazy(4), Thunk.<Integer>lazy(10)
                                                                            ),
                                                                        v2056$19574
                                                                      )
                                                                ))
                                                      )
                                                );
                                            return Thunk.<Boolean>nested(
                                                      (Lazy<Lazy<Boolean>>)(() -> v2057$19575
                                                          .apply(arg$20376))
                                                    );
                                          })
                                    ))
                          )
                    );
          })
    );
final public static Lazy<Func.U<RealWorld, Short>> $main = Thunk.<Func.U<RealWorld, Short>>shared(
      (Lazy<Func.U<RealWorld, Short>>)(() -> {
            return (Func.U<RealWorld, Short>)((final Lazy<RealWorld> arg$20381) -> {
                      final Global.TGlobal v2056$19661 = CompileGlobal.standardCompileGlobal
                      .call().apply(arg$20381).call();
                      final Func.U<RealWorld, Global.TGlobal> v2053$19680 = CompileNormalMode.compile(
                            Thunk.<String/*<Character>*/>shared(
                                  (Lazy<String/*
                                    <Character>
                                  */>)(() -> "module HoverTest where\n\n" + ("data MyMaybe a = MyNothing | MyJust a\n" + "res = MyJust 42"))
                                ),
                            v2056$19661
                          );
                      final Global.TGlobal v2056$19683 = v2053$19680.apply(arg$20381)
                      .call();
                      final Func.U<RealWorld, Short> v4793$19705 = Prelude.<String/*<Character>*/>println(
                            PreludeText.IShow_String.it, Global.TSubSt.code(Global.TGlobal.sub(v2056$19683)).toString()
                          );
                      final short v4796$19707 = (short)v4793$19705.apply(arg$20381).call();
                      final Func.U<RealWorld, Short> v4797$19708 = ((Func.U<RealWorld, Short>)((
                        final Lazy<RealWorld> arg$20389
                      ) -> {
                            final short v4796$19738 = (short)Func.<RealWorld, Short>coerceU(
                                  PreludeMonad.<Func.U<RealWorld, ?>, Tokens.TToken, Short, PreludeBase.TList<?>>$for(
                                        PreludeMonad.IMonad_ST.<RealWorld>mk(),
                                        PreludeList.IListSource_$lbrack$rbrack.<PreludeBase.TList<?>>mk(),
                                        Thunk.<Kind.U<PreludeBase.TList<?>, Tokens.TToken>>shared(
                                              (Lazy<Kind.U<PreludeBase.TList<?>, Tokens.TToken>>)(() -> (Kind.U<
                                                    PreludeBase.TList<?>, Tokens.TToken
                                                  >)Thunk.<PreludeBase.TList<Tokens.TToken>>shared(
                                                        (Lazy<PreludeBase.TList<
                                                          Tokens.TToken
                                                        >>)(() -> Tokens.IArrayElement_Token.listFromArray(
                                                                  Global.TSubSt.toks(Global.TGlobal.sub(v2056$19683))
                                                                ))
                                                      ).call())
                                            ),
                                        (Func.U<Tokens.TToken, Kind.U<Func.U<RealWorld, ?>, Short>>)((
                                          final Lazy<Tokens.TToken> η$20388
                                        ) -> Thunk.<Kind.U<Func.U<RealWorld, ?>, Short>>shared(
                                                  (Lazy<Kind.U<Func.U<RealWorld, ?>, Short>>)(() -> (Kind.U<
                                                        Func.U<RealWorld, ?>, Short
                                                      >)Thunk.<Func.U<RealWorld, Short>>shared(
                                                            (Lazy<Func.U<RealWorld, Short>>)(() -> Prelude.<
                                                                  Tokens.TToken
                                                                >println(Tokens.IShow_Token.it, η$20388.call()))
                                                          ).call())
                                                ))
                                      )
                                ).apply(arg$20389).call();
                            final Func.U<RealWorld, Short> v4797$19739 = ((Func.U<RealWorld, Short>)((
                              final Lazy<RealWorld> arg$20385
                            ) -> {
                                  final short v4796$19762 = (short)Prelude.<PreludeBase.TMaybe<THover>>println(
                                        new PreludeText.IShow_Maybe<THover>(IShow_Hover.it),
                                        Hover.getTypeSignatureOnHover(
                                              Position.TPosition.mk(Thunk.<Integer>lazy(5), Thunk.<Integer>lazy(9)), v2056$19683
                                            )
                                      ).apply(arg$20385).call();
                                  final Func.U<RealWorld, Short> v4797$19763 = Thunk.<
                                    Func.U<RealWorld, Short>
                                  >shared(
                                        (Lazy<Func.U<RealWorld, Short>>)(() -> Prelude.<
                                              String/*<Character>*/
                                            >println(PreludeText.IShow_String.it, "end"))
                                      ).call();
                                  return Thunk.<Short>nested((Lazy<Lazy<Short>>)(() -> v4797$19763.apply(arg$20385)));
                                })).call();
                            return Thunk.<Short>nested((Lazy<Lazy<Short>>)(() -> v4797$19739.apply(arg$20389)));
                          })).call();
                      return Thunk.<Short>nested((Lazy<Lazy<Short>>)(() -> v4797$19708.apply(arg$20381)));
                    });
          })
    );

  public static void main(final java.lang.String[] argv) {
    try {
      frege.run.RunTM.argv = argv;
      
        PreludeBase.TST.<Short>performUnsafe($main
               .call()
          ).call();
      frege.runtime.Runtime.stdout.get().close();
      frege.runtime.Runtime.stderr.get().close();

    } finally { frege.run.Concurrent.shutDownIfExists(); }
  }
}
