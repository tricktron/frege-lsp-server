/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.25.84
  from /Users/tricktron/github/master/frege-lsp-server/src/main/frege/ch/fhnw/thga/TypeSignature.fr
  Do not edit this file! Instead, edit the source file and recompile.
*/

package ch.fhnw.thga;

import frege.run8.Func;
import frege.run8.Lazy;
import frege.run8.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import frege.Prelude;
import frege.Version;
import frege.compiler.Classes;
import frege.compiler.Classtools;
import frege.compiler.GenMeta;
import frege.compiler.Javatypes;
import frege.compiler.Kinds;
import frege.compiler.Main;
import frege.compiler.Typecheck;
import frege.compiler.Utilities;
import frege.compiler.classes.Nice;
import frege.compiler.classes.QNameMatcher;
import frege.compiler.common.Annotate;
import frege.compiler.common.AnnotateG;
import frege.compiler.common.Binders;
import frege.compiler.common.CompilerOptions;
import frege.compiler.common.Desugar;
import frege.compiler.common.Errors;
import frege.compiler.common.ImpExp;
import frege.compiler.common.JavaName;
import frege.compiler.common.Mangle;
import frege.compiler.common.PatternCompiler;
import frege.compiler.common.Resolve;
import frege.compiler.common.Roman;
import frege.compiler.common.SymbolTable;
import frege.compiler.common.Trans;
import frege.compiler.common.Tuples;
import frege.compiler.common.Types;
import frege.compiler.common.UnAlias;
import frege.compiler.enums.CaseKind;
import frege.compiler.enums.Flags;
import frege.compiler.enums.Literals;
import frege.compiler.enums.RFlag;
import frege.compiler.enums.SymState;
import frege.compiler.enums.TokenID;
import frege.compiler.enums.Visibility;
import frege.compiler.gen.java.Bindings;
import frege.compiler.gen.java.Common;
import frege.compiler.gen.java.Constants;
import frege.compiler.gen.java.DataCode;
import frege.compiler.gen.java.InstanceCode;
import frege.compiler.gen.java.Instantiation;
import frege.compiler.gen.java.Match;
import frege.compiler.gen.java.MethodCall;
import frege.compiler.gen.java.PrettyJava;
import frege.compiler.gen.java.VarCode;
import frege.compiler.grammar.Frege;
import frege.compiler.grammar.Lexer;
import frege.compiler.instances.NiceExprS;
import frege.compiler.instances.Nicer;
import frege.compiler.instances.PositionedSName;
import frege.compiler.passes.Easy;
import frege.compiler.passes.Enter;
import frege.compiler.passes.Fields;
import frege.compiler.passes.Final;
import frege.compiler.passes.Fix;
import frege.compiler.passes.GenCode;
import frege.compiler.passes.GlobalLam;
import frege.compiler.passes.Imp;
import frege.compiler.passes.Instances;
import frege.compiler.passes.LetUnroll;
import frege.compiler.passes.Strict;
import frege.compiler.passes.Transdef;
import frege.compiler.passes.TypeAlias;
import frege.compiler.tc.Methods;
import frege.compiler.tc.Patterns;
import frege.compiler.tc.Util;
import frege.compiler.types.AbstractJava;
import frege.compiler.types.ConstructorField;
import frege.compiler.types.Expression;
import frege.compiler.types.External;
import frege.compiler.types.Global;
import frege.compiler.types.ImportDetails;
import frege.compiler.types.JNames;
import frege.compiler.types.NSNames;
import frege.compiler.types.Packs;
import frege.compiler.types.Positions;
import frege.compiler.types.QNames;
import frege.compiler.types.SNames;
import frege.compiler.types.SourceDefinitions;
import frege.compiler.types.Strictness;
import frege.compiler.types.Symbols;
import frege.compiler.types.Targets;
import frege.compiler.types.Tokens;
import frege.control.Arrow;
import frege.control.Category;
import frege.control.CombineIn;
import frege.control.Concurrent;
import frege.control.First;
import frege.control.Second;
import frege.control.Semigroupoid;
import frege.control.Tensor;
import frege.control.arrow.Kleisli;
import frege.control.monad.Reader;
import frege.control.monad.State;
import frege.control.monad.trans.MonadIO;
import frege.control.monad.trans.MonadTrans;
import frege.data.Bits;
import frege.data.Char;
import frege.data.Foldable;
import frege.data.Graph;
import frege.data.List;
import frege.data.Monoid;
import frege.data.Traversable;
import frege.data.Tree;
import frege.data.TreeMap;
import frege.data.wrapper.Const;
import frege.data.wrapper.Dual;
import frege.data.wrapper.Endo;
import frege.data.wrapper.Identity;
import frege.data.wrapper.Num;
import frege.interpreter.FregeInterpreter;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Net;
import frege.java.util.Regex;
import frege.java.util.Zip;
import frege.lib.Modules;
import frege.lib.PP;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeDecimal;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;
import frege.system.Random;
import frege.test.QuickCheck;
import frege.test.QuickCheckArbitrary;
import frege.test.QuickCheckException;
import frege.test.QuickCheckGen;
import frege.test.QuickCheckModifiers;
import frege.test.QuickCheckProperty;
import frege.test.QuickCheckState;
import frege.test.QuickCheckTest;
import frege.test.QuickCheckText;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="/Users/tricktron/github/master/frege-lsp-server/src/main/frege/ch/fhnw/thga/TypeSignature.fr",
  time=1628610980388L, jmajor=11, jminor=-1,
  imps={
    "frege.interpreter.FregeInterpreter", "frege.control.monad.trans.MonadIO", "frege.Prelude",
    "frege.prelude.PreludeArrays", "frege.prelude.PreludeBase", "frege.prelude.PreludeDecimal",
    "frege.prelude.PreludeIO", "frege.prelude.PreludeList", "frege.prelude.PreludeMonad", "frege.prelude.PreludeText",
    "frege.java.util.Regex"
  },
  nmss={
    "FregeInterpreter", "MonadIO", "Prelude", "PreludeArrays", "PreludeBase", "PreludeDecimal", "PreludeIO",
    "PreludeList", "PreludeMonad", "PreludeText", "Regexp"
  },
  symas={}, symcs={}, symis={}, symts={},
  symvs={
    @Meta.SymV(
      offset=113, name=@Meta.QName(pack="ch.fhnw.thga.TypeSignature", base="getTypeSignature"), stri="s(u)",
      sig=1, depth=1, rkind=13
    )
  },
  symls={},
  taus={
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}),
    @Meta.Tau(kind=0, suba=0, subb=1),
    @Meta.Tau(
      kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.interpreter.FregeInterpreter", base="Interpreter")}
    ),
    @Meta.Tau(kind=0, suba=3, subb=2)
  },
  rhos={@Meta.Rho(rhofun=false, rhotau=2), @Meta.Rho(rhofun=false, rhotau=4), @Meta.Rho(sigma=0, rhotau=1)},
  sigmas={@Meta.Sigma(rho=0), @Meta.Sigma(rho=2)}, exprs={@Meta.Expr()}
)
final public class TypeSignature  {
  




final public static Kleisli.TKleisli<
  State.TStateT<
    frege.interpreter.javasupport.InterpreterClassLoader, State.TStateT<Global.TGlobal, Func.U<RealWorld, ?>, ?>, ?
  >,
  FregeInterpreter.TInterpreterConfig, String/*<Character>*/
> getTypeSignature(final Lazy<String/*<Character>*/> arg$1) {
  return FregeInterpreter.IMonad_Interpreter.<
        PreludeBase.TEither<PreludeBase.TList<FregeInterpreter.TMessage>, String/*<Character>*/>, String/*<Character>*/
      >$gt$gt$eq(
            FregeInterpreter.typeof(arg$1),
            (Func.U<
              PreludeBase.TEither<PreludeBase.TList<FregeInterpreter.TMessage>, String/*<Character>*/>,
              Kleisli.TKleisli<
                State.TStateT<
                  frege.interpreter.javasupport.InterpreterClassLoader, State.TStateT<Global.TGlobal, Func.U<RealWorld, ?>, ?>,
                  ?
                >,
                FregeInterpreter.TInterpreterConfig, String/*<Character>*/
              >
            >)((
              final Lazy<PreludeBase.TEither<PreludeBase.TList<FregeInterpreter.TMessage>, String/*<Character>*/>> arg$18384
            ) -> {
                  final PreludeBase.TEither<PreludeBase.TList<FregeInterpreter.TMessage>, String/*<Character>*/> res$18355 =
                  arg$18384.call();
                  final PreludeBase.TEither.DLeft<PreludeBase.TList<FregeInterpreter.TMessage>, String/*<Character>*/> $18386 =
                  res$18355.asLeft();
                  if ($18386 != null) {
                    final PreludeBase.TList<FregeInterpreter.TMessage> $18387 = $18386.mem1
                    .call();
                    final PreludeBase.TList.DCons<FregeInterpreter.TMessage> $18388 =
                    $18387.asCons();
                    if ($18388 != null) {
                      final PreludeBase.TList<FregeInterpreter.TMessage> $18389 = $18388.mem2
                      .call();
                      final PreludeBase.TList.DList<FregeInterpreter.TMessage> $18390 =
                      $18389.asList();
                      if ($18390 != null) {
                        final FregeInterpreter.TMessage $18391 = $18388.mem1.call();
                        return Thunk.<
                              Kleisli.TKleisli<
                                State.TStateT<
                                  frege.interpreter.javasupport.InterpreterClassLoader,
                                  State.TStateT<Global.TGlobal, Func.U<RealWorld, ?>, ?>, ?
                                >,
                                FregeInterpreter.TInterpreterConfig, String/*<Character>*/
                              >
                            >shared(
                                  (Lazy<Kleisli.TKleisli<
                                    State.TStateT<
                                      frege.interpreter.javasupport.InterpreterClassLoader,
                                      State.TStateT<Global.TGlobal, Func.U<RealWorld, ?>, ?>, ?
                                    >,
                                    FregeInterpreter.TInterpreterConfig, String/*<Character>*/
                                  >>)(() -> FregeInterpreter.IMonad_Interpreter.<String/*<Character>*/>pure(
                                            $18391.mem$text
                                          ))
                                );
                      }
                    }
                  }
                  final PreludeBase.TEither.DRight<PreludeBase.TList<FregeInterpreter.TMessage>, String/*<Character>*/> $18392 =
                  res$18355.asRight();
                  if ($18392 != null) {
                    return Thunk.<
                          Kleisli.TKleisli<
                            State.TStateT<
                              frege.interpreter.javasupport.InterpreterClassLoader,
                              State.TStateT<Global.TGlobal, Func.U<RealWorld, ?>, ?>, ?
                            >,
                            FregeInterpreter.TInterpreterConfig, String/*<Character>*/
                          >
                        >shared(
                              (Lazy<Kleisli.TKleisli<
                                State.TStateT<
                                  frege.interpreter.javasupport.InterpreterClassLoader,
                                  State.TStateT<Global.TGlobal, Func.U<RealWorld, ?>, ?>, ?
                                >,
                                FregeInterpreter.TInterpreterConfig, String/*<Character>*/
                              >>)(() -> FregeInterpreter.IMonad_Interpreter.<String/*<Character>*/>pure(
                                        $18392.mem1
                                      ))
                            );
                  }
                  return Thunk.<
                        Kleisli.TKleisli<
                          State.TStateT<
                            frege.interpreter.javasupport.InterpreterClassLoader,
                            State.TStateT<Global.TGlobal, Func.U<RealWorld, ?>, ?>, ?
                          >,
                          FregeInterpreter.TInterpreterConfig, String/*<Character>*/
                        >
                      >shared(
                            (Lazy<Kleisli.TKleisli<
                              State.TStateT<
                                frege.interpreter.javasupport.InterpreterClassLoader,
                                State.TStateT<Global.TGlobal, Func.U<RealWorld, ?>, ?>, ?
                              >,
                              FregeInterpreter.TInterpreterConfig, String/*<Character>*/
                            >>)(() -> FregeInterpreter.IMonad_Interpreter.<String/*<Character>*/>pure(
                                      Thunk.<String/*<Character>*/>lazy("Could not infer type")
                                    ))
                          );
                })
          );
}

}
