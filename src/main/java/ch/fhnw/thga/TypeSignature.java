/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.25.84
  from /Users/tricktron/github/master/frege-lsp-server/src/main/frege/ch/fhnw/thga/TypeSignature.fr
  Do not edit this file! Instead, edit the source file and recompile.
*/

package ch.fhnw.thga;

import frege.run8.Func;
import frege.run8.Lazy;
import frege.run8.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import frege.Prelude;
import frege.Version;
import frege.compiler.Classes;
import frege.compiler.Classtools;
import frege.compiler.GenMeta;
import frege.compiler.Javatypes;
import frege.compiler.Kinds;
import frege.compiler.Main;
import frege.compiler.Typecheck;
import frege.compiler.Utilities;
import frege.compiler.classes.Nice;
import frege.compiler.classes.QNameMatcher;
import frege.compiler.common.Annotate;
import frege.compiler.common.AnnotateG;
import frege.compiler.common.Binders;
import frege.compiler.common.CompilerOptions;
import frege.compiler.common.Desugar;
import frege.compiler.common.Errors;
import frege.compiler.common.ImpExp;
import frege.compiler.common.JavaName;
import frege.compiler.common.Mangle;
import frege.compiler.common.PatternCompiler;
import frege.compiler.common.Resolve;
import frege.compiler.common.Roman;
import frege.compiler.common.SymbolTable;
import frege.compiler.common.Trans;
import frege.compiler.common.Tuples;
import frege.compiler.common.Types;
import frege.compiler.common.UnAlias;
import frege.compiler.enums.CaseKind;
import frege.compiler.enums.Flags;
import frege.compiler.enums.Literals;
import frege.compiler.enums.RFlag;
import frege.compiler.enums.SymState;
import frege.compiler.enums.TokenID;
import frege.compiler.enums.Visibility;
import frege.compiler.gen.java.Bindings;
import frege.compiler.gen.java.Common;
import frege.compiler.gen.java.Constants;
import frege.compiler.gen.java.DataCode;
import frege.compiler.gen.java.InstanceCode;
import frege.compiler.gen.java.Instantiation;
import frege.compiler.gen.java.Match;
import frege.compiler.gen.java.MethodCall;
import frege.compiler.gen.java.PrettyJava;
import frege.compiler.gen.java.VarCode;
import frege.compiler.grammar.Frege;
import frege.compiler.grammar.Lexer;
import frege.compiler.instances.NiceExprS;
import frege.compiler.instances.Nicer;
import frege.compiler.instances.PositionedSName;
import frege.compiler.passes.Easy;
import frege.compiler.passes.Enter;
import frege.compiler.passes.Fields;
import frege.compiler.passes.Final;
import frege.compiler.passes.Fix;
import frege.compiler.passes.GenCode;
import frege.compiler.passes.GlobalLam;
import frege.compiler.passes.Imp;
import frege.compiler.passes.Instances;
import frege.compiler.passes.LetUnroll;
import frege.compiler.passes.Strict;
import frege.compiler.passes.Transdef;
import frege.compiler.passes.TypeAlias;
import frege.compiler.tc.Methods;
import frege.compiler.tc.Patterns;
import frege.compiler.tc.Util;
import frege.compiler.types.AbstractJava;
import frege.compiler.types.ConstructorField;
import frege.compiler.types.Expression;
import frege.compiler.types.External;
import frege.compiler.types.Global;
import frege.compiler.types.ImportDetails;
import frege.compiler.types.JNames;
import frege.compiler.types.NSNames;
import frege.compiler.types.Packs;
import frege.compiler.types.Positions;
import frege.compiler.types.QNames;
import frege.compiler.types.SNames;
import frege.compiler.types.SourceDefinitions;
import frege.compiler.types.Strictness;
import frege.compiler.types.Symbols;
import frege.compiler.types.Targets;
import frege.compiler.types.Tokens;
import frege.control.Arrow;
import frege.control.Category;
import frege.control.CombineIn;
import frege.control.Concurrent;
import frege.control.First;
import frege.control.Second;
import frege.control.Semigroupoid;
import frege.control.Tensor;
import frege.control.arrow.Kleisli;
import frege.control.monad.Reader;
import frege.control.monad.State;
import frege.control.monad.trans.MonadIO;
import frege.control.monad.trans.MonadTrans;
import frege.data.Bits;
import frege.data.Char;
import frege.data.Foldable;
import frege.data.Graph;
import frege.data.List;
import frege.data.Monoid;
import frege.data.Traversable;
import frege.data.Tree;
import frege.data.TreeMap;
import frege.data.wrapper.Const;
import frege.data.wrapper.Dual;
import frege.data.wrapper.Endo;
import frege.data.wrapper.Identity;
import frege.data.wrapper.Num;
import frege.interpreter.FregeInterpreter;
import frege.java.Awt;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Net;
import frege.java.Swing;
import frege.java.lang.Reflect;
import frege.java.swing.GroupLayout;
import frege.java.util.Regex;
import frege.java.util.Zip;
import frege.lib.Modules;
import frege.lib.PP;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeDecimal;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;
import frege.repl.FregeRepl;
import frege.repl.Gui;
import frege.system.Random;
import frege.test.QuickCheck;
import frege.test.QuickCheckArbitrary;
import frege.test.QuickCheckException;
import frege.test.QuickCheckGen;
import frege.test.QuickCheckModifiers;
import frege.test.QuickCheckProperty;
import frege.test.QuickCheckState;
import frege.test.QuickCheckTest;
import frege.test.QuickCheckText;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="/Users/tricktron/github/master/frege-lsp-server/src/main/frege/ch/fhnw/thga/TypeSignature.fr",
  time=1651667093205L, jmajor=11, jminor=-1,
  imps={
    "frege.compiler.enums.Flags", "frege.interpreter.FregeInterpreter", "frege.repl.FregeRepl",
    "frege.control.monad.trans.MonadIO", "frege.Prelude", "frege.prelude.PreludeArrays", "frege.prelude.PreludeBase",
    "frege.prelude.PreludeDecimal", "frege.prelude.PreludeIO", "frege.prelude.PreludeList",
    "frege.prelude.PreludeMonad", "frege.prelude.PreludeText", "frege.java.util.Regex"
  },
  nmss={
    "Flags", "FregeInterpreter", "FregeRepl", "MonadIO", "Prelude", "PreludeArrays", "PreludeBase",
    "PreludeDecimal", "PreludeIO", "PreludeList", "PreludeMonad", "PreludeText", "Regexp"
  },
  symas={}, symcs={}, symis={},
  symts={
    @Meta.SymT(
      offset=270, name=@Meta.QName(kind=0, pack="ch.fhnw.thga.TypeSignature", base="ArrayList"), typ=0,
      kind=16, cons={}, lnks={},
      funs={
        @Meta.SymV(
          offset=384, name=@Meta.QName(kind=2, pack="ch.fhnw.thga.TypeSignature", base="ArrayList", member="new"),
          stri="s(s)", sig=2, nativ="new", depth=1, rkind=9
        ),
        @Meta.SymV(
          offset=326, name=@Meta.QName(kind=2, pack="ch.fhnw.thga.TypeSignature", base="ArrayList", member="add"),
          stri="s(ss)", sig=5, nativ="add", depth=2, rkind=9
        ),
        @Meta.SymV(
          offset=426,
          name=@Meta.QName(kind=2, pack="ch.fhnw.thga.TypeSignature", base="ArrayList", member="fromFregeList"),
          stri="s(u)", sig=7, depth=1, rkind=13
        )
      },
      nativ="java.util.ArrayList", gargs={2}
    )
  },
  symvs={
    @Meta.SymV(
      offset=690, name=@Meta.QName(pack="ch.fhnw.thga.TypeSignature", base="initialReplEnv"), stri="u",
      sig=8, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=1072, name=@Meta.QName(pack="ch.fhnw.thga.TypeSignature", base="getFunctionTypeSignature"), stri="s(uu)",
      sig=11, depth=2, rkind=12
    ),
    @Meta.SymV(
      offset=1216, name=@Meta.QName(pack="ch.fhnw.thga.TypeSignature", base="evalType"), stri="s(u)",
      sig=12, depth=1, rkind=13
    ),
    @Meta.SymV(
      offset=906, name=@Meta.QName(pack="ch.fhnw.thga.TypeSignature", base="evalFregeFile"), stri="s(uu)",
      sig=13, depth=2, rkind=13
    )
  },
  symls={},
  taus={
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="ch.fhnw.thga.TypeSignature", base="ArrayList")}),
    @Meta.Tau(kind=9), @Meta.Tau(suba=1, tvar="a"), @Meta.Tau(kind=0, suba=0, subb=2),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="()")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="ST")}),
    @Meta.Tau(suba=1, tvar="s"), @Meta.Tau(kind=0, suba=5, subb=6),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeIO", base="Mutable")}),
    @Meta.Tau(kind=0, suba=8, subb=6), @Meta.Tau(kind=0, suba=9, subb=3), @Meta.Tau(kind=0, suba=7, subb=10),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Bool")}),
    @Meta.Tau(kind=0, suba=7, subb=12),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}),
    @Meta.Tau(kind=0, suba=14, subb=2), @Meta.Tau(kind=8, suba=1, subb=1),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="RealWorld")}),
    @Meta.Tau(kind=0, suba=5, subb=17),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.repl.FregeRepl", base="ReplEnv")}),
    @Meta.Tau(kind=0, suba=18, subb=19),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}),
    @Meta.Tau(kind=0, suba=21, subb=22),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="(,)")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Maybe")}),
    @Meta.Tau(kind=0, suba=25, subb=23), @Meta.Tau(kind=0, suba=24, subb=26), @Meta.Tau(kind=0, suba=27, subb=19),
    @Meta.Tau(kind=0, suba=18, subb=28),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.repl.FregeRepl", base="Repl")}),
    @Meta.Tau(kind=0, suba=30, subb=26),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.repl.FregeRepl", base="ReplResult")}),
    @Meta.Tau(kind=0, suba=24, subb=32), @Meta.Tau(kind=0, suba=33, subb=19), @Meta.Tau(kind=0, suba=18, subb=34)
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=3), @Meta.Rho(rhofun=false, rhotau=4), @Meta.Rho(rhofun=false, rhotau=11),
    @Meta.Rho(sigma=1, rhotau=2), @Meta.Rho(rhofun=false, rhotau=10), @Meta.Rho(rhofun=false, rhotau=2),
    @Meta.Rho(rhofun=false, rhotau=13), @Meta.Rho(sigma=4, rhotau=6), @Meta.Rho(sigma=3, rhotau=7),
    @Meta.Rho(rhofun=false, rhotau=15), @Meta.Rho(sigma=6, rhotau=2), @Meta.Rho(rhofun=false, rhotau=20),
    @Meta.Rho(rhofun=false, rhotau=23), @Meta.Rho(rhofun=false, rhotau=19), @Meta.Rho(rhofun=false, rhotau=29),
    @Meta.Rho(sigma=10, rhotau=14), @Meta.Rho(sigma=9, rhotau=15), @Meta.Rho(rhofun=false, rhotau=31),
    @Meta.Rho(sigma=9, rhotau=17), @Meta.Rho(rhofun=false, rhotau=35), @Meta.Rho(sigma=10, rhotau=19),
    @Meta.Rho(sigma=9, rhotau=20)
  },
  sigmas={
    @Meta.Sigma(bound={"a"}, kinds={1}, rho=0), @Meta.Sigma(rho=1), @Meta.Sigma(bound={"a", "s"}, kinds={1, 1}, rho=3),
    @Meta.Sigma(rho=4), @Meta.Sigma(rho=5), @Meta.Sigma(bound={"a", "s"}, kinds={1, 1}, rho=8), @Meta.Sigma(rho=9),
    @Meta.Sigma(bound={"a", "s"}, kinds={1, 1}, rho=10), @Meta.Sigma(rho=11), @Meta.Sigma(rho=12), @Meta.Sigma(rho=13),
    @Meta.Sigma(rho=16), @Meta.Sigma(rho=18), @Meta.Sigma(rho=21)
  },
  exprs={@Meta.Expr()}
)
final public class TypeSignature  {
  



final public static class TArrayList  {
  @SuppressWarnings("unchecked") final public static <𝓐, 𝓢> Func.U<𝓢, java.util.ArrayList<𝓐>> $new(
    final short arg$1
  ) {
    return (Func.U<𝓢, java.util.ArrayList<𝓐>>)((final Lazy<𝓢> _state) -> {
              return Thunk.<java.util.ArrayList<𝓐>>lazy((java.util.ArrayList<𝓐>)new java.util.ArrayList<𝓐>());
            });
  }
  final public static <𝓐, 𝓢> Func.U<𝓢, Boolean> add(final java.util.ArrayList<𝓐> arg$1, final 𝓐 arg$2) {
    return (Func.U<𝓢, Boolean>)((final Lazy<𝓢> _state) -> {
              return Thunk.<Boolean>lazy(arg$1.add(arg$2));
            });
  }
  final public static <𝓐, 𝓢> Func.U<𝓢, java.util.ArrayList<𝓐>> fromFregeList(final Lazy<PreludeBase.TList<𝓐>> arg$1) {
    return (Func.U<𝓢, java.util.ArrayList<𝓐>>)((final Lazy<𝓢> arg$19124) -> {
              final java.util.ArrayList<𝓐> v2056$19108 = TArrayList.<𝓐, 𝓢>$new(PreludeBase.TUnit.Unit)
              .apply(arg$19124).call();
              final Func.U<𝓢, java.util.ArrayList<𝓐>> v2057$19109 = TypeSignature.<𝓐, 𝓢>go(
                    arg$1.call(), Thunk.<java.util.ArrayList<𝓐>>lazy(v2056$19108)
                  );
              return Thunk.<java.util.ArrayList<𝓐>>nested(
                        (Lazy<Lazy<java.util.ArrayList<𝓐>>>)(() -> v2057$19109.apply(
                                  arg$19124
                                ))
                      );
            });
  }
}
final public static Lazy<Func.U<RealWorld, FregeRepl.TReplEnv>> initialReplEnv = Thunk.<
  Func.U<RealWorld, FregeRepl.TReplEnv>
>shared(
      (Lazy<Func.U<RealWorld, FregeRepl.TReplEnv>>)(() -> {
            return (Func.U<RealWorld, FregeRepl.TReplEnv>)((final Lazy<RealWorld> arg$19127) -> {
                      final FregeRepl.TReplEnv v2056$18989 = FregeRepl.TReplEnv.initialState
                      .call().apply(arg$19127).call();
                      final Func.U<RealWorld, FregeRepl.TReplEnv> v2057$18990 = PreludeMonad.IMonad_ST.<
                        RealWorld, FregeRepl.TReplEnv
                      >pure(
                            Thunk.<FregeRepl.TReplEnv>shared(
                                  (Lazy<FregeRepl.TReplEnv>)(() -> FregeRepl.TReplEnv.chg$config(
                                            v2056$18989,
                                            (Func.U<FregeInterpreter.TInterpreterConfig, FregeInterpreter.TInterpreterConfig>)((
                                              final Lazy<FregeInterpreter.TInterpreterConfig> η$19129
                                            ) -> Thunk.<FregeInterpreter.TInterpreterConfig>nested(
                                                      (Lazy<Lazy<FregeInterpreter.TInterpreterConfig>>)(() -> PreludeBase.<
                                                            FregeInterpreter.TInterpreterConfig,
                                                            FregeInterpreter.TInterpreterConfig, Long
                                                          >flip(
                                                                (Func.U<
                                                                  FregeInterpreter.TInterpreterConfig,
                                                                  Func.U<Long, FregeInterpreter.TInterpreterConfig>
                                                                >)((
                                                                  final Lazy<FregeInterpreter.TInterpreterConfig> η$19130
                                                                ) -> (Func.U<Long, FregeInterpreter.TInterpreterConfig>)((
                                                                      final Lazy<Long> η$19131
                                                                    ) -> Thunk.<FregeInterpreter.TInterpreterConfig>shared(
                                                                              (Lazy<FregeInterpreter.TInterpreterConfig>)(() -> FregeInterpreter.TInterpreterConfig.upd$compilerFlags(
                                                                                        η$19130
                                                                                        .call(),
                                                                                        η$19131
                                                                                      ))
                                                                            ))),
                                                                Thunk.<Long>shared(
                                                                      (Lazy<Long>)(() -> Bits.TBitSet.<
                                                                            Short
                                                                          >fromList(
                                                                                Flags.IEnum_Flag.it,
                                                                                PreludeBase.TList.DCons.<
                                                                                  Short
                                                                                >mk(
                                                                                      Thunk.<
                                                                                        Short
                                                                                      >lazy(
                                                                                            Flags.TFlag.WARNINGS
                                                                                          ),
                                                                                      PreludeBase.TList.DCons.<
                                                                                        Short
                                                                                      >mk(
                                                                                            Thunk.<
                                                                                              Short
                                                                                            >lazy(
                                                                                                  Flags.TFlag.HINTS
                                                                                                ),
                                                                                            PreludeBase.TList.DCons.<
                                                                                              Short
                                                                                            >mk(
                                                                                                  Thunk.<
                                                                                                    Short
                                                                                                  >lazy(
                                                                                                        Flags.TFlag.INLINE
                                                                                                      ),
                                                                                                  PreludeBase.TList.DCons.<
                                                                                                    Short
                                                                                                  >mk(
                                                                                                        Thunk.<
                                                                                                          Short
                                                                                                        >lazy(
                                                                                                              Flags.TFlag.IDEMODE
                                                                                                            ),
                                                                                                        PreludeBase.TList.DCons.<
                                                                                                          Short
                                                                                                        >mk(
                                                                                                              Thunk.<
                                                                                                                Short
                                                                                                              >lazy(
                                                                                                                    Flags.TFlag.IDETOKENS
                                                                                                                  ),
                                                                                                              PreludeBase.TList.DCons.<
                                                                                                                Short
                                                                                                              >mk(
                                                                                                                    Thunk.<
                                                                                                                      Short
                                                                                                                    >lazy(
                                                                                                                          Flags.TFlag.MAKE
                                                                                                                        ),
                                                                                                                    PreludeBase.TList.DList.<
                                                                                                                      Short
                                                                                                                    >mk()
                                                                                                                  )
                                                                                                            )
                                                                                                      )
                                                                                                )
                                                                                          )
                                                                                    )
                                                                              ))
                                                                    ),
                                                                η$19129
                                                              ))
                                                    ))
                                          ))
                                )
                          );
                      return Thunk.<FregeRepl.TReplEnv>nested(
                                (Lazy<Lazy<FregeRepl.TReplEnv>>)(() -> v2057$18990.apply(
                                          arg$19127
                                        ))
                              );
                    });
          })
    );
final public static <𝓐, 𝓢> Func.U<𝓢, java.util.ArrayList<𝓐>> go(
  final PreludeBase.TList<𝓐> arg$1, final Lazy<java.util.ArrayList<𝓐>> arg$2
) {
  final PreludeBase.TList.DCons<𝓐> $19133 = arg$1.asCons();
  if ($19133 != null) {
    final 𝓐 µ$$18812 = $19133.mem1.call();
    return (Func.U<𝓢, java.util.ArrayList<𝓐>>)((final Lazy<𝓢> arg$19135) -> {
              final boolean v4796$19013 = (boolean)TArrayList.<𝓐, 𝓢>add(arg$2.call(), µ$$18812)
              .apply(arg$19135).call();
              final Func.U<𝓢, java.util.ArrayList<𝓐>> v4797$19014 = Thunk.<Func.U<𝓢, java.util.ArrayList<𝓐>>>shared(
                    (Lazy<Func.U<𝓢, java.util.ArrayList<𝓐>>>)(() -> TypeSignature.<𝓐, 𝓢>go(
                              $19133.mem2.call(), arg$2
                            ))
                  ).call();
              return Thunk.<java.util.ArrayList<𝓐>>nested(
                        (Lazy<Lazy<java.util.ArrayList<𝓐>>>)(() -> v4797$19014.apply(
                                  arg$19135
                                ))
                      );
            });
  }
  final PreludeBase.TList.DList<𝓐> $19138 = arg$1.asList();
  assert $19138 != null;
  return PreludeMonad.IMonad_ST.<𝓢, java.util.ArrayList<𝓐>>pure(arg$2);
}
final public static FregeRepl.TRepl<PreludeBase.TMaybe<String/*<Character>*/>> evalType(
  final Lazy<String/*<Character>*/> arg$1
) {
  return FregeRepl.IMonad_Repl.<FregeRepl.TReplEnv, PreludeBase.TMaybe<String/*<Character>*/>>$gt$gt$eq(
            FregeRepl.TRepl.get,
            (Func.U<FregeRepl.TReplEnv, FregeRepl.TRepl<PreludeBase.TMaybe<String/*<Character>*/>>>)((
              final Lazy<FregeRepl.TReplEnv> arg$19139
            ) -> {
                  return Thunk.<FregeRepl.TRepl<PreludeBase.TMaybe<String/*<Character>*/>>>shared(
                            (Lazy<FregeRepl.TRepl<PreludeBase.TMaybe<String/*<Character>*/>>>)(() -> FregeRepl.IMonad_Repl.<
                                  PreludeBase.TEither<PreludeBase.TList<FregeInterpreter.TMessage>, String/*<Character>*/>,
                                  PreludeBase.TMaybe<String/*<Character>*/>
                                >$gt$gt$eq(
                                      FregeRepl.IMonadIO_Repl.<
                                        PreludeBase.TEither<PreludeBase.TList<FregeInterpreter.TMessage>, String/*<Character>*/>
                                      >liftIO(
                                            (Func.U<
                                              RealWorld,
                                              PreludeBase.TEither<
                                                PreludeBase.TList<FregeInterpreter.TMessage>, String/*<Character>*/
                                              >
                                            >)((final Lazy<RealWorld> arg$19140) -> {
                                                  final PreludeBase.TTuple2<
                                                    PreludeBase.TEither<
                                                      PreludeBase.TList<FregeInterpreter.TMessage>, String/*<Character>*/
                                                    >,
                                                    frege.interpreter.javasupport.InterpreterClassLoader
                                                  > v4824$19046 = FregeInterpreter.TInterpreter.<
                                                    PreludeBase.TEither<
                                                      PreludeBase.TList<FregeInterpreter.TMessage>, String/*<Character>*/
                                                    >
                                                  >run(
                                                        FregeInterpreter.typeof(arg$1),
                                                        FregeRepl.TReplEnv.config(arg$19139.call()),
                                                        Thunk.<frege.interpreter.javasupport.InterpreterClassLoader>lazy(
                                                              FregeRepl.TReplEnv.state(
                                                                    arg$19139.call()
                                                                  )
                                                            )
                                                      ).apply(arg$19140).call();
                                                  final Func.U<
                                                    RealWorld,
                                                    PreludeBase.TEither<
                                                      PreludeBase.TList<FregeInterpreter.TMessage>, String/*<Character>*/
                                                    >
                                                  > v4825$19047 = PreludeMonad.IMonad_ST.<
                                                    RealWorld,
                                                    PreludeBase.TEither<
                                                      PreludeBase.TList<FregeInterpreter.TMessage>, String/*<Character>*/
                                                    >
                                                  >pure(
                                                        Thunk.<
                                                          PreludeBase.TEither<
                                                            PreludeBase.TList<FregeInterpreter.TMessage>, String/*<Character>*/
                                                          >
                                                        >shared(
                                                              (Lazy<PreludeBase.TEither<
                                                                PreludeBase.TList<FregeInterpreter.TMessage>,
                                                                String/*<Character>*/
                                                              >>)(() -> PreludeBase.<
                                                                    PreludeBase.TEither<
                                                                      PreludeBase.TList<
                                                                        FregeInterpreter.TMessage
                                                                      >,
                                                                      String/*<Character>*/
                                                                    >,
                                                                    frege.interpreter.javasupport.InterpreterClassLoader
                                                                  >fst(v4824$19046))
                                                            )
                                                      );
                                                  return Thunk.<
                                                        PreludeBase.TEither<
                                                          PreludeBase.TList<FregeInterpreter.TMessage>, String/*<Character>*/
                                                        >
                                                      >nested(
                                                            (Lazy<Lazy<PreludeBase.TEither<
                                                              PreludeBase.TList<FregeInterpreter.TMessage>,
                                                              String/*<Character>*/
                                                            >>>)(() -> v4825$19047.apply(
                                                                      arg$19140
                                                                    ))
                                                          );
                                                })
                                          ),
                                      (Func.U<
                                        PreludeBase.TEither<
                                          PreludeBase.TList<FregeInterpreter.TMessage>, String/*<Character>*/
                                        >,
                                        FregeRepl.TRepl<PreludeBase.TMaybe<String/*<Character>*/>>
                                      >)((
                                        final Lazy<PreludeBase.TEither<
                                          PreludeBase.TList<FregeInterpreter.TMessage>, String/*<Character>*/
                                        >> arg$19143
                                      ) -> {
                                            final PreludeBase.TEither<
                                              PreludeBase.TList<FregeInterpreter.TMessage>, String/*<Character>*/
                                            > res$18808 = arg$19143.call();
                                            final PreludeBase.TEither.DLeft<
                                              PreludeBase.TList<FregeInterpreter.TMessage>, String/*<Character>*/
                                            > $19145 = res$18808.asLeft();
                                            if ($19145 != null) {
                                              return Thunk.<FregeRepl.TRepl<PreludeBase.TMaybe<String/*<Character>*/>>>shared(
                                                        (Lazy<FregeRepl.TRepl<
                                                          PreludeBase.TMaybe<String/*<Character>*/>
                                                        >>)(() -> FregeRepl.IMonad_Repl.<
                                                              PreludeBase.TMaybe<String/*<Character>*/>
                                                            >pure(PreludeBase.TMaybe.DNothing.<String/*<Character>*/>mk()))
                                                      );
                                            }
                                            final PreludeBase.TEither.DRight<
                                              PreludeBase.TList<FregeInterpreter.TMessage>, String/*<Character>*/
                                            > $19146 = res$18808.asRight();
                                            assert $19146 != null;
                                            return Thunk.<FregeRepl.TRepl<PreludeBase.TMaybe<String/*<Character>*/>>>shared(
                                                      (Lazy<FregeRepl.TRepl<
                                                        PreludeBase.TMaybe<String/*<Character>*/>
                                                      >>)(() -> FregeRepl.IMonad_Repl.<
                                                            PreludeBase.TMaybe<String/*<Character>*/>
                                                          >pure(
                                                                PreludeBase.TMaybe.DJust.<
                                                                  String/*<Character>*/
                                                                >mk($19146.mem1)
                                                              ))
                                                    );
                                          })
                                    ))
                          );
                })
          );
}
final public static Lazy<Func.U<
  RealWorld, PreludeBase.TTuple2<PreludeBase.TMaybe<String/*<Character>*/>, FregeRepl.TReplEnv>
>> getFunctionTypeSignature(final Lazy<String/*<Character>*/> arg$1, final Lazy<FregeRepl.TReplEnv> arg$2) {
  return FregeRepl.TRepl.<PreludeBase.TMaybe<String/*<Character>*/>>run(TypeSignature.evalType(arg$1), arg$2);
}
final public static Func.U<RealWorld, PreludeBase.TTuple2<FregeRepl.TReplResult, FregeRepl.TReplEnv>> evalFregeFile(
  final Lazy<String/*<Character>*/> arg$1, final Lazy<FregeRepl.TReplEnv> arg$2
) {
  return (Func.U<RealWorld, PreludeBase.TTuple2<FregeRepl.TReplResult, FregeRepl.TReplEnv>>)((
        final Lazy<RealWorld> arg$19147
      ) -> {
            final PreludeBase.TTuple2<FregeRepl.TReplResult, FregeRepl.TReplEnv> v2056$19079 =
            FregeRepl.TRepl.<FregeRepl.TReplResult>run(FregeRepl.eval(FregeRepl.TCommand.DEval.mk(arg$1)).call(), arg$2)
            .call().apply(arg$19147).call();
            final Func.U<RealWorld, PreludeBase.TTuple2<FregeRepl.TReplResult, FregeRepl.TReplEnv>> v2057$19080 =
            PreludeMonad.IMonad_ST.<RealWorld, PreludeBase.TTuple2<FregeRepl.TReplResult, FregeRepl.TReplEnv>>pure(
                  PreludeBase.TTuple2.<FregeRepl.TReplResult, FregeRepl.TReplEnv>mk(v2056$19079.mem1, v2056$19079.mem2)
                );
            return Thunk.<PreludeBase.TTuple2<FregeRepl.TReplResult, FregeRepl.TReplEnv>>nested(
                      (Lazy<Lazy<PreludeBase.TTuple2<FregeRepl.TReplResult, FregeRepl.TReplEnv>>>)(() -> v2057$19080
                          .apply(arg$19147))
                    );
          });
}

}
