/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.25.84
  from /Users/tricktron/github/master/frege-lsp-server/src/main/frege/ch/fhnw/thga/CompilerExploration.fr
  Do not edit this file! Instead, edit the source file and recompile.
*/

package ch.fhnw.thga;

import frege.run8.Func;
import frege.run8.Lazy;
import frege.run8.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import frege.Prelude;
import frege.Version;
import frege.compiler.Classes;
import frege.compiler.Classtools;
import frege.compiler.GenMeta;
import frege.compiler.Javatypes;
import frege.compiler.Kinds;
import frege.compiler.Main;
import frege.compiler.Typecheck;
import frege.compiler.Utilities;
import frege.compiler.classes.Nice;
import frege.compiler.classes.QNameMatcher;
import frege.compiler.common.Annotate;
import frege.compiler.common.AnnotateG;
import frege.compiler.common.Binders;
import frege.compiler.common.CompilerOptions;
import frege.compiler.common.Desugar;
import frege.compiler.common.Errors;
import frege.compiler.common.ImpExp;
import frege.compiler.common.JavaName;
import frege.compiler.common.Mangle;
import frege.compiler.common.PatternCompiler;
import frege.compiler.common.Resolve;
import frege.compiler.common.Roman;
import frege.compiler.common.SymbolTable;
import frege.compiler.common.Trans;
import frege.compiler.common.Tuples;
import frege.compiler.common.Types;
import frege.compiler.common.UnAlias;
import frege.compiler.enums.CaseKind;
import frege.compiler.enums.Flags;
import frege.compiler.enums.Literals;
import frege.compiler.enums.RFlag;
import frege.compiler.enums.SymState;
import frege.compiler.enums.TokenID;
import frege.compiler.enums.Visibility;
import frege.compiler.gen.java.Bindings;
import frege.compiler.gen.java.Common;
import frege.compiler.gen.java.Constants;
import frege.compiler.gen.java.DataCode;
import frege.compiler.gen.java.InstanceCode;
import frege.compiler.gen.java.Instantiation;
import frege.compiler.gen.java.Match;
import frege.compiler.gen.java.MethodCall;
import frege.compiler.gen.java.PrettyJava;
import frege.compiler.gen.java.VarCode;
import frege.compiler.grammar.Frege;
import frege.compiler.grammar.Lexer;
import frege.compiler.instances.NiceExprS;
import frege.compiler.instances.Nicer;
import frege.compiler.instances.PositionedSName;
import frege.compiler.passes.Easy;
import frege.compiler.passes.Enter;
import frege.compiler.passes.Fields;
import frege.compiler.passes.Final;
import frege.compiler.passes.Fix;
import frege.compiler.passes.GenCode;
import frege.compiler.passes.GlobalLam;
import frege.compiler.passes.Imp;
import frege.compiler.passes.Instances;
import frege.compiler.passes.LetUnroll;
import frege.compiler.passes.Strict;
import frege.compiler.passes.Transdef;
import frege.compiler.passes.TypeAlias;
import frege.compiler.tc.Methods;
import frege.compiler.tc.Patterns;
import frege.compiler.tc.Util;
import frege.compiler.types.AbstractJava;
import frege.compiler.types.ConstructorField;
import frege.compiler.types.Expression;
import frege.compiler.types.External;
import frege.compiler.types.Global;
import frege.compiler.types.ImportDetails;
import frege.compiler.types.JNames;
import frege.compiler.types.NSNames;
import frege.compiler.types.Packs;
import frege.compiler.types.Positions;
import frege.compiler.types.QNames;
import frege.compiler.types.SNames;
import frege.compiler.types.SourceDefinitions;
import frege.compiler.types.Strictness;
import frege.compiler.types.Symbols;
import frege.compiler.types.Targets;
import frege.compiler.types.Tokens;
import frege.control.Category;
import frege.control.Concurrent;
import frege.control.Semigroupoid;
import frege.control.monad.State;
import frege.control.monad.trans.MonadIO;
import frege.control.monad.trans.MonadTrans;
import frege.data.Bits;
import frege.data.Char;
import frege.data.Foldable;
import frege.data.Graph;
import frege.data.List;
import frege.data.Monoid;
import frege.data.Traversable;
import frege.data.Tree;
import frege.data.TreeMap;
import frege.data.wrapper.Const;
import frege.data.wrapper.Dual;
import frege.data.wrapper.Endo;
import frege.data.wrapper.Identity;
import frege.data.wrapper.Num;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Net;
import frege.java.util.Regex;
import frege.lib.PP;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeDecimal;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;
import frege.system.Random;
import frege.test.QuickCheck;
import frege.test.QuickCheckArbitrary;
import frege.test.QuickCheckException;
import frege.test.QuickCheckGen;
import frege.test.QuickCheckModifiers;
import frege.test.QuickCheckProperty;
import frege.test.QuickCheckState;
import frege.test.QuickCheckTest;
import frege.test.QuickCheckText;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="/Users/tricktron/github/master/frege-lsp-server/src/main/frege/ch/fhnw/thga/CompilerExploration.fr",
  time=1651667093204L, jmajor=11, jminor=-1,
  imps={
    "frege.control.Concurrent", "frege.compiler.Main", "frege.compiler.common.CompilerOptions",
    "frege.compiler.enums.Flags", "frege.compiler.types.Global", "frege.Prelude", "frege.prelude.PreludeArrays",
    "frege.prelude.PreludeBase", "frege.prelude.PreludeDecimal", "frege.prelude.PreludeIO", "frege.prelude.PreludeList",
    "frege.prelude.PreludeMonad", "frege.prelude.PreludeText", "frege.test.QuickCheck", "frege.java.util.Regex",
    "frege.control.monad.State", "frege.compiler.types.Targets"
  },
  nmss={
    "C", "Compiler", "CompilerOptions", "Flags", "Global", "Prelude", "PreludeArrays", "PreludeBase",
    "PreludeDecimal", "PreludeIO", "PreludeList", "PreludeMonad", "PreludeText", "QuickCheck",
    "Regexp", "State", "Targets"
  },
  symas={}, symcs={}, symis={}, symts={},
  symvs={
    @Meta.SymV(
      offset=2347, name=@Meta.QName(pack="ch.fhnw.thga.CompilerExploration", base="parseFile"), stri="u",
      sig=0, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=1917, name=@Meta.QName(pack="ch.fhnw.thga.CompilerExploration", base="minimalFregeModulePath"), stri="s",
      sig=1, depth=0, rkind=13
    ),
    @Meta.SymV(
      offset=2567, name=@Meta.QName(pack="ch.fhnw.thga.CompilerExploration", base="main"), stri="u",
      sig=2, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=498, name=@Meta.QName(pack="ch.fhnw.thga.CompilerExploration", base="ideOptions"), stri="u",
      sig=3, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=2501, name=@Meta.QName(pack="ch.fhnw.thga.CompilerExploration", base="helper"), stri="s(u)",
      sig=5, depth=1, rkind=13
    ),
    @Meta.SymV(
      offset=2097, name=@Meta.QName(pack="ch.fhnw.thga.CompilerExploration", base="fregeCompilerShouldEvaluateFile"),
      stri="u", sig=6, depth=0, rkind=8
    ),
    @Meta.SymV(
      offset=1787, name=@Meta.QName(pack="ch.fhnw.thga.CompilerExploration", base="compilerErrors"), stri="s(s)",
      sig=7, depth=1, rkind=13
    ),
    @Meta.SymV(
      offset=1569, name=@Meta.QName(pack="ch.fhnw.thga.CompilerExploration", base="compileFregeRoot"), stri="s(s)",
      sig=9, depth=1, rkind=13
    ),
    @Meta.SymV(
      offset=1227, name=@Meta.QName(pack="ch.fhnw.thga.CompilerExploration", base="compileFregeProject"), stri="s(u)",
      sig=10, depth=1, rkind=13
    )
  },
  symls={
    @Meta.SymL(
      offset=450, name=@Meta.QName(pack="ch.fhnw.thga.CompilerExploration", base="thisTarget"),
      alias=@Meta.QName(pack="frege.compiler.types.Targets", base="thisTarget")
    )
  },
  taus={
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.control.monad.State", base="StateT")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.compiler.types.Global", base="Global")}),
    @Meta.Tau(kind=0, suba=0, subb=1),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="ST")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="RealWorld")}),
    @Meta.Tau(kind=0, suba=3, subb=4), @Meta.Tau(kind=0, suba=2, subb=5),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="()")}),
    @Meta.Tau(kind=0, suba=6, subb=7),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}),
    @Meta.Tau(kind=0, suba=9, subb=10), @Meta.Tau(kind=0, suba=5, subb=7),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.compiler.types.Global", base="Options")}),
    @Meta.Tau(kind=0, suba=5, subb=1),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.test.QuickCheckGen", base="Gen")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.test.QuickCheckProperty", base="Prop")}),
    @Meta.Tau(kind=0, suba=15, subb=16),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.compiler.types.Global", base="Message")}),
    @Meta.Tau(kind=0, suba=18, subb=19), @Meta.Tau(kind=0, suba=18, subb=11),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Bool")}),
    @Meta.Tau(kind=0, suba=6, subb=22)
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=8), @Meta.Rho(rhofun=false, rhotau=11), @Meta.Rho(rhofun=false, rhotau=12),
    @Meta.Rho(rhofun=false, rhotau=13), @Meta.Rho(rhofun=false, rhotau=1), @Meta.Rho(rhofun=false, rhotau=14),
    @Meta.Rho(sigma=4, rhotau=5), @Meta.Rho(rhofun=false, rhotau=17), @Meta.Rho(rhofun=false, rhotau=20),
    @Meta.Rho(sigma=4, rhotau=8), @Meta.Rho(rhofun=false, rhotau=21), @Meta.Rho(rhofun=false, rhotau=23),
    @Meta.Rho(sigma=8, rhotau=11), @Meta.Rho(sigma=8, rhotau=5)
  },
  sigmas={
    @Meta.Sigma(rho=0), @Meta.Sigma(rho=1), @Meta.Sigma(rho=2), @Meta.Sigma(rho=3), @Meta.Sigma(rho=4),
    @Meta.Sigma(rho=6), @Meta.Sigma(rho=7), @Meta.Sigma(rho=9), @Meta.Sigma(rho=10), @Meta.Sigma(rho=12),
    @Meta.Sigma(rho=13)
  },
  exprs={@Meta.Expr()}
)
final public class CompilerExploration  {
  




final public static String/*<Character>*/ minimalFregeModulePath =
"/Users/tricktron/github/master/frege-lsp-server/src/test/resources/src/main/frege/ch/fhnw/thga/FaultyFregeTest.fr";
final public static Lazy<State.TStateT<Global.TGlobal, Func.U<RealWorld, ?>, Short>> parseFile =
Thunk.<State.TStateT<Global.TGlobal, Func.U<RealWorld, ?>, Short>>shared(
      (Lazy<State.TStateT<Global.TGlobal, Func.U<RealWorld, ?>, Short>>)(() -> {
            final State.TStateT<Global.TGlobal, Func.U<RealWorld, ?>, Global.TGlobal> $18512 =
            Main.lexparse(Thunk.<String/*<Character>*/>lazy(CompilerExploration.minimalFregeModulePath));
            final Func.U<
              Global.TGlobal, Kind.U<Func.U<RealWorld, ?>, PreludeBase.TTuple2<Global.TGlobal, Global.TGlobal>>
            > v7734$17992 = $18512.mem$run;
            return State.TStateT.<Global.TGlobal, Func.U<RealWorld, ?>, Short>mk(
                      (Func.U<Global.TGlobal, Kind.U<Func.U<RealWorld, ?>, PreludeBase.TTuple2<Short, Global.TGlobal>>>)((
                        final Lazy<Global.TGlobal> arg$18514
                      ) -> {
                            return Thunk.<Kind.U<Func.U<RealWorld, ?>, PreludeBase.TTuple2<Short, Global.TGlobal>>>lazy(
                                      (Kind.U<Func.U<RealWorld, ?>, PreludeBase.TTuple2<Short, Global.TGlobal>>)(Func.U<
                                        RealWorld, PreludeBase.TTuple2<Short, Global.TGlobal>
                                      >)((final Lazy<RealWorld> arg$18515) -> {
                                            final PreludeBase.TTuple2<Global.TGlobal, Global.TGlobal> v2056$18027 =
                                            RunTM.<
                                              Func.U<
                                                Global.TGlobal,
                                                Func.U<RealWorld, PreludeBase.TTuple2<Global.TGlobal, Global.TGlobal>>
                                              >
                                            >cast(v7734$17992).apply(arg$18514).call()
                                            .apply(arg$18515).call();
                                            final Global.TGlobal v7737$17995 = v2056$18027.mem1
                                            .call();
                                            final State.TStateT<Global.TGlobal, Func.U<RealWorld, ?>, Short> $18518 =
                                            Global.<Short>liftIO(
                                                  Prelude.<String/*<Character>*/>println(
                                                        PreludeText.IShow_String.it,
                                                        Global.TSubSt.code(Global.TGlobal.sub(v7737$17995))
                                                        .toString()
                                                      )
                                                );
                                            final Func.U<
                                              Global.TGlobal,
                                              Kind.U<Func.U<RealWorld, ?>, PreludeBase.TTuple2<Short, Global.TGlobal>>
                                            > v7739$17997 = $18518.mem$run;
                                            final Func.U<RealWorld, PreludeBase.TTuple2<Short, Global.TGlobal>> v2057$18028 =
                                            RunTM.<
                                              Func.U<
                                                Global.TGlobal, Func.U<RealWorld, PreludeBase.TTuple2<Short, Global.TGlobal>>
                                              >
                                            >cast(v7739$17997).apply(v2056$18027.mem2)
                                            .call();
                                            return Thunk.<PreludeBase.TTuple2<Short, Global.TGlobal>>nested(
                                                      (Lazy<Lazy<PreludeBase.TTuple2<Short, Global.TGlobal>>>)(() -> v2057$18028
                                                          .apply(arg$18515))
                                                    );
                                          })
                                    );
                          })
                    );
          })
    );
final public static Lazy<Global.TOptions> ideOptions = Thunk.<Global.TOptions>shared(
      (Lazy<Global.TOptions>)(() -> {
            return Global.TOptions.mk(
                      "-",
                      PreludeBase.TList.DCons.<String/*<Character>*/>mk(
                            Thunk.<String/*<Character>*/>lazy(
                                  "/Users/tricktron/github/master/frege-lsp-server/src/test/resources/src/main/frege"
                                ),
                            PreludeBase.TList.DList.<String/*<Character>*/>mk()
                          ),
                      (long)Bits.TBitSet.<Short>fromList(
                            Flags.IEnum_Flag.it,
                            PreludeBase.TList.DCons.<Short>mk(
                                  Thunk.<Short>lazy(Flags.TFlag.WARNINGS),
                                  PreludeBase.TList.DCons.<Short>mk(
                                        Thunk.<Short>lazy(Flags.TFlag.HINTS),
                                        PreludeBase.TList.DCons.<Short>mk(
                                              Thunk.<Short>lazy(Flags.TFlag.VERBOSE),
                                              PreludeBase.TList.DCons.<Short>mk(
                                                    Thunk.<Short>lazy(Flags.TFlag.IDETOKENS),
                                                    PreludeBase.TList.DCons.<Short>mk(
                                                          Thunk.<Short>lazy(Flags.TFlag.IDEMODE),
                                                          PreludeBase.TList.DCons.<Short>mk(
                                                                Thunk.<Short>lazy(Flags.TFlag.MAKE),
                                                                PreludeBase.TList.DList.<
                                                                  Short
                                                                >mk()
                                                              )
                                                        )
                                                  )
                                            )
                                      )
                                )
                          ),
                      "/Users/tricktron/github/master/frege-lsp-server/src/test/resources/src/main/frege",
                      PreludeBase.TList.DList.<String/*<Character>*/>mk(), "",
                      PreludeBase.TMaybe.DJust.<String/*<Character>*/>mk(Thunk.<String/*<Character>*/>lazy("UTF-8")),
                      PreludeBase.TList.DList.<PreludeBase.TTuple2<Integer, Integer>>mk(), Targets.thisTarget.call(),
                      PreludeBase.TMaybe.DNothing.<frege.compiler.types.Types.TSigmaT<QNames.TQName>>mk(),
                      PreludeBase.TList.DList.<frege.compiler.types.Types.TSigmaT<QNames.TQName>>mk(),
                      PreludeBase.TList.DList.<Tokens.TToken>mk()
                    );
          })
    );
final public static Func.U<RealWorld, Global.TGlobal> helper(final Lazy<Global.TGlobal> arg$1) {
  return Func.<RealWorld, Global.TGlobal>coerceU(
            State.<Short, Func.U<RealWorld, ?>, Global.TGlobal>execStateT(
                  PreludeMonad.IMonad_ST.<RealWorld>mk(), CompilerExploration.parseFile, arg$1
                )
          );
}
final public static Lazy<QuickCheckGen.TGen<
  QuickCheckProperty.TRose<QuickCheckProperty.TResult>
>> fregeCompilerShouldEvaluateFile = Thunk.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>shared(
      (Lazy<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>)(() -> {
            return QuickCheckProperty.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>once(
                      new QuickCheckProperty.ITestable_Gen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>(
                        QuickCheckProperty.ITestable_Prop.it
                      ),
                      Thunk.<QuickCheckGen.TGen<QuickCheckProperty.TRose<QuickCheckProperty.TResult>>>shared(
                            (Lazy<QuickCheckGen.TGen<
                              QuickCheckProperty.TRose<QuickCheckProperty.TResult>
                            >>)(() -> QuickCheckProperty.<Boolean>morallyDubiousIOProperty(
                                      QuickCheckProperty.ITestable_Bool.it,
                                      (Func.U<RealWorld, Boolean>)((final Lazy<RealWorld> arg$18521) -> {
                                            final java.util.concurrent.BlockingQueue<Boolean> v2056$18196 =
                                            Main.<Void>compileFile(
                                                  CompilerOptions.stdOptions,
                                                  PreludeBase.TEither.DRight.<
                                                    PreludeBase.TTuple2<Void, String/*<Character>*/>, String/*<Character>*/
                                                  >mk(
                                                        Thunk.<String/*<Character>*/>lazy(
                                                              CompilerExploration.minimalFregeModulePath
                                                            )
                                                      )
                                                ).apply(arg$18521).call();
                                            final Func.U<RealWorld, Boolean> v2053$18222 =
                                            Concurrent.TMVar.<Boolean>take(v2056$18196);
                                            final boolean v2056$18225 = (boolean)v2053$18222
                                            .apply(arg$18521).call();
                                            final Func.U<RealWorld, Boolean> v2057$18226 =
                                            PreludeMonad.IMonad_ST.<RealWorld, Boolean>pure(
                                                  Thunk.<Boolean>shared((Lazy<Boolean>)(() -> v2056$18225 == true))
                                                );
                                            return Thunk.<Boolean>nested(
                                                      (Lazy<Lazy<Boolean>>)(() -> v2057$18226
                                                          .apply(arg$18521))
                                                    );
                                          })
                                    ))
                          )
                    );
          })
    );
final public static PreludeBase.TList<Global.TMessage> compilerErrors(final Global.TGlobal arg$1) {
  if (Global.TSubSt.numErrors(Global.TGlobal.sub(arg$1)) > 0) {
    return Global.TSubSt.messages(Global.TGlobal.sub(arg$1));
  }
  else {
    return PreludeBase.TList.DList.<Global.TMessage>mk();
  }
}
final public static State.TStateT<Global.TGlobal, Func.U<RealWorld, ?>, Boolean> compileFregeRoot(
  final PreludeBase.TList<String/*<Character>*/> arg$1
) {
  final State.TStateT<
    Global.TGlobal, Func.U<RealWorld, ?>,
    PreludeBase.TList<
      PreludeBase.TEither<PreludeBase.TTuple2<String/*<Character>*/, String/*<Character>*/>, String/*<Character>*/>
    >
  > $18526 = Main.processDirs(arg$1);
  final Func.U<
    Global.TGlobal,
    Kind.U<
      Func.U<RealWorld, ?>,
      PreludeBase.TTuple2<
        PreludeBase.TList<
          PreludeBase.TEither<PreludeBase.TTuple2<String/*<Character>*/, String/*<Character>*/>, String/*<Character>*/>
        >,
        Global.TGlobal
      >
    >
  > v7734$18252 = $18526.mem$run;
  return State.TStateT.<Global.TGlobal, Func.U<RealWorld, ?>, Boolean>mk(
            (Func.U<Global.TGlobal, Kind.U<Func.U<RealWorld, ?>, PreludeBase.TTuple2<Boolean, Global.TGlobal>>>)((
              final Lazy<Global.TGlobal> arg$18528
            ) -> {
                  return Thunk.<Kind.U<Func.U<RealWorld, ?>, PreludeBase.TTuple2<Boolean, Global.TGlobal>>>lazy(
                            (Kind.U<Func.U<RealWorld, ?>, PreludeBase.TTuple2<Boolean, Global.TGlobal>>)(Func.U<
                              RealWorld, PreludeBase.TTuple2<Boolean, Global.TGlobal>
                            >)((final Lazy<RealWorld> arg$18529) -> {
                                  final PreludeBase.TTuple2<
                                    PreludeBase.TList<
                                      PreludeBase.TEither<
                                        PreludeBase.TTuple2<String/*<Character>*/, String/*<Character>*/>, String/*<Character>*/
                                      >
                                    >,
                                    Global.TGlobal
                                  > v2056$18287 = RunTM.<
                                    Func.U<
                                      Global.TGlobal,
                                      Func.U<
                                        RealWorld,
                                        PreludeBase.TTuple2<
                                          PreludeBase.TList<
                                            PreludeBase.TEither<
                                              PreludeBase.TTuple2<String/*<Character>*/, String/*<Character>*/>,
                                              String/*<Character>*/
                                            >
                                          >,
                                          Global.TGlobal
                                        >
                                      >
                                    >
                                  >cast(v7734$18252).apply(arg$18528).call().apply(arg$18529)
                                  .call();
                                  final PreludeBase.TList<
                                    PreludeBase.TEither<
                                      PreludeBase.TTuple2<String/*<Character>*/, String/*<Character>*/>, String/*<Character>*/
                                    >
                                  > v7737$18255 = v2056$18287.mem1.call();
                                  final Func.U<
                                    RealWorld,
                                    java.util.concurrent.BlockingQueue<PreludeBase.TTuple2<String/*<Character>*/, Main.TTodo>>
                                  > v20395$18364 = Concurrent.TMVar.<
                                    PreludeBase.TTuple2<String/*<Character>*/, Main.TTodo>
                                  >newEmpty().call();
                                  final java.util.concurrent.BlockingQueue<
                                    PreludeBase.TTuple2<String/*<Character>*/, Main.TTodo>
                                  > v20398$18366 = v20395$18364.apply(arg$18529).call();
                                  final Func.U<
                                    RealWorld,
                                    PreludeBase.TTuple2<
                                      java.util.concurrent.BlockingQueue<
                                        PreludeBase.TTuple2<String/*<Character>*/, Main.TTodo>
                                      >,
                                      Global.TGlobal
                                    >
                                  > v20399$18367 = PreludeMonad.IMonad_ST.<
                                    RealWorld,
                                    PreludeBase.TTuple2<
                                      java.util.concurrent.BlockingQueue<
                                        PreludeBase.TTuple2<String/*<Character>*/, Main.TTodo>
                                      >,
                                      Global.TGlobal
                                    >
                                  >pure(
                                        PreludeBase.TTuple2.<
                                          java.util.concurrent.BlockingQueue<
                                            PreludeBase.TTuple2<String/*<Character>*/, Main.TTodo>
                                          >,
                                          Global.TGlobal
                                        >mk(
                                              Thunk.<
                                                java.util.concurrent.BlockingQueue<
                                                  PreludeBase.TTuple2<String/*<Character>*/, Main.TTodo>
                                                >
                                              >lazy(v20398$18366),
                                              v2056$18287.mem2
                                            )
                                      );
                                  final PreludeBase.TTuple2<
                                    java.util.concurrent.BlockingQueue<PreludeBase.TTuple2<String/*<Character>*/, Main.TTodo>>,
                                    Global.TGlobal
                                  > v2056$18342 = v20399$18367.apply(arg$18529).call();
                                  final State.TStateT<
                                    Global.TGlobal, Func.U<RealWorld, ?>, TreeMap.TTreeMap<String/*<Character>*/, Main.TTodo>
                                  > $18536 = Main.parseAll(v2056$18342.mem1, Main.createTodo(v7737$18255));
                                  final Func.U<
                                    Global.TGlobal,
                                    Kind.U<
                                      Func.U<RealWorld, ?>,
                                      PreludeBase.TTuple2<TreeMap.TTreeMap<String/*<Character>*/, Main.TTodo>, Global.TGlobal>
                                    >
                                  > v7734$18397 = $18536.mem$run;
                                  final Func.U<
                                    RealWorld,
                                    PreludeBase.TTuple2<TreeMap.TTreeMap<String/*<Character>*/, Main.TTodo>, Global.TGlobal>
                                  > v2053$18429 = RunTM.<
                                    Func.U<
                                      Global.TGlobal,
                                      Func.U<
                                        RealWorld,
                                        PreludeBase.TTuple2<TreeMap.TTreeMap<String/*<Character>*/, Main.TTodo>, Global.TGlobal>
                                      >
                                    >
                                  >cast(v7734$18397).apply(v2056$18342.mem2).call();
                                  final PreludeBase.TTuple2<
                                    TreeMap.TTreeMap<String/*<Character>*/, Main.TTodo>, Global.TGlobal
                                  > v2056$18432 = v2053$18429.apply(arg$18529).call();
                                  final TreeMap.TTreeMap<String/*<Character>*/, Main.TTodo> v7737$18400 =
                                  v2056$18432.mem1.call();
                                  final State.TStateT<Global.TGlobal, Func.U<RealWorld, ?>, Boolean> $18541 =
                                  Main.make(v2056$18342.mem1, v7737$18400);
                                  final Func.U<
                                    Global.TGlobal, Kind.U<Func.U<RealWorld, ?>, PreludeBase.TTuple2<Boolean, Global.TGlobal>>
                                  > v7739$18402 = $18541.mem$run;
                                  final Func.U<RealWorld, PreludeBase.TTuple2<Boolean, Global.TGlobal>> v2057$18433 =
                                  RunTM.<
                                    Func.U<Global.TGlobal, Func.U<RealWorld, PreludeBase.TTuple2<Boolean, Global.TGlobal>>>
                                  >cast(v7739$18402).apply(v2056$18432.mem2).call();
                                  return Thunk.<PreludeBase.TTuple2<Boolean, Global.TGlobal>>nested(
                                            (Lazy<Lazy<PreludeBase.TTuple2<Boolean, Global.TGlobal>>>)(() -> v2057$18433
                                                .apply(arg$18529))
                                          );
                                })
                          );
                })
          );
}
final public static Func.U<RealWorld, Global.TGlobal> compileFregeProject(
  final Lazy<PreludeBase.TList<String/*<Character>*/>> arg$1
) {
  return (Func.U<RealWorld, Global.TGlobal>)((final Lazy<RealWorld> arg$18544) -> {
            final java.net.URLClassLoader v2056$18454 = CompilerOptions.theClassLoader(
                  CompilerExploration.ideOptions.call()
                ).apply(arg$18544).call();
            final Func.U<RealWorld, Global.TGlobal> v2053$18473 = CompilerOptions.standardGlobal
            .call();
            final Global.TGlobal v2056$18476 = v2053$18473.apply(arg$18544).call();
            final Func.U<RealWorld, PreludeBase.TTuple2<Boolean, Global.TGlobal>> v2053$18495 =
            Func.<RealWorld, PreludeBase.TTuple2<Boolean, Global.TGlobal>>coerceU(
                  State.TStateT.<Func.U<RealWorld, ?>, Boolean, Global.TGlobal>run(
                        CompilerExploration.compileFregeRoot(arg$1.call()),
                        Thunk.<Global.TGlobal>shared(
                              (Lazy<Global.TGlobal>)(() -> Global.TGlobal.chg$sub(
                                        Global.TGlobal.upd$options(v2056$18476, CompilerExploration.ideOptions.call()),
                                        (Func.U<Global.TSubSt, Global.TSubSt>)((final Lazy<Global.TSubSt> arg$18548) -> {
                                              final Global.TSubSt in$17686 = arg$18548
                                              .call();
                                              return Thunk.<Global.TSubSt>shared(
                                                        (Lazy<Global.TSubSt>)(() -> Global.TSubSt.upd$loader(
                                                                  in$17686, v2056$18454
                                                                ))
                                                      );
                                            })
                                      ))
                            )
                      ).call()
                );
            final PreludeBase.TTuple2<Boolean, Global.TGlobal> v2056$18498 = v2053$18495
            .apply(arg$18544).call();
            final Func.U<RealWorld, Global.TGlobal> v2057$18499 = PreludeMonad.IMonad_ST.<
              RealWorld, Global.TGlobal
            >pure(v2056$18498.mem2);
            return Thunk.<Global.TGlobal>nested((Lazy<Lazy<Global.TGlobal>>)(() -> v2057$18499.apply(arg$18544)));
          });
}
final public static Lazy<Func.U<RealWorld, Short>> $main = Thunk.<Func.U<RealWorld, Short>>shared(
      (Lazy<Func.U<RealWorld, Short>>)(() -> {
            return (Func.U<RealWorld, Short>)((final Lazy<RealWorld> arg$18553) -> {
                      final java.net.URLClassLoader v2056$18063 = CompilerOptions.theClassLoader(
                            CompilerExploration.ideOptions.call()
                          ).apply(arg$18553).call();
                      final Func.U<RealWorld, Global.TGlobal> v2053$18082 = CompilerOptions.standardGlobal
                      .call();
                      final Global.TGlobal v2056$18085 = v2053$18082.apply(arg$18553)
                      .call();
                      final Func.U<RealWorld, Global.TGlobal> v4793$18107 = CompilerExploration.helper(
                            Thunk.<Global.TGlobal>shared(
                                  (Lazy<Global.TGlobal>)(() -> Global.TGlobal.chg$sub(
                                            Global.TGlobal.upd$options(v2056$18085, CompilerExploration.ideOptions.call()),
                                            (Func.U<Global.TSubSt, Global.TSubSt>)((final Lazy<Global.TSubSt> arg$18565) -> {
                                                  final Global.TSubSt in$17701 = arg$18565
                                                  .call();
                                                  return Thunk.<Global.TSubSt>shared(
                                                            (Lazy<Global.TSubSt>)(() -> Global.TSubSt.upd$loader(
                                                                      in$17701, v2056$18063
                                                                    ))
                                                          );
                                                })
                                          ))
                                )
                          );
                      final Global.TGlobal v4796$18109 = v4793$18107.apply(arg$18553)
                      .call();
                      final Func.U<RealWorld, Short> v4797$18110 = ((Func.U<RealWorld, Short>)((
                        final Lazy<RealWorld> arg$18562
                      ) -> {
                            final short v4796$18133 = (short)Prelude.<String/*<Character>*/>println(
                                  PreludeText.IShow_String.it, "test"
                                ).apply(arg$18562).call();
                            final Func.U<RealWorld, Short> v4797$18134 = ((Func.U<RealWorld, Short>)((
                              final Lazy<RealWorld> arg$18557
                            ) -> {
                                  final Global.TGlobal v2056$18155 = CompilerExploration.compileFregeProject(
                                        PreludeBase.TList.DCons.<String/*<Character>*/>mk(
                                              Thunk.<String/*<Character>*/>lazy(
                                                    "/Users/tricktron/github/master/frege-lsp-server/src/test/resources/src/main/frege"
                                                  ),
                                              PreludeBase.TList.DList.<String/*<Character>*/>mk()
                                            )
                                      ).apply(arg$18557).call();
                                  final Func.U<RealWorld, Short> v2057$18156 = Func.<RealWorld, Short>coerceU(
                                        PreludeMonad.<Func.U<RealWorld, ?>, Short, Global.TMessage>forM_(
                                              PreludeMonad.IMonad_ST.<RealWorld>mk(),
                                              PreludeList.<Global.TMessage>reverse(
                                                    CompilerExploration.compilerErrors(
                                                          v2056$18155
                                                        )
                                                  ),
                                              (Func.U<Global.TMessage, Kind.U<Func.U<RealWorld, ?>, Short>>)((
                                                final Lazy<Global.TMessage> arg$18559
                                              ) -> {
                                                    final Global.TMessage v2338$18174 =
                                                    arg$18559.call();
                                                    return Thunk.<Kind.U<Func.U<RealWorld, ?>, Short>>shared(
                                                              (Lazy<Kind.U<Func.U<RealWorld, ?>, Short>>)(() -> (Kind.U<
                                                                    Func.U<RealWorld, ?>, Short
                                                                  >)Thunk.<Func.U<RealWorld, Short>>shared(
                                                                        (Lazy<Func.U<RealWorld, Short>>)(() -> Prelude.<
                                                                              String/*<Character>*/
                                                                            >println(
                                                                                  PreludeText.IShow_String.it,
                                                                                  Global.TMessage.text(
                                                                                        v2338$18174
                                                                                      )
                                                                                ))
                                                                      ).call())
                                                            );
                                                  })
                                            )
                                      );
                                  return Thunk.<Short>nested((Lazy<Lazy<Short>>)(() -> v2057$18156.apply(arg$18557)));
                                })).call();
                            return Thunk.<Short>nested((Lazy<Lazy<Short>>)(() -> v4797$18134.apply(arg$18562)));
                          })).call();
                      return Thunk.<Short>nested((Lazy<Lazy<Short>>)(() -> v4797$18110.apply(arg$18553)));
                    });
          })
    );

  public static void main(final java.lang.String[] argv) {
    try {
      frege.run.RunTM.argv = argv;
      
        PreludeBase.TST.<Short>performUnsafe($main
               .call()
          ).call();
      frege.runtime.Runtime.stdout.get().close();
      frege.runtime.Runtime.stderr.get().close();

    } finally { frege.run.Concurrent.shutDownIfExists(); }
  }
}
