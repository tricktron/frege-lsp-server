/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ » ∀ ∃ ∷ … → ← ﬁ ﬂ ƒ
  If you can't read this, you're out of luck. This code was generated with the frege compiler version 3.25.84
  from /Users/tricktron/github/master/frege-lsp-server/src/main/frege/ch/fhnw/thga/CorrectFregeTest.fr
  Do not edit this file! Instead, edit the source file and recompile.
*/

import frege.run8.Func;
import frege.run8.Lazy;
import frege.run8.Thunk;
import frege.run.Kind;
import frege.run.RunTM;
import frege.runtime.Meta;
import frege.runtime.Phantom.RealWorld;
import frege.Prelude;
import frege.control.Category;
import frege.control.Semigroupoid;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Util;
import frege.java.util.Regex;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeDecimal;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;

@SuppressWarnings("unused")
@Meta.FregePackage(
  source="/Users/tricktron/github/master/frege-lsp-server/src/main/frege/ch/fhnw/thga/CorrectFregeTest.fr",
  time=1652901382728L, jmajor=11, jminor=-1,
  imps={
    "frege.Prelude", "frege.prelude.PreludeArrays", "frege.prelude.PreludeBase", "frege.prelude.PreludeDecimal",
    "frege.prelude.PreludeIO", "frege.prelude.PreludeList", "frege.prelude.PreludeMonad", "frege.prelude.PreludeText",
    "frege.java.util.Regex"
  },
  nmss={
    "Prelude", "PreludeArrays", "PreludeBase", "PreludeDecimal", "PreludeIO", "PreludeList", "PreludeMonad",
    "PreludeText", "Regexp"
  },
  symas={}, symcs={}, symis={}, symts={},
  symvs={
    @Meta.SymV(
      offset=89, name=@Meta.QName(pack="CorrectFregeTest", base="square"), stri="s(u)", sig=1,
      depth=1, rkind=13
    ),
    @Meta.SymV(
      offset=31, name=@Meta.QName(pack="CorrectFregeTest", base="complete"), stri="s(u)", sig=2,
      depth=1, rkind=13
    ),
    @Meta.SymV(
      offset=64, name=@Meta.QName(pack="CorrectFregeTest", base="answerToEverything"), stri="s",
      sig=3, depth=0, rkind=13
    )
  },
  symls={},
  taus={
    @Meta.Tau(kind=9), @Meta.Tau(suba=0, tvar="a"),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="(,)")}),
    @Meta.Tau(kind=0, suba=2, subb=1),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}),
    @Meta.Tau(kind=0, suba=4, subb=5), @Meta.Tau(kind=0, suba=3, subb=6),
    @Meta.Tau(kind=2, suba=0, tcon={@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Int")})
  },
  rhos={
    @Meta.Rho(rhofun=false, rhotau=1),
    @Meta.Rho(
      cont={@Meta.Context(clas=@Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Num"), tau=1)}, sigma=0,
      rhotau=0
    ),
    @Meta.Rho(rhofun=false, rhotau=7), @Meta.Rho(sigma=0, rhotau=2), @Meta.Rho(rhofun=false, rhotau=8)
  },
  sigmas={
    @Meta.Sigma(rho=0), @Meta.Sigma(bound={"a"}, kinds={0}, rho=1), @Meta.Sigma(bound={"a"}, kinds={0}, rho=3),
    @Meta.Sigma(rho=4)
  },
  exprs={@Meta.Expr()}
)
final public class CorrectFregeTest  {
  




final public static <a> a square(final PreludeBase.CNum<a> ctx$1, final Lazy<a> arg$1) {
  return ctx$1.ƒ$star(arg$1, arg$1);
}
final public static <a> PreludeBase.TTuple2<a, String/*<Character>*/> complete(final Lazy<a> arg$1) {
  return PreludeBase.TTuple2.<a, String/*<Character>*/>mk(arg$1, Thunk.<String/*<Character>*/>lazy("Frege rocks"));
}
final public static int answerToEverything = 42;

}
